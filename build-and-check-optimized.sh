#!/bin/bash

### Ch·∫°y script sau: ./build-and-check-optimized.sh [new_version]
### N·∫øu kh√¥ng cung c·∫•p new_version, script s·∫Ω t·ª± ƒë·ªông tƒÉng version

# B·∫≠t ch·∫ø ƒë·ªô d·ª´ng khi c√≥ l·ªói
set -e

# C√°c bi·∫øn m√¥i tr∆∞·ªùng
USERNAME="thotran113"
APP_NAME="chatwoot-interactive"
IMAGE_NAME="$USERNAME/$APP_NAME"

# H√†m ƒë·ªÉ tƒÉng version
increment_version() {
    local version=$1
    local base_version
    local suffix=""

    echo "üîç ƒêang tƒÉng version t·ª´: $version" >&2

    # Ki·ªÉm tra xem version c√≥ h·∫≠u t·ªë kh√¥ng (v√≠ d·ª•: -beta)
    if [[ $version == *-* ]]; then
        base_version=${version%%-*}
        suffix=${version##*-}
        suffix="-$suffix"
        echo "üìå Ph√¢n t√≠ch: base_version=$base_version, suffix=$suffix" >&2
    else
        base_version=$version
        # N·∫øu kh√¥ng c√≥ h·∫≠u t·ªë, th√™m h·∫≠u t·ªë -beta cho version m·ªõi
        suffix="-beta"
        echo "üìå Kh√¥ng c√≥ h·∫≠u t·ªë, s·∫Ω th√™m h·∫≠u t·ªë $suffix" >&2
    fi

    local delimiter=.
    local array=($(echo "$base_version" | tr $delimiter ' '))

    # TƒÉng s·ªë th·ª© 3 (patch version)
    array[$((${#array[@]} - 1))]=$((${array[$((${#array[@]} - 1))]} + 1))

    # T·∫°o version m·ªõi
    local new_version=$(local IFS=$delimiter ; echo "${array[*]}$suffix")
    echo "üî∫ Version m·ªõi sau khi tƒÉng: $new_version" >&2

    # Tr·∫£ v·ªÅ version m·ªõi v·ªõi h·∫≠u t·ªë (n·∫øu c√≥)
    echo "$new_version"
}

# H√†m ƒë·ªÉ l·∫•y version hi·ªán t·∫°i t·ª´ Docker Hub
get_latest_version() {
    # Ki·ªÉm tra xem c√≥ file .last_version kh√¥ng
    if [ -f ".last_version" ]; then
        local file_version=$(cat .last_version)
        echo "üìÑ ƒê·ªçc phi√™n b·∫£n t·ª´ file .last_version: $file_version" >&2
    fi

    # Th·ª≠ l·∫•y tags t·ª´ Docker Hub
    echo "üîç ƒêang l·∫•y danh s√°ch tags t·ª´ Docker Hub..." >&2
    local tags_json=$(curl -s "https://hub.docker.com/v2/repositories/$USERNAME/$APP_NAME/tags/?page_size=100")
    local tags=$(echo "$tags_json" | grep -o '"name":"[^"]*' | grep -v latest | sed 's/"name":"//g')

    if [ -z "$tags" ]; then
        echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y tags tr√™n Docker Hub" >&2
        # N·∫øu c√≥ file .last_version, s·ª≠ d·ª•ng gi√° tr·ªã t·ª´ file
        if [ -f ".last_version" ]; then
            echo "$(cat .last_version)"
        else
            echo "1.0.1-beta"  # Version m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t√¨m th·∫•y tags v√† kh√¥ng c√≥ file .last_version
        fi
        return
    fi

    # Hi·ªÉn th·ªã t·∫•t c·∫£ c√°c tags ƒë·ªÉ debug
    echo "üìã T·∫•t c·∫£ c√°c tags t√¨m th·∫•y:" >&2
    echo "$tags" >&2

    # L·ªçc c√°c tags l√† version (bao g·ªìm c·∫£ c√°c version c√≥ h·∫≠u t·ªë nh∆∞ -beta)
    local version_tags=$(echo "$tags" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(\-[a-zA-Z0-9]+)?$')

    if [ -z "$version_tags" ]; then
        echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y version tags h·ª£p l·ªá" >&2
        # N·∫øu c√≥ file .last_version, s·ª≠ d·ª•ng gi√° tr·ªã t·ª´ file
        if [ -f ".last_version" ]; then
            echo "$(cat .last_version)"
        else
            echo "1.0.1-beta"  # Version m·∫∑c ƒë·ªãnh
        fi
        return
    fi

    # Hi·ªÉn th·ªã c√°c version tags ƒë·ªÉ debug
    echo "üìã C√°c version tags t√¨m th·∫•y:" >&2
    echo "$version_tags" >&2

    # T√°ch ri√™ng c√°c version c√≥ h·∫≠u t·ªë beta
    local beta_versions=$(echo "$version_tags" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+\-beta$')
    # C√°c version kh√¥ng c√≥ h·∫≠u t·ªë
    local standard_versions=$(echo "$version_tags" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$')

    # ∆Øu ti√™n s·ª≠ d·ª•ng version beta n·∫øu c√≥
    if [ -n "$beta_versions" ]; then
        # S·∫Øp x·∫øp c√°c version beta v√† l·∫•y version cao nh·∫•t
        local latest_beta=$(echo "$beta_versions" | sort -t. -k1,1n -k2,2n -k3,3n | tail -n1)
        echo "üîñ Phi√™n b·∫£n beta m·ªõi nh·∫•t: $latest_beta" >&2
        echo "$latest_beta"
    elif [ -n "$standard_versions" ]; then
        # S·∫Øp x·∫øp c√°c version chu·∫©n v√† l·∫•y version cao nh·∫•t
        local latest_standard=$(echo "$standard_versions" | sort -t. -k1,1n -k2,2n -k3,3n | tail -n1)
        echo "üîñ Phi√™n b·∫£n chu·∫©n m·ªõi nh·∫•t: $latest_standard" >&2
        echo "$latest_standard"
    else
        # N·∫øu kh√¥ng t√¨m th·∫•y version ph√π h·ª£p, s·ª≠ d·ª•ng file .last_version ho·∫∑c gi√° tr·ªã m·∫∑c ƒë·ªãnh
        if [ -f ".last_version" ]; then
            echo "$(cat .last_version)"
        else
            echo "1.0.1-beta"  # Version m·∫∑c ƒë·ªãnh
        fi
    fi
}

# X√°c ƒë·ªãnh version m·ªõi
if [ -z "$1" ]; then
    # N·∫øu kh√¥ng cung c·∫•p version m·ªõi, t·ª± ƒë·ªông tƒÉng version
    CURRENT_VERSION=$(get_latest_version)
    NEW_VERSION=$(increment_version "$CURRENT_VERSION")
    echo "üîÑ T·ª± ƒë·ªông tƒÉng version t·ª´ $CURRENT_VERSION l√™n $NEW_VERSION"
else
    NEW_VERSION=$1
    echo "üìù S·ª≠ d·ª•ng version ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh: $NEW_VERSION"
fi

# L∆∞u version c≈© ƒë·ªÉ s·ª≠ d·ª•ng l√†m cache
OLD_VERSION=$(get_latest_version)
IMAGE_NAME="$USERNAME/$APP_NAME"

# Ki·ªÉm tra xem c√≥ file .last_version kh√¥ng v√† c·∫≠p nh·∫≠t n·∫øu c·∫ßn
if [ -f ".last_version" ]; then
    LAST_VERSION=$(cat .last_version)
    echo "üìÑ Version ƒë√£ l∆∞u trong file .last_version: $LAST_VERSION"

    # So s√°nh v·ªõi OLD_VERSION ƒë·ªÉ x√°c ƒë·ªãnh version n√†o m·ªõi h∆°n
    if [ "$LAST_VERSION" != "$OLD_VERSION" ]; then
        echo "üîÑ C√≥ s·ª± kh√°c bi·ªát gi·ªØa version ƒë√£ l∆∞u ($LAST_VERSION) v√† version tr√™n Docker Hub ($OLD_VERSION)"

        # So s√°nh version ƒë·ªÉ x√°c ƒë·ªãnh c√°i n√†o m·ªõi h∆°n
        LAST_BASE=${LAST_VERSION%%-*}
        OLD_BASE=${OLD_VERSION%%-*}

        # So s√°nh ph·∫ßn version c∆° b·∫£n (kh√¥ng c√≥ h·∫≠u t·ªë)
        if [ "$(echo "$LAST_BASE" | sed 's/\./\n/g' | wc -l)" -eq "$(echo "$OLD_BASE" | sed 's/\./\n/g' | wc -l)" ]; then
            # N·∫øu c√πng s·ªë ph·∫ßn, so s√°nh tr·ª±c ti·∫øp
            if [ "$(echo -e "$LAST_BASE\n$OLD_BASE" | sort -t. -k1,1n -k2,2n -k3,3n | tail -n1)" = "$LAST_BASE" ]; then
                echo "üî∫ Version trong file .last_version ($LAST_VERSION) m·ªõi h∆°n version tr√™n Docker Hub ($OLD_VERSION)"
                OLD_VERSION=$LAST_VERSION
            else
                echo "üî∫ Version tr√™n Docker Hub ($OLD_VERSION) m·ªõi h∆°n version trong file .last_version ($LAST_VERSION)"
                # C·∫≠p nh·∫≠t file .last_version
                echo "$OLD_VERSION" > .last_version
                echo "üíæ ƒê√£ c·∫≠p nh·∫≠t file .last_version v·ªõi version m·ªõi: $OLD_VERSION"
            fi
        fi
    fi
fi

echo "üöÄ B·∫Øt ƒë·∫ßu build v√† push Docker image..."
echo "Username: $USERNAME"
echo "App: $APP_NAME"
echo "New Version: $NEW_VERSION"
echo "Old Version: ${OLD_VERSION:-None}"

# K√≠ch ho·∫°t BuildKit ƒë·ªÉ tƒÉng t·ªëc qu√° tr√¨nh build
export DOCKER_BUILDKIT=1

# Th√™m c√°c tham s·ªë build ƒë·ªÉ t·ªëi ∆∞u hi·ªáu nƒÉng
BUILD_ARGS="--build-arg BUILDKIT_INLINE_CACHE=1"

# Ki·ªÉm tra xem image latest c√≥ t·ªìn t·∫°i trong m√°y kh√¥ng
echo "üîç Ki·ªÉm tra image latest trong m√°y..."
if docker image inspect "$IMAGE_NAME:latest" &> /dev/null; then
    echo "‚úÖ ƒê√£ t√¨m th·∫•y image latest trong m√°y"
    LATEST_EXISTS=true
else
    echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y image latest trong m√°y"
    LATEST_EXISTS=false

    # Pull image latest t·ª´ Docker Hub
    echo "üì• ƒêang pull image latest t·ª´ Docker Hub..."
    if docker pull "$IMAGE_NAME:latest"; then
        echo "‚úÖ ƒê√£ pull th√†nh c√¥ng image latest t·ª´ Docker Hub"
        LATEST_EXISTS=true
    else
        echo "‚ö†Ô∏è Kh√¥ng th·ªÉ pull image latest t·ª´ Docker Hub, s·∫Ω build m·ªõi ho√†n to√†n"
    fi
fi

# Build image v·ªõi version c·ª• th·ªÉ
echo "üì¶ Building image version $NEW_VERSION..."

# X√¢y d·ª±ng danh s√°ch c√°c image cache
CACHE_FROM_ARGS=""

# N·∫øu c√≥ image latest, s·ª≠ d·ª•ng n√≥ l√†m cache
if [ "$LATEST_EXISTS" = true ]; then
    CACHE_FROM_ARGS="$CACHE_FROM_ARGS --cache-from $IMAGE_NAME:latest"
    echo "üîÑ S·ª≠ d·ª•ng cache t·ª´ image latest..."
fi

# N·∫øu c√≥ OLD_VERSION, th·ª≠ pull v√† s·ª≠ d·ª•ng n√≥ l√†m cache
if [ -n "$OLD_VERSION" ]; then
    echo "üîç Ki·ªÉm tra image version $OLD_VERSION..."

    # Ki·ªÉm tra xem image OLD_VERSION c√≥ t·ªìn t·∫°i trong m√°y kh√¥ng
    if ! docker image inspect "$IMAGE_NAME:$OLD_VERSION" &> /dev/null; then
        echo "üì• ƒêang pull image version $OLD_VERSION t·ª´ Docker Hub..."
        docker pull "$IMAGE_NAME:$OLD_VERSION" || echo "‚ö†Ô∏è Kh√¥ng th·ªÉ pull image version $OLD_VERSION"
    else
        echo "‚úÖ ƒê√£ t√¨m th·∫•y image version $OLD_VERSION trong m√°y"
    fi

    # Th√™m v√†o danh s√°ch cache
    if docker image inspect "$IMAGE_NAME:$OLD_VERSION" &> /dev/null; then
        CACHE_FROM_ARGS="$CACHE_FROM_ARGS --cache-from $IMAGE_NAME:$OLD_VERSION"
        echo "üîÑ S·ª≠ d·ª•ng cache t·ª´ image version $OLD_VERSION..."
    fi
fi

# Build image v·ªõi cache v√† c√°c tham s·ªë t·ªëi ∆∞u
echo "üì¶ Th·ª±c hi·ªán build v·ªõi c√°c tham s·ªë: $BUILD_ARGS $CACHE_FROM_ARGS"
docker build $BUILD_ARGS $CACHE_FROM_ARGS -t "$IMAGE_NAME:$NEW_VERSION" -f docker/Dockerfile.optimized .
if [ $? -ne 0 ]; then
    echo "‚ùå L·ªói: Kh√¥ng th·ªÉ build image"
    exit 1
fi

# Tag image version th√†nh latest
echo "üè∑Ô∏è Tagging image as latest..."
docker tag "$IMAGE_NAME:$NEW_VERSION" "$IMAGE_NAME:latest"
if [ $? -ne 0 ]; then
    echo "‚ùå L·ªói: Kh√¥ng th·ªÉ tag image th√†nh latest"
    exit 1
fi

# Push c·∫£ 2 version
echo "‚¨ÜÔ∏è Pushing image version $NEW_VERSION..."
docker push "$IMAGE_NAME:$NEW_VERSION"
if [ $? -ne 0 ]; then
    echo "‚ùå L·ªói: Kh√¥ng th·ªÉ push image version $NEW_VERSION"
    exit 1
fi

echo "‚¨ÜÔ∏è Pushing image latest..."
docker push "$IMAGE_NAME:latest"
if [ $? -ne 0 ]; then
    echo "‚ùå L·ªói: Kh√¥ng th·ªÉ push image latest"
    exit 1
fi

echo "‚úÖ Ho√†n th√†nh! Images ƒë√£ ƒë∆∞·ª£c push l√™n Docker Hub:"
echo "- $IMAGE_NAME:$NEW_VERSION"
echo "- $IMAGE_NAME:latest"

echo "üìä Th·ªùi gian build: $(date)"

# L∆∞u version m·ªõi v√†o file ƒë·ªÉ s·ª≠ d·ª•ng cho l·∫ßn sau
echo "$NEW_VERSION" > .last_version
echo "üíæ ƒê√£ l∆∞u version $NEW_VERSION v√†o file .last_version"

# Hi·ªÉn th·ªã th√¥ng tin so s√°nh version
echo "
üìà Th√¥ng tin version:"
echo "- Version c≈© (t·ª´ Docker Hub): $OLD_VERSION"
echo "- Version m·ªõi ƒë√£ build: $NEW_VERSION"
echo "- Version ƒë√£ l∆∞u v√†o .last_version: $(cat .last_version)"

echo "
üìù H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:"
echo "- ƒê·ªÉ build v·ªõi version t·ª± ƒë·ªông tƒÉng: ./build-and-check-optimized.sh"
echo "- ƒê·ªÉ build v·ªõi version c·ª• th·ªÉ: ./build-and-check-optimized.sh <version>"
echo "  V√≠ d·ª•: ./build-and-check-optimized.sh 2.0.5-beta"
