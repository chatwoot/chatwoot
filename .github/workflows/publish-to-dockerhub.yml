# Nome do workflow que aparecerá na aba "Actions"
name: Build and Push to Docker Hub

# Gatilho: Este workflow será acionado sempre que uma tag no formato v*.*.* for criada
on:
  push:
    tags:
      - 'v*.*.*' # Ex: v1.0.0, v1.2.3

jobs:
  build-and-push:
    # O tipo de máquina virtual que o job vai rodar
    runs-on: ubuntu-latest

    steps:
      # 1. Baixa o código do seu repositório para a máquina do workflow
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configura o Docker Buildx, uma ferramenta avançada para builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Faz login no Docker Hub usando os segredos que vamos configurar
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 4. Extrai metadados da tag para nomear a imagem Docker
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          # IMPORTANTE: Troque 'seu-usuario-dockerhub' pelo seu usuário real
          # e 'chatwoot-custom' pelo nome que você quer dar à imagem.
          images: smarthubtech/chatwoot-gemini

      # 5. Constrói a imagem usando nosso Dockerfile e a envia para o Docker Hub
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
