#!/bin/bash
# GP Bikes AI Assistant - Secret Generator
# Generates cryptographically secure secrets for .env.development
#
# Usage:
#   ./bin/generate-secrets
#
# This script will:
#   1. Generate a SECRET_KEY_BASE using openssl
#   2. Generate a POSTGRES_PASSWORD
#   3. Generate a WHATSAPP_WEBHOOK_VERIFY_TOKEN
#   4. Update .env.development with these values
#
# Last Updated: 2025-09-30

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# File paths
ENV_EXAMPLE=".env.development.example"
ENV_FILE=".env.development"

echo -e "${BLUE}=== GP Bikes Secret Generator ===${NC}\n"

# Check if .env.development exists
if [ ! -f "$ENV_FILE" ]; then
    echo -e "${YELLOW}File $ENV_FILE not found.${NC}"
    echo -e "${BLUE}Creating from $ENV_EXAMPLE...${NC}\n"

    if [ ! -f "$ENV_EXAMPLE" ]; then
        echo -e "${RED}Error: $ENV_EXAMPLE not found!${NC}"
        echo "Please run this script from the project root directory."
        exit 1
    fi

    cp "$ENV_EXAMPLE" "$ENV_FILE"
    echo -e "${GREEN}Created $ENV_FILE${NC}\n"
else
    echo -e "${GREEN}Found existing $ENV_FILE${NC}"
    echo -e "${YELLOW}This script will update secrets in place.${NC}"
    echo -n "Continue? (y/N): "
    read -r response
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
        echo "Aborted."
        exit 0
    fi
    echo ""
fi

# Function to generate random string
generate_random() {
    local length=${1:-64}
    openssl rand -base64 "$length" | tr -d "=+/" | cut -c1-"$length"
}

# Function to generate hex string
generate_hex() {
    local length=${1:-32}
    openssl rand -hex "$length"
}

# Generate secrets
echo -e "${BLUE}Generating secrets...${NC}\n"

SECRET_KEY_BASE=$(generate_hex 64)
POSTGRES_PASSWORD=$(generate_random 32)
WHATSAPP_VERIFY_TOKEN=$(generate_random 32)

echo -e "${GREEN}Generated:${NC}"
echo "  - SECRET_KEY_BASE (128 characters)"
echo "  - POSTGRES_PASSWORD (32 characters)"
echo "  - WHATSAPP_WEBHOOK_VERIFY_TOKEN (32 characters)"
echo ""

# Update .env.development file
echo -e "${BLUE}Updating $ENV_FILE...${NC}\n"

# Use sed to replace placeholder values
if [[ "$OSTYPE" == "darwin"* ]]; then
    # macOS
    sed -i '' "s|SECRET_KEY_BASE=.*|SECRET_KEY_BASE=$SECRET_KEY_BASE|g" "$ENV_FILE"
    sed -i '' "s|POSTGRES_PASSWORD=.*|POSTGRES_PASSWORD=$POSTGRES_PASSWORD|g" "$ENV_FILE"
    sed -i '' "s|WHATSAPP_WEBHOOK_VERIFY_TOKEN=.*|WHATSAPP_WEBHOOK_VERIFY_TOKEN=$WHATSAPP_VERIFY_TOKEN|g" "$ENV_FILE"
else
    # Linux
    sed -i "s|SECRET_KEY_BASE=.*|SECRET_KEY_BASE=$SECRET_KEY_BASE|g" "$ENV_FILE"
    sed -i "s|POSTGRES_PASSWORD=.*|POSTGRES_PASSWORD=$POSTGRES_PASSWORD|g" "$ENV_FILE"
    sed -i "s|WHATSAPP_WEBHOOK_VERIFY_TOKEN=.*|WHATSAPP_WEBHOOK_VERIFY_TOKEN=$WHATSAPP_VERIFY_TOKEN|g" "$ENV_FILE"
fi

# Also update DATABASE_URL with new password
if [[ "$OSTYPE" == "darwin"* ]]; then
    sed -i '' "s|DATABASE_URL=postgresql://postgres:[^@]*@|DATABASE_URL=postgresql://postgres:$POSTGRES_PASSWORD@|g" "$ENV_FILE"
else
    sed -i "s|DATABASE_URL=postgresql://postgres:[^@]*@|DATABASE_URL=postgresql://postgres:$POSTGRES_PASSWORD@|g" "$ENV_FILE"
fi

echo -e "${GREEN}✓ Updated SECRET_KEY_BASE${NC}"
echo -e "${GREEN}✓ Updated POSTGRES_PASSWORD${NC}"
echo -e "${GREEN}✓ Updated DATABASE_URL${NC}"
echo -e "${GREEN}✓ Updated WHATSAPP_WEBHOOK_VERIFY_TOKEN${NC}"
echo ""

# Display summary
echo -e "${BLUE}=== Summary ===${NC}\n"
echo -e "${GREEN}Your $ENV_FILE has been configured with secure secrets.${NC}"
echo ""
echo -e "${YELLOW}Still needed (add manually):${NC}"
echo "  - OPENAI_API_KEY (Week 2 - get from https://platform.openai.com/api-keys)"
echo "  - OPENAI_ORG_ID (Week 2 - optional)"
echo "  - WHATSAPP_PHONE_NUMBER_ID (Sprint 2)"
echo "  - WHATSAPP_ACCESS_TOKEN (Sprint 2)"
echo "  - SMTP credentials (optional for email)"
echo ""
echo -e "${YELLOW}Next steps:${NC}"
echo "  1. Edit $ENV_FILE and add your API keys"
echo "  2. Run: docker-compose up -d"
echo "  3. Run: docker-compose exec app rails db:setup"
echo "  4. Visit: http://localhost:3000"
echo ""
echo -e "${RED}IMPORTANT: Never commit $ENV_FILE to Git!${NC}"
echo "  (It's already in .gitignore)"
echo ""
echo -e "${GREEN}Done!${NC}"
