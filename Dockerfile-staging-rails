# Build from main Dockerfile to include current codebase
FROM node:23-alpine AS node
FROM ruby:3.3.3-alpine3.19 AS pre-builder

ARG NODE_VERSION="23.7.0"
ARG PNPM_VERSION="10.2.0"
ARG BUNDLE_WITHOUT="development:test"
ARG RAILS_SERVE_STATIC_FILES=true
ARG RAILS_ENV=production
ARG NODE_OPTIONS="--max-old-space-size=4096 --openssl-legacy-provider"

ENV NODE_VERSION=${NODE_VERSION}
ENV PNPM_VERSION=${PNPM_VERSION}
ENV BUNDLE_WITHOUT=${BUNDLE_WITHOUT}
ENV BUNDLER_VERSION=2.5.11
ENV RAILS_SERVE_STATIC_FILES=${RAILS_SERVE_STATIC_FILES}
ENV RAILS_ENV=${RAILS_ENV}
ENV NODE_OPTIONS=${NODE_OPTIONS}
ENV BUNDLE_PATH="/gems"
ENV PNPM_HOME="/root/.local/share/pnpm"
ENV PATH="$PNPM_HOME:$PATH"

# Install all system dependencies in one layer
RUN apk update && apk add --no-cache \
  build-base \
  gcc \
  g++ \
  make \
  musl \
  musl-dev \
  ruby-dev \
  ruby-full \
  openssl \
  openssl-dev \
  postgresql-dev \
  postgresql-client \
  git \
  curl \
  xz \
  vips \
  tzdata \
  linux-headers \
  tar \
  && mkdir -p /var/app \
  && gem install bundler

# Setup Node.js and pnpm in single layer
COPY --from=node /usr/local/bin/node /usr/local/bin/
COPY --from=node /usr/local/lib/node_modules /usr/local/lib/node_modules
RUN ln -s /usr/local/lib/node_modules/npm/bin/npm-cli.js /usr/local/bin/npm \
  && ln -s /usr/local/lib/node_modules/npm/bin/npx-cli.js /usr/local/bin/npx \
  && npm install -g pnpm@${PNPM_VERSION} \
  && echo 'export PNPM_HOME="/root/.local/share/pnpm"' >> /root/.shrc \
  && echo 'export PATH="$PNPM_HOME:$PATH"' >> /root/.shrc \
  && pnpm --version

WORKDIR /app

# Copy dependency files and install dependencies in optimal order
COPY Gemfile Gemfile.lock package.json pnpm-lock.yaml ./
RUN bundle config set --local force_ruby_platform true \
  && if [ "$RAILS_ENV" = "production" ]; then \
    bundle config set without 'development test'; \
  fi \
  && bundle install \
  && pnpm install

# Copy source code (this layer changes most frequently)
COPY . /app

# Build assets and cleanup in single layer
RUN mkdir -p /app/log \
  && if [ "$RAILS_ENV" = "production" ]; then \
    SECRET_KEY_BASE=precompile_placeholder RAILS_LOG_TO_STDOUT=enabled bundle exec rake assets:precompile \
    && rm -rf spec node_modules tmp/cache; \
  fi \
  && git rev-parse HEAD > /app/.git_sha \
  && rm -rf /gems/ruby/3.3.0/cache/*.gem \
  && find /gems/ruby/3.3.0/gems/ \( -name "*.c" -o -name "*.o" \) -delete \
  && rm -rf .git \
  && rm .gitignore

# Final staging-specific layer
FROM ruby:3.3.3-alpine3.19

ARG NODE_VERSION="23.7.0"
ARG PNPM_VERSION="10.2.0"
ARG BUNDLE_WITHOUT="development:test"
ARG EXECJS_RUNTIME="Disabled"
ARG RAILS_SERVE_STATIC_FILES=true
ARG BUNDLE_FORCE_RUBY_PLATFORM=1
ARG RAILS_ENV=production

ENV NODE_VERSION=${NODE_VERSION}
ENV PNPM_VERSION=${PNPM_VERSION}
ENV BUNDLE_WITHOUT=${BUNDLE_WITHOUT}
ENV BUNDLER_VERSION=2.5.11
ENV EXECJS_RUNTIME=${EXECJS_RUNTIME}
ENV RAILS_SERVE_STATIC_FILES=${RAILS_SERVE_STATIC_FILES}
ENV BUNDLE_FORCE_RUBY_PLATFORM=${BUNDLE_FORCE_RUBY_PLATFORM}
ENV RAILS_ENV=${RAILS_ENV}
ENV BUNDLE_PATH="/gems"

# Install only runtime dependencies
RUN apk update && apk add --no-cache \
  openssl \
  tzdata \
  postgresql-client \
  imagemagick \
  git \
  vips \
  && gem install bundler

COPY --from=node /usr/local/bin/node /usr/local/bin/
COPY --from=node /usr/local/lib/node_modules /usr/local/lib/node_modules

COPY --from=pre-builder /gems/ /gems/
COPY --from=pre-builder /app /app
COPY --from=pre-builder /app/.git_sha /app/.git_sha

WORKDIR /app

# Add staging-specific initialization
COPY container_init.sh /app/container_init.sh
RUN chmod +x /app/container_init.sh

EXPOSE 3001
CMD ["/app/container_init.sh"]