# Optimized Production Sidekiq Dockerfile
FROM node:23-alpine AS node
FROM ruby:3.3.3-alpine3.19 AS base

ARG NODE_VERSION="23.7.0"
ARG BUNDLE_WITHOUT="development:test"
ENV NODE_VERSION=${NODE_VERSION}
ENV BUNDLE_WITHOUT=${BUNDLE_WITHOUT}
ENV BUNDLER_VERSION=2.5.11
ENV BUNDLE_PATH="/gems"
ENV BUNDLE_JOBS="2"
ENV MAKE="make -j2"
ENV RAILS_ENV=production

# Install all system dependencies in single layer
RUN apk update && apk add --no-cache \
  build-base \
  gcc \
  g++ \
  make \
  musl \
  musl-dev \
  ruby-dev \
  ruby-full \
  openssl \
  openssl-dev \
  postgresql-dev \
  postgresql-client \
  git \
  vips \
  tzdata \
  linux-headers \
  xz \
  && gem install bundler

# Setup Node.js from node stage
COPY --from=node /usr/local/bin/node /usr/local/bin/
COPY --from=node /usr/local/lib/node_modules /usr/local/lib/node_modules
RUN ln -s /usr/local/lib/node_modules/npm/bin/npm-cli.js /usr/local/bin/npm \
  && ln -s /usr/local/lib/node_modules/npm/bin/npx-cli.js /usr/local/bin/npx

WORKDIR /app

# Copy dependency files and install gems with BuildKit cache mounts
COPY Gemfile Gemfile.lock ./
RUN --mount=type=cache,target=/gems/cache \
    --mount=type=cache,target=/tmp/bundle-cache \
    bundle config set --local force_ruby_platform true \
  && bundle config set --local cache_path /tmp/bundle-cache \
  && bundle config set without 'development test' \
  && bundle install -j${BUNDLE_JOBS}

# Copy source code (changes most frequently)
COPY . /app

# Build and cleanup in single layer
RUN mkdir -p /app/log \
  && git rev-parse HEAD > /app/.git_sha 2>/dev/null || echo "unknown" > /app/.git_sha \
  && rm -rf /gems/ruby/3.3.0/cache/*.gem \
  && find /gems/ruby/3.3.0/gems/ \( -name "*.c" -o -name "*.o" \) -delete \
  && rm -rf .git

EXPOSE 5151
CMD ["bundle", "exec", "sidekiq", "-C", "config/sidekiq.yml"]