# Chatwoot Production India Rails Image
# Uses base image with all dependencies pre-installed
# Build time: ~1-2 minutes (only code + asset compilation)

ARG BASE_IMAGE_TAG=v4.0.4-base1-deps
ARG ECR_URL

# Builder stage: Compile assets with full build tools
FROM ${ECR_URL}/chatwoot-base:${BASE_IMAGE_TAG} AS builder

ARG RAILS_ENV=production
ARG CIRCLE_SHA1="unknown"
ARG NODE_OPTIONS="--max-old-space-size=4096 --openssl-legacy-provider"

ENV RAILS_ENV=${RAILS_ENV}
ENV NODE_OPTIONS=${NODE_OPTIONS}
ENV RAILS_SERVE_STATIC_FILES=true

WORKDIR /app

# Copy application code (dependencies already installed in base image)
COPY . /app

# Compile assets and create version file
RUN mkdir -p /app/log /app/tmp \
  && SECRET_KEY_BASE=precompile_placeholder RAILS_LOG_TO_STDOUT=enabled bundle exec rake assets:precompile \
  && echo "${CIRCLE_SHA1:-unknown}" > /app/.git_sha \
  && rm -rf node_modules tmp/cache

# Runtime stage: Minimal image for production
FROM ruby:3.3.3-alpine3.19

ARG NODE_VERSION="23.7.0"
ARG BUNDLER_VERSION=2.5.11

LABEL maintainer="Delta Exchange <dev@delta.exchange>"
LABEL description="Chatwoot v4.0.4 Production India Rails Server"
LABEL environment="production"
LABEL region="india"

ENV RAILS_ENV=production \
    BUNDLE_PATH="/gems" \
    BUNDLE_FORCE_RUBY_PLATFORM=1 \
    RAILS_SERVE_STATIC_FILES=true \
    EXECJS_RUNTIME="Disabled" \
    BUNDLER_VERSION=${BUNDLER_VERSION}

# Install only runtime dependencies (no build tools)
RUN apk update && apk add --no-cache \
  openssl \
  tzdata \
  postgresql-client \
  imagemagick \
  git \
  vips \
  && gem install bundler -v ${BUNDLER_VERSION} --no-document \
  && rm -rf /var/cache/apk/*

# Copy Node.js from node image (needed for runtime JS execution)
COPY --from=node:23-alpine /usr/local/bin/node /usr/local/bin/
COPY --from=node:23-alpine /usr/local/lib/node_modules /usr/local/lib/node_modules

# Copy only gems from builder (not entire /gems with cache)
COPY --from=builder /gems/ruby /gems/ruby

WORKDIR /app

# Create necessary runtime directories
RUN mkdir -p log tmp storage

# Copy Gemfile first for bundle config
COPY --from=builder /app/Gemfile /app/Gemfile.lock ./

# Configure bundler to use the correct gem path and exclude dev/test gems
RUN bundle config set --local path "/gems" && \
    bundle config set --local without "development:test"

# Copy only necessary application files (not node_modules, tmp, cache, etc.)
COPY --from=builder /app/app ./app
COPY --from=builder /app/bin ./bin
COPY --from=builder /app/config ./config
COPY --from=builder /app/db ./db
COPY --from=builder /app/docker ./docker
COPY --from=builder /app/lib ./lib
COPY --from=builder /app/public ./public
COPY --from=builder /app/vendor ./vendor
COPY --from=builder /app/Rakefile /app/config.ru ./
COPY --from=builder /app/.git_sha ./
COPY --from=builder /app/container_init.sh ./

# Ensure initialization script is executable
RUN chmod +x container_init.sh

EXPOSE 3000

CMD ["./container_init.sh"]
