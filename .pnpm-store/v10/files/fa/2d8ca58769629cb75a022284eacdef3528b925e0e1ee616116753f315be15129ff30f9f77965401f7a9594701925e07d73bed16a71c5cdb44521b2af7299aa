{"version":3,"file":"PhoneNumber.test.js","names":["metadata","type","PhoneNumber","describe","it","expect","to","phoneNumber","countryCallingCode","should","equal","country","number","ext","format","formatExtension","extension","isEqual","isNonGeographic","setExt","formatNational","be","undefined","getPossibleCountries","deep","indexOf","length"],"sources":["../source/PhoneNumber.test.js"],"sourcesContent":["import metadata from '../metadata.min.json' assert { type: 'json' }\r\nimport PhoneNumber from './PhoneNumber.js'\r\n\r\ndescribe('PhoneNumber', () => {\r\n\tit('should validate constructor arguments', () => {\r\n\t\texpect(() => new PhoneNumber()).to.throw('`countryCallingCode` not passed')\r\n\t\texpect(() => new PhoneNumber('7')).to.throw('`nationalNumber` not passed')\r\n\t\texpect(() => new PhoneNumber('7', '8005553535')).to.throw('`metadata` not passed')\r\n\t})\r\n\r\n\tit('should accept country code argument', () => {\r\n\t\tconst phoneNumber = new PhoneNumber('RU', '8005553535', metadata)\r\n\t\tphoneNumber.countryCallingCode.should.equal('7')\r\n\t\tphoneNumber.country.should.equal('RU')\r\n\t\tphoneNumber.number.should.equal('+78005553535')\r\n\t})\r\n\r\n\tit('should format number with options', () => {\r\n\t\tconst phoneNumber = new PhoneNumber('7', '8005553535', metadata)\r\n\t\tphoneNumber.ext = '123'\r\n\t\tphoneNumber.format('NATIONAL', {\r\n\t\t\tformatExtension: (number, extension) => `${number} доб. ${extension}`\r\n\t\t})\r\n\t\t.should.equal('8 (800) 555-35-35 доб. 123')\r\n\t})\r\n\r\n\tit('should compare phone numbers', () => {\r\n\t\tnew PhoneNumber('RU', '8005553535', metadata).isEqual(new PhoneNumber('RU', '8005553535', metadata)).should.equal(true)\r\n\t\tnew PhoneNumber('RU', '8005553535', metadata).isEqual(new PhoneNumber('7', '8005553535', metadata)).should.equal(true)\r\n\t\tnew PhoneNumber('RU', '8005553535', metadata).isEqual(new PhoneNumber('RU', '8005553536', metadata)).should.equal(false)\r\n\t})\r\n\r\n\tit('should tell if a number is non-geographic', () => {\r\n\t\tnew PhoneNumber('7', '8005553535', metadata).isNonGeographic().should.equal(false)\r\n\t\tnew PhoneNumber('870', '773111632', metadata).isNonGeographic().should.equal(true)\r\n\t})\r\n\r\n\tit('should allow setting extension', () => {\r\n\t\tconst phoneNumber = new PhoneNumber('1', '2133734253', metadata)\r\n\t\tphoneNumber.setExt('1234')\r\n\t\tphoneNumber.ext.should.equal('1234')\r\n\t\tphoneNumber.formatNational().should.equal('(213) 373-4253 ext. 1234')\r\n\t})\r\n\r\n\tit('should return possible countries', () => {\r\n      // \"599\": [\r\n      //    \"CW\", //  \"possible_lengths\": [7, 8]\r\n      //    \"BQ\" //  \"possible_lengths\": [7]\r\n      // ]\r\n\r\n\t\tlet phoneNumber = new PhoneNumber('599', '123456', metadata)\r\n\t\texpect(phoneNumber.country).to.be.undefined\r\n\t\tphoneNumber.getPossibleCountries().should.deep.equal([])\r\n\r\n\t\tphoneNumber = new PhoneNumber('599', '1234567', metadata)\r\n\t\texpect(phoneNumber.country).to.be.undefined\r\n\t\tphoneNumber.getPossibleCountries().should.deep.equal(['CW', 'BQ'])\r\n\r\n\t\tphoneNumber = new PhoneNumber('599', '12345678', metadata)\r\n\t\texpect(phoneNumber.country).to.be.undefined\r\n\t\tphoneNumber.getPossibleCountries().should.deep.equal(['CW'])\r\n\r\n\t\tphoneNumber = new PhoneNumber('599', '123456789', metadata)\r\n\t\texpect(phoneNumber.country).to.be.undefined\r\n\t\tphoneNumber.getPossibleCountries().should.deep.equal([])\r\n\t})\r\n\r\n\tit('should return possible countries in case of ambiguity', () => {\r\n\t\tconst phoneNumber = new PhoneNumber('1', '2223334444', metadata)\r\n\t\texpect(phoneNumber.country).to.be.undefined\r\n\t\tphoneNumber.getPossibleCountries().indexOf('US').should.equal(0)\r\n\t\tphoneNumber.getPossibleCountries().length.should.equal(25)\r\n\t})\r\n\r\n\t// it('should return empty possible countries when no national number has been input', () => {\r\n\t// \tconst phoneNumber = new PhoneNumber('1', '', metadata)\r\n\t// \texpect(phoneNumber.country).to.be.undefined\r\n\t// \tphoneNumber.getPossibleCountries().should.deep.equal([])\r\n\t// })\r\n\r\n\tit('should return empty possible countries when not enough national number digits have been input', () => {\r\n\t\tconst phoneNumber = new PhoneNumber('1', '222', metadata)\r\n\t\texpect(phoneNumber.country).to.be.undefined\r\n\t\tphoneNumber.getPossibleCountries().should.deep.equal([])\r\n\t})\r\n\r\n\tit('should return possible countries in case of no ambiguity', () => {\r\n\t\tconst phoneNumber = new PhoneNumber('US', '2133734253', metadata)\r\n\t\tphoneNumber.country.should.equal('US')\r\n\t\tphoneNumber.getPossibleCountries().should.deep.equal(['US'])\r\n\t})\r\n\r\n\tit('should return empty possible countries in case of an unknown calling code', () => {\r\n\t\tconst phoneNumber = new PhoneNumber('777', '123', metadata)\r\n\t\texpect(phoneNumber.country).to.be.undefined\r\n\t\tphoneNumber.getPossibleCountries().should.deep.equal([])\r\n\t})\r\n\r\n\t// it('should validate phone number length', () => {\r\n\t// \tconst phoneNumber = new PhoneNumber('RU', '800', metadata)\r\n\t// \texpect(phoneNumber.validateLength()).to.equal('TOO_SHORT')\r\n\t//\r\n\t// \tconst phoneNumberValid = new PhoneNumber('RU', '8005553535', metadata)\r\n\t// \texpect(phoneNumberValid.validateLength()).to.be.undefined\r\n\t// })\r\n})"],"mappings":"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"}