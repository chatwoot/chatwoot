{"version":3,"file":"vue-virtual-scroller.min.js","sources":["../src/config.js","../../../node_modules/.pnpm/vue-resize@2.0.0-alpha.1_vue@3.2.41/node_modules/vue-resize/dist/vue-resize.esm.js","../../../node_modules/.pnpm/vue-observe-visibility@2.0.0-alpha.1_vue@3.2.41/node_modules/vue-observe-visibility/dist/vue-observe-visibility.esm.js","../src/scrollparent.js","../src/components/common.js","../src/utils.js","../src/components/RecycleScroller.vue","../src/components/RecycleScroller.vue?vue&type=template&id=093a936d&lang.js","../src/components/DynamicScroller.vue","../../../node_modules/.pnpm/mitt@2.1.0/node_modules/mitt/dist/mitt.es.js","../src/components/DynamicScroller.vue?vue&type=template&id=76e15f19&lang.js","../src/components/DynamicScrollerItem.vue","../src/index.js","../src/mixins/IdState.js"],"sourcesContent":["export default {\n  itemsLimit: 1000,\n}\n","import { nextTick, pushScopeId, popScopeId, openBlock, createBlock, withScopeId } from 'vue';\n\nfunction getInternetExplorerVersion() {\n  var ua = window.navigator.userAgent;\n  var msie = ua.indexOf('MSIE ');\n\n  if (msie > 0) {\n    // IE 10 or older => return version number\n    return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);\n  }\n\n  var trident = ua.indexOf('Trident/');\n\n  if (trident > 0) {\n    // IE 11 => return version number\n    var rv = ua.indexOf('rv:');\n    return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);\n  }\n\n  var edge = ua.indexOf('Edge/');\n\n  if (edge > 0) {\n    // Edge (IE 12+) => return version number\n    return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);\n  } // other browser\n\n\n  return -1;\n}\n\nlet isIE;\n\nfunction initCompat () {\n  if (!initCompat.init) {\n    initCompat.init = true;\n    isIE = getInternetExplorerVersion() !== -1;\n  }\n}\n\nvar script = {\n  name: 'ResizeObserver',\n\n  props: {\n    emitOnMount: {\n      type: Boolean,\n      default: false,\n    },\n\n    ignoreWidth: {\n      type: Boolean,\n      default: false,\n    },\n\n    ignoreHeight: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  emits: [\n    'notify',\n  ],\n\n  mounted () {\n    initCompat();\n    nextTick(() => {\n      this._w = this.$el.offsetWidth;\n      this._h = this.$el.offsetHeight;\n      if (this.emitOnMount) {\n        this.emitSize();\n      }\n    });\n    const object = document.createElement('object');\n    this._resizeObject = object;\n    object.setAttribute('aria-hidden', 'true');\n    object.setAttribute('tabindex', -1);\n    object.onload = this.addResizeHandlers;\n    object.type = 'text/html';\n    if (isIE) {\n      this.$el.appendChild(object);\n    }\n    object.data = 'about:blank';\n    if (!isIE) {\n      this.$el.appendChild(object);\n    }\n  },\n\n  beforeUnmount () {\n    this.removeResizeHandlers();\n  },\n\n  methods: {\n    compareAndNotify () {\n      if ((!this.ignoreWidth && this._w !== this.$el.offsetWidth) || (!this.ignoreHeight && this._h !== this.$el.offsetHeight)) {\n        this._w = this.$el.offsetWidth;\n        this._h = this.$el.offsetHeight;\n        this.emitSize();\n      }\n    },\n\n    emitSize () {\n      this.$emit('notify', {\n        width: this._w,\n        height: this._h,\n      });\n    },\n\n    addResizeHandlers () {\n      this._resizeObject.contentDocument.defaultView.addEventListener('resize', this.compareAndNotify);\n      this.compareAndNotify();\n    },\n\n    removeResizeHandlers () {\n      if (this._resizeObject && this._resizeObject.onload) {\n        if (!isIE && this._resizeObject.contentDocument) {\n          this._resizeObject.contentDocument.defaultView.removeEventListener('resize', this.compareAndNotify);\n        }\n        this.$el.removeChild(this._resizeObject);\n        this._resizeObject.onload = null;\n        this._resizeObject = null;\n      }\n    },\n  },\n};\n\nconst _withId = /*#__PURE__*/withScopeId(\"data-v-b329ee4c\");\n\npushScopeId(\"data-v-b329ee4c\");\nconst _hoisted_1 = {\n  class: \"resize-observer\",\n  tabindex: \"-1\"\n};\npopScopeId();\n\nconst render = /*#__PURE__*/_withId((_ctx, _cache, $props, $setup, $data, $options) => {\n  return (openBlock(), createBlock(\"div\", _hoisted_1))\n});\n\nscript.render = render;\nscript.__scopeId = \"data-v-b329ee4c\";\nscript.__file = \"src/components/ResizeObserver.vue\";\n\nfunction install(app) {\n  // eslint-disable-next-line vue/component-definition-name-casing\n  app.component('resize-observer', script);\n  app.component('ResizeObserver', script);\n}\n\nvar plugin = {\n  // eslint-disable-next-line no-undef\n  version: \"2.0.0-alpha.1\",\n  install: install\n};\n\nexport default plugin;\nexport { script as ResizeObserver, install };\n//# sourceMappingURL=vue-resize.esm.js.map\n","import { nextTick } from 'vue';\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction processOptions(value) {\n  var options;\n\n  if (typeof value === 'function') {\n    // Simple options (callback-only)\n    options = {\n      callback: value\n    };\n  } else {\n    // Options object\n    options = value;\n  }\n\n  return options;\n}\nfunction throttle(callback, delay) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var timeout;\n  var lastState;\n  var currentArgs;\n\n  var throttled = function throttled(state) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    currentArgs = args;\n    if (timeout && state === lastState) return;\n    var leading = options.leading;\n\n    if (typeof leading === 'function') {\n      leading = leading(state, lastState);\n    }\n\n    if ((!timeout || state !== lastState) && leading) {\n      callback.apply(void 0, [state].concat(_toConsumableArray(currentArgs)));\n    }\n\n    lastState = state;\n    clearTimeout(timeout);\n    timeout = setTimeout(function () {\n      callback.apply(void 0, [state].concat(_toConsumableArray(currentArgs)));\n      timeout = 0;\n    }, delay);\n  };\n\n  throttled._clear = function () {\n    clearTimeout(timeout);\n    timeout = null;\n  };\n\n  return throttled;\n}\nfunction deepEqual(val1, val2) {\n  if (val1 === val2) return true;\n\n  if (_typeof(val1) === 'object') {\n    for (var key in val1) {\n      if (!deepEqual(val1[key], val2[key])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nvar VisibilityState = /*#__PURE__*/function () {\n  function VisibilityState(el, options, vnode) {\n    _classCallCheck(this, VisibilityState);\n\n    this.el = el;\n    this.observer = null;\n    this.frozen = false;\n    this.createObserver(options, vnode);\n  }\n\n  _createClass(VisibilityState, [{\n    key: \"createObserver\",\n    value: function createObserver(options, vnode) {\n      var _this = this;\n\n      if (this.observer) {\n        this.destroyObserver();\n      }\n\n      if (this.frozen) return;\n      this.options = processOptions(options);\n\n      this.callback = function (result, entry) {\n        _this.options.callback(result, entry);\n\n        if (result && _this.options.once) {\n          _this.frozen = true;\n\n          _this.destroyObserver();\n        }\n      }; // Throttle\n\n\n      if (this.callback && this.options.throttle) {\n        var _ref = this.options.throttleOptions || {},\n            _leading = _ref.leading;\n\n        this.callback = throttle(this.callback, this.options.throttle, {\n          leading: function leading(state) {\n            return _leading === 'both' || _leading === 'visible' && state || _leading === 'hidden' && !state;\n          }\n        });\n      }\n\n      this.oldResult = undefined;\n      this.observer = new IntersectionObserver(function (entries) {\n        var entry = entries[0];\n\n        if (entries.length > 1) {\n          var intersectingEntry = entries.find(function (e) {\n            return e.isIntersecting;\n          });\n\n          if (intersectingEntry) {\n            entry = intersectingEntry;\n          }\n        }\n\n        if (_this.callback) {\n          // Use isIntersecting if possible because browsers can report isIntersecting as true, but intersectionRatio as 0, when something very slowly enters the viewport.\n          var result = entry.isIntersecting && entry.intersectionRatio >= _this.threshold;\n          if (result === _this.oldResult) return;\n          _this.oldResult = result;\n\n          _this.callback(result, entry);\n        }\n      }, this.options.intersection); // Wait for the element to be in document\n\n      nextTick(function () {\n        if (_this.observer) {\n          _this.observer.observe(_this.el);\n        }\n      });\n    }\n  }, {\n    key: \"destroyObserver\",\n    value: function destroyObserver() {\n      if (this.observer) {\n        this.observer.disconnect();\n        this.observer = null;\n      } // Cancel throttled call\n\n\n      if (this.callback && this.callback._clear) {\n        this.callback._clear();\n\n        this.callback = null;\n      }\n    }\n  }, {\n    key: \"threshold\",\n    get: function get() {\n      return this.options.intersection && typeof this.options.intersection.threshold === 'number' ? this.options.intersection.threshold : 0;\n    }\n  }]);\n\n  return VisibilityState;\n}();\n\nfunction beforeMount(el, _ref2, vnode) {\n  var value = _ref2.value;\n  if (!value) return;\n\n  if (typeof IntersectionObserver === 'undefined') {\n    console.warn('[vue-observe-visibility] IntersectionObserver API is not available in your browser. Please install this polyfill: https://github.com/w3c/IntersectionObserver/tree/master/polyfill');\n  } else {\n    var state = new VisibilityState(el, value, vnode);\n    el._vue_visibilityState = state;\n  }\n}\n\nfunction updated(el, _ref3, vnode) {\n  var value = _ref3.value,\n      oldValue = _ref3.oldValue;\n  if (deepEqual(value, oldValue)) return;\n  var state = el._vue_visibilityState;\n\n  if (!value) {\n    unmounted(el);\n    return;\n  }\n\n  if (state) {\n    state.createObserver(value, vnode);\n  } else {\n    beforeMount(el, {\n      value: value\n    }, vnode);\n  }\n}\n\nfunction unmounted(el) {\n  var state = el._vue_visibilityState;\n\n  if (state) {\n    state.destroyObserver();\n    delete el._vue_visibilityState;\n  }\n}\n\nvar ObserveVisibility = {\n  beforeMount: beforeMount,\n  updated: updated,\n  unmounted: unmounted\n};\n\nfunction install(app) {\n  app.directive('observe-visibility', ObserveVisibility);\n  /* -- Add more components here -- */\n}\n/* -- Plugin definition & Auto-install -- */\n\n/* You shouldn't have to modify the code below */\n// Plugin\n\nvar plugin = {\n  // eslint-disable-next-line no-undef\n  version: \"2.0.0-alpha.1\",\n  install: install\n};\n\nexport default plugin;\nexport { ObserveVisibility, install };\n","// Fork of https://github.com/olahol/scrollparent.js to be able to build with Rollup\n\nconst regex = /(auto|scroll)/\n\nfunction parents (node, ps) {\n  if (node.parentNode === null) { return ps }\n\n  return parents(node.parentNode, ps.concat([node]))\n}\n\nconst style = function (node, prop) {\n  return getComputedStyle(node, null).getPropertyValue(prop)\n}\n\nconst overflow = function (node) {\n  return style(node, 'overflow') + style(node, 'overflow-y') + style(node, 'overflow-x')\n}\n\nconst scroll = function (node) {\n  return regex.test(overflow(node))\n}\n\nexport function getScrollParent (node) {\n  if (!(node instanceof HTMLElement || node instanceof SVGElement)) {\n    return\n  }\n\n  const ps = parents(node.parentNode, [])\n\n  for (let i = 0; i < ps.length; i += 1) {\n    if (scroll(ps[i])) {\n      return ps[i]\n    }\n  }\n\n  return document.scrollingElement || document.documentElement\n}\n","export const props = {\n  items: {\n    type: Array,\n    required: true,\n  },\n\n  keyField: {\n    type: String,\n    default: 'id',\n  },\n\n  direction: {\n    type: String,\n    default: 'vertical',\n    validator: (value) => ['vertical', 'horizontal'].includes(value),\n  },\n\n  listTag: {\n    type: String,\n    default: 'div',\n  },\n\n  itemTag: {\n    type: String,\n    default: 'div',\n  },\n}\n\nexport function simpleArray () {\n  return this.items.length && typeof this.items[0] !== 'object'\n}\n","export let supportsPassive = false\n\nif (typeof window !== 'undefined') {\n  supportsPassive = false\n  try {\n    const opts = Object.defineProperty({}, 'passive', {\n      get () {\n        supportsPassive = true\n      },\n    })\n    window.addEventListener('test', null, opts)\n  } catch (e) {}\n}\n","<template>\n  <div\n    v-observe-visibility=\"handleVisibilityChange\"\n    class=\"vue-recycle-scroller\"\n    :class=\"{\n      ready,\n      'page-mode': pageMode,\n      [`direction-${direction}`]: true,\n    }\"\n    @scroll.passive=\"handleScroll\"\n  >\n    <div\n      v-if=\"$slots.before\"\n      ref=\"before\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"before\"\n      />\n    </div>\n\n    <component\n      :is=\"listTag\"\n      ref=\"wrapper\"\n      :style=\"{ [direction === 'vertical' ? 'minHeight' : 'minWidth']: totalSize + 'px' }\"\n      class=\"vue-recycle-scroller__item-wrapper\"\n      :class=\"listClass\"\n    >\n      <component\n        :is=\"itemTag\"\n        v-for=\"view of pool\"\n        :key=\"view.nr.id\"\n        :style=\"ready ? {\n          transform: `translate${direction === 'vertical' ? 'Y' : 'X'}(${view.position}px) translate${direction === 'vertical' ? 'X' : 'Y'}(${view.offset}px)`,\n          width: gridItems ? `${direction === 'vertical' ? itemSecondarySize || itemSize : itemSize}px` : undefined,\n          height: gridItems ? `${direction === 'horizontal' ? itemSecondarySize || itemSize : itemSize}px` : undefined,\n        } : null\"\n        class=\"vue-recycle-scroller__item-view\"\n        :class=\"[\n          itemClass,\n          {\n            hover: !skipHover && hoverKey === view.nr.key\n          },\n        ]\"\n        v-on=\"skipHover ? {} : {\n          mouseenter: () => { hoverKey = view.nr.key },\n          mouseleave: () => { hoverKey = null },\n        }\"\n      >\n        <slot\n          :item=\"view.item\"\n          :index=\"view.nr.index\"\n          :active=\"view.nr.used\"\n        />\n      </component>\n\n      <slot\n        name=\"empty\"\n      />\n    </component>\n\n    <div\n      v-if=\"$slots.after\"\n      ref=\"after\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"after\"\n      />\n    </div>\n\n    <ResizeObserver @notify=\"handleResize\" />\n  </div>\n</template>\n\n<script>\nimport { shallowReactive, markRaw } from 'vue'\nimport { ResizeObserver } from 'vue-resize'\nimport { ObserveVisibility } from 'vue-observe-visibility'\nimport { getScrollParent } from '../scrollparent'\nimport config from '../config'\nimport { props, simpleArray } from './common'\nimport { supportsPassive } from '../utils'\n\nlet uid = 0\n\nexport default {\n  name: 'RecycleScroller',\n\n  components: {\n    ResizeObserver,\n  },\n\n  directives: {\n    ObserveVisibility,\n  },\n\n  props: {\n    ...props,\n\n    itemSize: {\n      type: Number,\n      default: null,\n    },\n\n    gridItems: {\n      type: Number,\n      default: undefined,\n    },\n\n    itemSecondarySize: {\n      type: Number,\n      default: undefined,\n    },\n\n    minItemSize: {\n      type: [Number, String],\n      default: null,\n    },\n\n    sizeField: {\n      type: String,\n      default: 'size',\n    },\n\n    typeField: {\n      type: String,\n      default: 'type',\n    },\n\n    buffer: {\n      type: Number,\n      default: 200,\n    },\n\n    pageMode: {\n      type: Boolean,\n      default: false,\n    },\n\n    prerender: {\n      type: Number,\n      default: 0,\n    },\n\n    emitUpdate: {\n      type: Boolean,\n      default: false,\n    },\n\n    updateInterval: {\n      type: Number,\n      default: 0,\n    },\n\n    skipHover: {\n      type: Boolean,\n      default: false,\n    },\n\n    listTag: {\n      type: String,\n      default: 'div',\n    },\n\n    itemTag: {\n      type: String,\n      default: 'div',\n    },\n\n    listClass: {\n      type: [String, Object, Array],\n      default: '',\n    },\n\n    itemClass: {\n      type: [String, Object, Array],\n      default: '',\n    },\n  },\n\n  emits: [\n    'resize',\n    'visible',\n    'hidden',\n    'update',\n    'scroll-start',\n    'scroll-end',\n  ],\n\n  data () {\n    return {\n      pool: [],\n      totalSize: 0,\n      ready: false,\n      hoverKey: null,\n    }\n  },\n\n  computed: {\n    sizes () {\n      if (this.itemSize === null) {\n        const sizes = {\n          '-1': { accumulator: 0 },\n        }\n        const items = this.items\n        const field = this.sizeField\n        const minItemSize = this.minItemSize\n        let computedMinSize = 10000\n        let accumulator = 0\n        let current\n        for (let i = 0, l = items.length; i < l; i++) {\n          current = items[i][field] || minItemSize\n          if (current < computedMinSize) {\n            computedMinSize = current\n          }\n          accumulator += current\n          sizes[i] = { accumulator, size: current }\n        }\n        // eslint-disable-next-line\n        this.$_computedMinItemSize = computedMinSize\n        return sizes\n      }\n      return []\n    },\n\n    simpleArray,\n\n    itemIndexByKey () {\n      const { keyField, items } = this\n      const result = {}\n      for (let i = 0, l = items.length; i < l; i++) {\n        result[items[i][keyField]] = i\n      }\n      return result\n    },\n  },\n\n  watch: {\n    items () {\n      this.updateVisibleItems(true)\n    },\n\n    pageMode () {\n      this.applyPageMode()\n      this.updateVisibleItems(false)\n    },\n\n    sizes: {\n      handler () {\n        this.updateVisibleItems(false)\n      },\n      deep: true,\n    },\n\n    gridItems () {\n      this.updateVisibleItems(true)\n    },\n\n    itemSecondarySize () {\n      this.updateVisibleItems(true)\n    },\n  },\n\n  created () {\n    this.$_startIndex = 0\n    this.$_endIndex = 0\n    this.$_views = new Map()\n    this.$_unusedViews = new Map()\n    this.$_scrollDirty = false\n    this.$_lastUpdateScrollPosition = 0\n\n    // In SSR mode, we also prerender the same number of item for the first render\n    // to avoir mismatch between server and client templates\n    if (this.prerender) {\n      this.$_prerender = true\n      this.updateVisibleItems(false)\n    }\n\n    if (this.gridItems && !this.itemSize) {\n      console.error('[vue-recycle-scroller] You must provide an itemSize when using gridItems')\n    }\n  },\n\n  mounted () {\n    this.applyPageMode()\n    this.$nextTick(() => {\n      // In SSR mode, render the real number of visible items\n      this.$_prerender = false\n      this.updateVisibleItems(true)\n      this.ready = true\n    })\n  },\n\n  activated () {\n    const lastPosition = this.$_lastUpdateScrollPosition\n    if (typeof lastPosition === 'number') {\n      this.$nextTick(() => {\n        this.scrollToPosition(lastPosition)\n      })\n    }\n  },\n\n  beforeUnmount () {\n    this.removeListeners()\n  },\n\n  methods: {\n    addView (pool, index, item, key, type) {\n      const nr = markRaw({\n        id: uid++,\n        index,\n        used: true,\n        key,\n        type,\n      })\n      const view = shallowReactive({\n        item,\n        position: 0,\n        nr,\n      })\n      pool.push(view)\n      return view\n    },\n\n    unuseView (view, fake = false) {\n      const unusedViews = this.$_unusedViews\n      const type = view.nr.type\n      let unusedPool = unusedViews.get(type)\n      if (!unusedPool) {\n        unusedPool = []\n        unusedViews.set(type, unusedPool)\n      }\n      unusedPool.push(view)\n      if (!fake) {\n        view.nr.used = false\n        view.position = -9999\n      }\n    },\n\n    handleResize () {\n      this.$emit('resize')\n      if (this.ready) this.updateVisibleItems(false)\n    },\n\n    handleScroll (event) {\n      if (!this.$_scrollDirty) {\n        this.$_scrollDirty = true\n        if (this.$_updateTimeout) return\n\n        const requestUpdate = () => requestAnimationFrame(() => {\n          this.$_scrollDirty = false\n          const { continuous } = this.updateVisibleItems(false, true)\n\n          // It seems sometimes chrome doesn't fire scroll event :/\n          // When non continous scrolling is ending, we force a refresh\n          if (!continuous) {\n            clearTimeout(this.$_refreshTimout)\n            this.$_refreshTimout = setTimeout(this.handleScroll, this.updateInterval + 100)\n          }\n        })\n\n        requestUpdate()\n\n        // Schedule the next update with throttling\n        if (this.updateInterval) {\n          this.$_updateTimeout = setTimeout(() => {\n            this.$_updateTimeout = 0\n            if (this.$_scrollDirty) requestUpdate()\n          }, this.updateInterval)\n        }\n      }\n    },\n\n    handleVisibilityChange (isVisible, entry) {\n      if (this.ready) {\n        if (isVisible || entry.boundingClientRect.width !== 0 || entry.boundingClientRect.height !== 0) {\n          this.$emit('visible')\n          requestAnimationFrame(() => {\n            this.updateVisibleItems(false)\n          })\n        } else {\n          this.$emit('hidden')\n        }\n      }\n    },\n\n    updateVisibleItems (checkItem, checkPositionDiff = false) {\n      const itemSize = this.itemSize\n      const gridItems = this.gridItems || 1\n      const itemSecondarySize = this.itemSecondarySize || itemSize\n      const minItemSize = this.$_computedMinItemSize\n      const typeField = this.typeField\n      const keyField = this.simpleArray ? null : this.keyField\n      const items = this.items\n      const count = items.length\n      const sizes = this.sizes\n      const views = this.$_views\n      const unusedViews = this.$_unusedViews\n      const pool = this.pool\n      const itemIndexByKey = this.itemIndexByKey\n      let startIndex, endIndex\n      let totalSize\n      let visibleStartIndex, visibleEndIndex\n\n      if (!count) {\n        startIndex = endIndex = visibleStartIndex = visibleEndIndex = totalSize = 0\n      } else if (this.$_prerender) {\n        startIndex = visibleStartIndex = 0\n        endIndex = visibleEndIndex = Math.min(this.prerender, items.length)\n        totalSize = null\n      } else {\n        const scroll = this.getScroll()\n\n        // Skip update if use hasn't scrolled enough\n        if (checkPositionDiff) {\n          let positionDiff = scroll.start - this.$_lastUpdateScrollPosition\n          if (positionDiff < 0) positionDiff = -positionDiff\n          if ((itemSize === null && positionDiff < minItemSize) || positionDiff < itemSize) {\n            return {\n              continuous: true,\n            }\n          }\n        }\n        this.$_lastUpdateScrollPosition = scroll.start\n\n        const buffer = this.buffer\n        scroll.start -= buffer\n        scroll.end += buffer\n\n        // account for leading slot\n        let beforeSize = 0\n        if (this.$refs.before) {\n          beforeSize = this.$refs.before.scrollHeight\n          scroll.start -= beforeSize\n        }\n\n        // account for trailing slot\n        if (this.$refs.after) {\n          const afterSize = this.$refs.after.scrollHeight\n          scroll.end += afterSize\n        }\n\n        // Variable size mode\n        if (itemSize === null) {\n          let h\n          let a = 0\n          let b = count - 1\n          let i = ~~(count / 2)\n          let oldI\n\n          // Searching for startIndex\n          do {\n            oldI = i\n            h = sizes[i].accumulator\n            if (h < scroll.start) {\n              a = i\n            } else if (i < count - 1 && sizes[i + 1].accumulator > scroll.start) {\n              b = i\n            }\n            i = ~~((a + b) / 2)\n          } while (i !== oldI)\n          i < 0 && (i = 0)\n          startIndex = i\n\n          // For container style\n          totalSize = sizes[count - 1].accumulator\n\n          // Searching for endIndex\n          for (endIndex = i; endIndex < count && sizes[endIndex].accumulator < scroll.end; endIndex++);\n          if (endIndex === -1) {\n            endIndex = items.length - 1\n          } else {\n            endIndex++\n            // Bounds\n            endIndex > count && (endIndex = count)\n          }\n\n          // search visible startIndex\n          for (visibleStartIndex = startIndex; visibleStartIndex < count && (beforeSize + sizes[visibleStartIndex].accumulator) < scroll.start; visibleStartIndex++);\n\n          // search visible endIndex\n          for (visibleEndIndex = visibleStartIndex; visibleEndIndex < count && (beforeSize + sizes[visibleEndIndex].accumulator) < scroll.end; visibleEndIndex++);\n        } else {\n          // Fixed size mode\n          startIndex = ~~(scroll.start / itemSize * gridItems)\n          const remainer = startIndex % gridItems\n          startIndex -= remainer\n          endIndex = Math.ceil(scroll.end / itemSize * gridItems)\n          visibleStartIndex = Math.max(0, Math.floor((scroll.start - beforeSize) / itemSize * gridItems))\n          visibleEndIndex = Math.floor((scroll.end - beforeSize) / itemSize * gridItems)\n\n          // Bounds\n          startIndex < 0 && (startIndex = 0)\n          endIndex > count && (endIndex = count)\n          visibleStartIndex < 0 && (visibleStartIndex = 0)\n          visibleEndIndex > count && (visibleEndIndex = count)\n\n          totalSize = Math.ceil(count / gridItems) * itemSize\n        }\n      }\n\n      if (endIndex - startIndex > config.itemsLimit) {\n        this.itemsLimitError()\n      }\n\n      this.totalSize = totalSize\n\n      let view\n\n      const continuous = startIndex <= this.$_endIndex && endIndex >= this.$_startIndex\n\n      // Unuse views that are no longer visible\n      if (continuous) {\n        for (let i = 0, l = pool.length; i < l; i++) {\n          view = pool[i]\n          if (view.nr.used) {\n            // Update view item index\n            if (checkItem) {\n              view.nr.index = itemIndexByKey[view.item[keyField]]\n            }\n\n            // Check if index is still in visible range\n            if (\n              view.nr.index == null ||\n              view.nr.index < startIndex ||\n              view.nr.index >= endIndex\n            ) {\n              this.unuseView(view)\n            }\n          }\n        }\n      }\n\n      const unusedIndex = continuous ? null : new Map()\n\n      let item, type\n      let v\n      for (let i = startIndex; i < endIndex; i++) {\n        item = items[i]\n        const key = keyField ? item[keyField] : item\n        if (key == null) {\n          throw new Error(`Key is ${key} on item (keyField is '${keyField}')`)\n        }\n        view = views.get(key)\n\n        if (!itemSize && !sizes[i].size) {\n          if (view) this.unuseView(view)\n          continue\n        }\n\n        type = item[typeField]\n\n        let unusedPool = unusedViews.get(type)\n        let newlyUsedView = false\n\n        // No view assigned to item\n        if (!view) {\n          if (continuous) {\n            // Reuse existing view\n            if (unusedPool && unusedPool.length) {\n              view = unusedPool.pop()\n            } else {\n              view = this.addView(pool, i, item, key, type)\n            }\n          } else {\n            // Use existing view\n            // We don't care if they are already used\n            // because we are not in continous scrolling\n            v = unusedIndex.get(type) || 0\n\n            if (!unusedPool || v >= unusedPool.length) {\n              view = this.addView(pool, i, item, key, type)\n              this.unuseView(view, true)\n              unusedPool = unusedViews.get(type)\n            }\n\n            view = unusedPool[v]\n            unusedIndex.set(type, v + 1)\n          }\n\n          // Assign view to item\n          views.delete(view.nr.key)\n          view.nr.used = true\n          view.nr.index = i\n          view.nr.key = key\n          view.nr.type = type\n          views.set(key, view)\n\n          newlyUsedView = true\n        } else {\n          // View already assigned to item\n          if (!view.nr.used) {\n            view.nr.used = true\n            newlyUsedView = true\n            if (unusedPool) {\n              const index = unusedPool.indexOf(view)\n              if (index !== -1) unusedPool.splice(index, 1)\n            }\n          }\n        }\n\n        // Always set item in case it's a new object with the same key\n        view.item = item\n\n        if (newlyUsedView) {\n          if (i === items.length - 1) this.$emit('scroll-end')\n          if (i === 0) this.$emit('scroll-start')\n        }\n\n        // Update position\n        if (itemSize === null) {\n          view.position = sizes[i - 1].accumulator\n          view.offset = 0\n        } else {\n          view.position = Math.floor(i / gridItems) * itemSize\n          view.offset = (i % gridItems) * itemSecondarySize\n        }\n      }\n\n      this.$_startIndex = startIndex\n      this.$_endIndex = endIndex\n\n      if (this.emitUpdate) this.$emit('update', startIndex, endIndex, visibleStartIndex, visibleEndIndex)\n\n      // After the user has finished scrolling\n      // Sort views so text selection is correct\n      clearTimeout(this.$_sortTimer)\n      this.$_sortTimer = setTimeout(this.sortViews, this.updateInterval + 300)\n\n      return {\n        continuous,\n      }\n    },\n\n    getListenerTarget () {\n      let target = getScrollParent(this.$el)\n      // Fix global scroll target for Chrome and Safari\n      if (window.document && (target === window.document.documentElement || target === window.document.body)) {\n        target = window\n      }\n      return target\n    },\n\n    getScroll () {\n      const { $el: el, direction } = this\n      const isVertical = direction === 'vertical'\n      let scrollState\n\n      if (this.pageMode) {\n        const bounds = el.getBoundingClientRect()\n        const boundsSize = isVertical ? bounds.height : bounds.width\n        let start = -(isVertical ? bounds.top : bounds.left)\n        let size = isVertical ? window.innerHeight : window.innerWidth\n        if (start < 0) {\n          size += start\n          start = 0\n        }\n        if (start + size > boundsSize) {\n          size = boundsSize - start\n        }\n        scrollState = {\n          start,\n          end: start + size,\n        }\n      } else if (isVertical) {\n        scrollState = {\n          start: el.scrollTop,\n          end: el.scrollTop + el.clientHeight,\n        }\n      } else {\n        scrollState = {\n          start: el.scrollLeft,\n          end: el.scrollLeft + el.clientWidth,\n        }\n      }\n\n      return scrollState\n    },\n\n    applyPageMode () {\n      if (this.pageMode) {\n        this.addListeners()\n      } else {\n        this.removeListeners()\n      }\n    },\n\n    addListeners () {\n      this.listenerTarget = this.getListenerTarget()\n      this.listenerTarget.addEventListener('scroll', this.handleScroll, supportsPassive\n        ? {\n            passive: true,\n          }\n        : false)\n      this.listenerTarget.addEventListener('resize', this.handleResize)\n    },\n\n    removeListeners () {\n      if (!this.listenerTarget) {\n        return\n      }\n\n      this.listenerTarget.removeEventListener('scroll', this.handleScroll)\n      this.listenerTarget.removeEventListener('resize', this.handleResize)\n\n      this.listenerTarget = null\n    },\n\n    scrollToItem (index) {\n      let scroll\n      const gridItems = this.gridItems || 1\n      if (this.itemSize === null) {\n        scroll = index > 0 ? this.sizes[index - 1].accumulator : 0\n      } else {\n        scroll = Math.floor(index / gridItems) * this.itemSize\n      }\n      this.scrollToPosition(scroll)\n    },\n\n    scrollToPosition (position) {\n      const direction = this.direction === 'vertical'\n        ? { scroll: 'scrollTop', start: 'top' }\n        : { scroll: 'scrollLeft', start: 'left' }\n\n      let viewport\n      let scrollDirection\n      let scrollDistance\n\n      if (this.pageMode) {\n        const viewportEl = getScrollParent(this.$el)\n        // HTML doesn't overflow like other elements\n        const scrollTop = viewportEl.tagName === 'HTML' ? 0 : viewportEl[direction.scroll]\n        const bounds = viewportEl.getBoundingClientRect()\n\n        const scroller = this.$el.getBoundingClientRect()\n        const scrollerPosition = scroller[direction.start] - bounds[direction.start]\n\n        viewport = viewportEl\n        scrollDirection = direction.scroll\n        scrollDistance = position + scrollTop + scrollerPosition\n      } else {\n        viewport = this.$el\n        scrollDirection = direction.scroll\n        scrollDistance = position\n      }\n\n      viewport[scrollDirection] = scrollDistance\n    },\n\n    itemsLimitError () {\n      setTimeout(() => {\n        console.log('It seems the scroller element isn\\'t scrolling, so it tries to render all the items at once.', 'Scroller:', this.$el)\n        console.log('Make sure the scroller has a fixed height (or width) and \\'overflow-y\\' (or \\'overflow-x\\') set to \\'auto\\' so it can scroll correctly and only render the items visible in the scroll viewport.')\n      })\n      throw new Error('Rendered items limit reached')\n    },\n\n    sortViews () {\n      this.pool.sort((viewA, viewB) => viewA.nr.index - viewB.nr.index)\n    },\n  },\n}\n</script>\n\n<style>\n.vue-recycle-scroller {\n  position: relative;\n}\n\n.vue-recycle-scroller.direction-vertical:not(.page-mode) {\n  overflow-y: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal:not(.page-mode) {\n  overflow-x: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal {\n  display: flex;\n}\n\n.vue-recycle-scroller__slot {\n  flex: auto 0 0;\n}\n\n.vue-recycle-scroller__item-wrapper {\n  flex: 1;\n  box-sizing: border-box;\n  overflow: hidden;\n  position: relative;\n}\n\n.vue-recycle-scroller.ready .vue-recycle-scroller__item-view {\n  position: absolute;\n  top: 0;\n  left: 0;\n  will-change: transform;\n}\n\n.vue-recycle-scroller.direction-vertical .vue-recycle-scroller__item-wrapper {\n  width: 100%;\n}\n\n.vue-recycle-scroller.direction-horizontal .vue-recycle-scroller__item-wrapper {\n  height: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-vertical .vue-recycle-scroller__item-view {\n  width: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-horizontal .vue-recycle-scroller__item-view {\n  height: 100%;\n}\n</style>\n","<template>\n  <div\n    v-observe-visibility=\"handleVisibilityChange\"\n    class=\"vue-recycle-scroller\"\n    :class=\"{\n      ready,\n      'page-mode': pageMode,\n      [`direction-${direction}`]: true,\n    }\"\n    @scroll.passive=\"handleScroll\"\n  >\n    <div\n      v-if=\"$slots.before\"\n      ref=\"before\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"before\"\n      />\n    </div>\n\n    <component\n      :is=\"listTag\"\n      ref=\"wrapper\"\n      :style=\"{ [direction === 'vertical' ? 'minHeight' : 'minWidth']: totalSize + 'px' }\"\n      class=\"vue-recycle-scroller__item-wrapper\"\n      :class=\"listClass\"\n    >\n      <component\n        :is=\"itemTag\"\n        v-for=\"view of pool\"\n        :key=\"view.nr.id\"\n        :style=\"ready ? {\n          transform: `translate${direction === 'vertical' ? 'Y' : 'X'}(${view.position}px) translate${direction === 'vertical' ? 'X' : 'Y'}(${view.offset}px)`,\n          width: gridItems ? `${direction === 'vertical' ? itemSecondarySize || itemSize : itemSize}px` : undefined,\n          height: gridItems ? `${direction === 'horizontal' ? itemSecondarySize || itemSize : itemSize}px` : undefined,\n        } : null\"\n        class=\"vue-recycle-scroller__item-view\"\n        :class=\"[\n          itemClass,\n          {\n            hover: !skipHover && hoverKey === view.nr.key\n          },\n        ]\"\n        v-on=\"skipHover ? {} : {\n          mouseenter: () => { hoverKey = view.nr.key },\n          mouseleave: () => { hoverKey = null },\n        }\"\n      >\n        <slot\n          :item=\"view.item\"\n          :index=\"view.nr.index\"\n          :active=\"view.nr.used\"\n        />\n      </component>\n\n      <slot\n        name=\"empty\"\n      />\n    </component>\n\n    <div\n      v-if=\"$slots.after\"\n      ref=\"after\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"after\"\n      />\n    </div>\n\n    <ResizeObserver @notify=\"handleResize\" />\n  </div>\n</template>\n\n<script>\nimport { shallowReactive, markRaw } from 'vue'\nimport { ResizeObserver } from 'vue-resize'\nimport { ObserveVisibility } from 'vue-observe-visibility'\nimport { getScrollParent } from '../scrollparent'\nimport config from '../config'\nimport { props, simpleArray } from './common'\nimport { supportsPassive } from '../utils'\n\nlet uid = 0\n\nexport default {\n  name: 'RecycleScroller',\n\n  components: {\n    ResizeObserver,\n  },\n\n  directives: {\n    ObserveVisibility,\n  },\n\n  props: {\n    ...props,\n\n    itemSize: {\n      type: Number,\n      default: null,\n    },\n\n    gridItems: {\n      type: Number,\n      default: undefined,\n    },\n\n    itemSecondarySize: {\n      type: Number,\n      default: undefined,\n    },\n\n    minItemSize: {\n      type: [Number, String],\n      default: null,\n    },\n\n    sizeField: {\n      type: String,\n      default: 'size',\n    },\n\n    typeField: {\n      type: String,\n      default: 'type',\n    },\n\n    buffer: {\n      type: Number,\n      default: 200,\n    },\n\n    pageMode: {\n      type: Boolean,\n      default: false,\n    },\n\n    prerender: {\n      type: Number,\n      default: 0,\n    },\n\n    emitUpdate: {\n      type: Boolean,\n      default: false,\n    },\n\n    updateInterval: {\n      type: Number,\n      default: 0,\n    },\n\n    skipHover: {\n      type: Boolean,\n      default: false,\n    },\n\n    listTag: {\n      type: String,\n      default: 'div',\n    },\n\n    itemTag: {\n      type: String,\n      default: 'div',\n    },\n\n    listClass: {\n      type: [String, Object, Array],\n      default: '',\n    },\n\n    itemClass: {\n      type: [String, Object, Array],\n      default: '',\n    },\n  },\n\n  emits: [\n    'resize',\n    'visible',\n    'hidden',\n    'update',\n    'scroll-start',\n    'scroll-end',\n  ],\n\n  data () {\n    return {\n      pool: [],\n      totalSize: 0,\n      ready: false,\n      hoverKey: null,\n    }\n  },\n\n  computed: {\n    sizes () {\n      if (this.itemSize === null) {\n        const sizes = {\n          '-1': { accumulator: 0 },\n        }\n        const items = this.items\n        const field = this.sizeField\n        const minItemSize = this.minItemSize\n        let computedMinSize = 10000\n        let accumulator = 0\n        let current\n        for (let i = 0, l = items.length; i < l; i++) {\n          current = items[i][field] || minItemSize\n          if (current < computedMinSize) {\n            computedMinSize = current\n          }\n          accumulator += current\n          sizes[i] = { accumulator, size: current }\n        }\n        // eslint-disable-next-line\n        this.$_computedMinItemSize = computedMinSize\n        return sizes\n      }\n      return []\n    },\n\n    simpleArray,\n\n    itemIndexByKey () {\n      const { keyField, items } = this\n      const result = {}\n      for (let i = 0, l = items.length; i < l; i++) {\n        result[items[i][keyField]] = i\n      }\n      return result\n    },\n  },\n\n  watch: {\n    items () {\n      this.updateVisibleItems(true)\n    },\n\n    pageMode () {\n      this.applyPageMode()\n      this.updateVisibleItems(false)\n    },\n\n    sizes: {\n      handler () {\n        this.updateVisibleItems(false)\n      },\n      deep: true,\n    },\n\n    gridItems () {\n      this.updateVisibleItems(true)\n    },\n\n    itemSecondarySize () {\n      this.updateVisibleItems(true)\n    },\n  },\n\n  created () {\n    this.$_startIndex = 0\n    this.$_endIndex = 0\n    this.$_views = new Map()\n    this.$_unusedViews = new Map()\n    this.$_scrollDirty = false\n    this.$_lastUpdateScrollPosition = 0\n\n    // In SSR mode, we also prerender the same number of item for the first render\n    // to avoir mismatch between server and client templates\n    if (this.prerender) {\n      this.$_prerender = true\n      this.updateVisibleItems(false)\n    }\n\n    if (this.gridItems && !this.itemSize) {\n      console.error('[vue-recycle-scroller] You must provide an itemSize when using gridItems')\n    }\n  },\n\n  mounted () {\n    this.applyPageMode()\n    this.$nextTick(() => {\n      // In SSR mode, render the real number of visible items\n      this.$_prerender = false\n      this.updateVisibleItems(true)\n      this.ready = true\n    })\n  },\n\n  activated () {\n    const lastPosition = this.$_lastUpdateScrollPosition\n    if (typeof lastPosition === 'number') {\n      this.$nextTick(() => {\n        this.scrollToPosition(lastPosition)\n      })\n    }\n  },\n\n  beforeUnmount () {\n    this.removeListeners()\n  },\n\n  methods: {\n    addView (pool, index, item, key, type) {\n      const nr = markRaw({\n        id: uid++,\n        index,\n        used: true,\n        key,\n        type,\n      })\n      const view = shallowReactive({\n        item,\n        position: 0,\n        nr,\n      })\n      pool.push(view)\n      return view\n    },\n\n    unuseView (view, fake = false) {\n      const unusedViews = this.$_unusedViews\n      const type = view.nr.type\n      let unusedPool = unusedViews.get(type)\n      if (!unusedPool) {\n        unusedPool = []\n        unusedViews.set(type, unusedPool)\n      }\n      unusedPool.push(view)\n      if (!fake) {\n        view.nr.used = false\n        view.position = -9999\n      }\n    },\n\n    handleResize () {\n      this.$emit('resize')\n      if (this.ready) this.updateVisibleItems(false)\n    },\n\n    handleScroll (event) {\n      if (!this.$_scrollDirty) {\n        this.$_scrollDirty = true\n        if (this.$_updateTimeout) return\n\n        const requestUpdate = () => requestAnimationFrame(() => {\n          this.$_scrollDirty = false\n          const { continuous } = this.updateVisibleItems(false, true)\n\n          // It seems sometimes chrome doesn't fire scroll event :/\n          // When non continous scrolling is ending, we force a refresh\n          if (!continuous) {\n            clearTimeout(this.$_refreshTimout)\n            this.$_refreshTimout = setTimeout(this.handleScroll, this.updateInterval + 100)\n          }\n        })\n\n        requestUpdate()\n\n        // Schedule the next update with throttling\n        if (this.updateInterval) {\n          this.$_updateTimeout = setTimeout(() => {\n            this.$_updateTimeout = 0\n            if (this.$_scrollDirty) requestUpdate()\n          }, this.updateInterval)\n        }\n      }\n    },\n\n    handleVisibilityChange (isVisible, entry) {\n      if (this.ready) {\n        if (isVisible || entry.boundingClientRect.width !== 0 || entry.boundingClientRect.height !== 0) {\n          this.$emit('visible')\n          requestAnimationFrame(() => {\n            this.updateVisibleItems(false)\n          })\n        } else {\n          this.$emit('hidden')\n        }\n      }\n    },\n\n    updateVisibleItems (checkItem, checkPositionDiff = false) {\n      const itemSize = this.itemSize\n      const gridItems = this.gridItems || 1\n      const itemSecondarySize = this.itemSecondarySize || itemSize\n      const minItemSize = this.$_computedMinItemSize\n      const typeField = this.typeField\n      const keyField = this.simpleArray ? null : this.keyField\n      const items = this.items\n      const count = items.length\n      const sizes = this.sizes\n      const views = this.$_views\n      const unusedViews = this.$_unusedViews\n      const pool = this.pool\n      const itemIndexByKey = this.itemIndexByKey\n      let startIndex, endIndex\n      let totalSize\n      let visibleStartIndex, visibleEndIndex\n\n      if (!count) {\n        startIndex = endIndex = visibleStartIndex = visibleEndIndex = totalSize = 0\n      } else if (this.$_prerender) {\n        startIndex = visibleStartIndex = 0\n        endIndex = visibleEndIndex = Math.min(this.prerender, items.length)\n        totalSize = null\n      } else {\n        const scroll = this.getScroll()\n\n        // Skip update if use hasn't scrolled enough\n        if (checkPositionDiff) {\n          let positionDiff = scroll.start - this.$_lastUpdateScrollPosition\n          if (positionDiff < 0) positionDiff = -positionDiff\n          if ((itemSize === null && positionDiff < minItemSize) || positionDiff < itemSize) {\n            return {\n              continuous: true,\n            }\n          }\n        }\n        this.$_lastUpdateScrollPosition = scroll.start\n\n        const buffer = this.buffer\n        scroll.start -= buffer\n        scroll.end += buffer\n\n        // account for leading slot\n        let beforeSize = 0\n        if (this.$refs.before) {\n          beforeSize = this.$refs.before.scrollHeight\n          scroll.start -= beforeSize\n        }\n\n        // account for trailing slot\n        if (this.$refs.after) {\n          const afterSize = this.$refs.after.scrollHeight\n          scroll.end += afterSize\n        }\n\n        // Variable size mode\n        if (itemSize === null) {\n          let h\n          let a = 0\n          let b = count - 1\n          let i = ~~(count / 2)\n          let oldI\n\n          // Searching for startIndex\n          do {\n            oldI = i\n            h = sizes[i].accumulator\n            if (h < scroll.start) {\n              a = i\n            } else if (i < count - 1 && sizes[i + 1].accumulator > scroll.start) {\n              b = i\n            }\n            i = ~~((a + b) / 2)\n          } while (i !== oldI)\n          i < 0 && (i = 0)\n          startIndex = i\n\n          // For container style\n          totalSize = sizes[count - 1].accumulator\n\n          // Searching for endIndex\n          for (endIndex = i; endIndex < count && sizes[endIndex].accumulator < scroll.end; endIndex++);\n          if (endIndex === -1) {\n            endIndex = items.length - 1\n          } else {\n            endIndex++\n            // Bounds\n            endIndex > count && (endIndex = count)\n          }\n\n          // search visible startIndex\n          for (visibleStartIndex = startIndex; visibleStartIndex < count && (beforeSize + sizes[visibleStartIndex].accumulator) < scroll.start; visibleStartIndex++);\n\n          // search visible endIndex\n          for (visibleEndIndex = visibleStartIndex; visibleEndIndex < count && (beforeSize + sizes[visibleEndIndex].accumulator) < scroll.end; visibleEndIndex++);\n        } else {\n          // Fixed size mode\n          startIndex = ~~(scroll.start / itemSize * gridItems)\n          const remainer = startIndex % gridItems\n          startIndex -= remainer\n          endIndex = Math.ceil(scroll.end / itemSize * gridItems)\n          visibleStartIndex = Math.max(0, Math.floor((scroll.start - beforeSize) / itemSize * gridItems))\n          visibleEndIndex = Math.floor((scroll.end - beforeSize) / itemSize * gridItems)\n\n          // Bounds\n          startIndex < 0 && (startIndex = 0)\n          endIndex > count && (endIndex = count)\n          visibleStartIndex < 0 && (visibleStartIndex = 0)\n          visibleEndIndex > count && (visibleEndIndex = count)\n\n          totalSize = Math.ceil(count / gridItems) * itemSize\n        }\n      }\n\n      if (endIndex - startIndex > config.itemsLimit) {\n        this.itemsLimitError()\n      }\n\n      this.totalSize = totalSize\n\n      let view\n\n      const continuous = startIndex <= this.$_endIndex && endIndex >= this.$_startIndex\n\n      // Unuse views that are no longer visible\n      if (continuous) {\n        for (let i = 0, l = pool.length; i < l; i++) {\n          view = pool[i]\n          if (view.nr.used) {\n            // Update view item index\n            if (checkItem) {\n              view.nr.index = itemIndexByKey[view.item[keyField]]\n            }\n\n            // Check if index is still in visible range\n            if (\n              view.nr.index == null ||\n              view.nr.index < startIndex ||\n              view.nr.index >= endIndex\n            ) {\n              this.unuseView(view)\n            }\n          }\n        }\n      }\n\n      const unusedIndex = continuous ? null : new Map()\n\n      let item, type\n      let v\n      for (let i = startIndex; i < endIndex; i++) {\n        item = items[i]\n        const key = keyField ? item[keyField] : item\n        if (key == null) {\n          throw new Error(`Key is ${key} on item (keyField is '${keyField}')`)\n        }\n        view = views.get(key)\n\n        if (!itemSize && !sizes[i].size) {\n          if (view) this.unuseView(view)\n          continue\n        }\n\n        type = item[typeField]\n\n        let unusedPool = unusedViews.get(type)\n        let newlyUsedView = false\n\n        // No view assigned to item\n        if (!view) {\n          if (continuous) {\n            // Reuse existing view\n            if (unusedPool && unusedPool.length) {\n              view = unusedPool.pop()\n            } else {\n              view = this.addView(pool, i, item, key, type)\n            }\n          } else {\n            // Use existing view\n            // We don't care if they are already used\n            // because we are not in continous scrolling\n            v = unusedIndex.get(type) || 0\n\n            if (!unusedPool || v >= unusedPool.length) {\n              view = this.addView(pool, i, item, key, type)\n              this.unuseView(view, true)\n              unusedPool = unusedViews.get(type)\n            }\n\n            view = unusedPool[v]\n            unusedIndex.set(type, v + 1)\n          }\n\n          // Assign view to item\n          views.delete(view.nr.key)\n          view.nr.used = true\n          view.nr.index = i\n          view.nr.key = key\n          view.nr.type = type\n          views.set(key, view)\n\n          newlyUsedView = true\n        } else {\n          // View already assigned to item\n          if (!view.nr.used) {\n            view.nr.used = true\n            newlyUsedView = true\n            if (unusedPool) {\n              const index = unusedPool.indexOf(view)\n              if (index !== -1) unusedPool.splice(index, 1)\n            }\n          }\n        }\n\n        // Always set item in case it's a new object with the same key\n        view.item = item\n\n        if (newlyUsedView) {\n          if (i === items.length - 1) this.$emit('scroll-end')\n          if (i === 0) this.$emit('scroll-start')\n        }\n\n        // Update position\n        if (itemSize === null) {\n          view.position = sizes[i - 1].accumulator\n          view.offset = 0\n        } else {\n          view.position = Math.floor(i / gridItems) * itemSize\n          view.offset = (i % gridItems) * itemSecondarySize\n        }\n      }\n\n      this.$_startIndex = startIndex\n      this.$_endIndex = endIndex\n\n      if (this.emitUpdate) this.$emit('update', startIndex, endIndex, visibleStartIndex, visibleEndIndex)\n\n      // After the user has finished scrolling\n      // Sort views so text selection is correct\n      clearTimeout(this.$_sortTimer)\n      this.$_sortTimer = setTimeout(this.sortViews, this.updateInterval + 300)\n\n      return {\n        continuous,\n      }\n    },\n\n    getListenerTarget () {\n      let target = getScrollParent(this.$el)\n      // Fix global scroll target for Chrome and Safari\n      if (window.document && (target === window.document.documentElement || target === window.document.body)) {\n        target = window\n      }\n      return target\n    },\n\n    getScroll () {\n      const { $el: el, direction } = this\n      const isVertical = direction === 'vertical'\n      let scrollState\n\n      if (this.pageMode) {\n        const bounds = el.getBoundingClientRect()\n        const boundsSize = isVertical ? bounds.height : bounds.width\n        let start = -(isVertical ? bounds.top : bounds.left)\n        let size = isVertical ? window.innerHeight : window.innerWidth\n        if (start < 0) {\n          size += start\n          start = 0\n        }\n        if (start + size > boundsSize) {\n          size = boundsSize - start\n        }\n        scrollState = {\n          start,\n          end: start + size,\n        }\n      } else if (isVertical) {\n        scrollState = {\n          start: el.scrollTop,\n          end: el.scrollTop + el.clientHeight,\n        }\n      } else {\n        scrollState = {\n          start: el.scrollLeft,\n          end: el.scrollLeft + el.clientWidth,\n        }\n      }\n\n      return scrollState\n    },\n\n    applyPageMode () {\n      if (this.pageMode) {\n        this.addListeners()\n      } else {\n        this.removeListeners()\n      }\n    },\n\n    addListeners () {\n      this.listenerTarget = this.getListenerTarget()\n      this.listenerTarget.addEventListener('scroll', this.handleScroll, supportsPassive\n        ? {\n            passive: true,\n          }\n        : false)\n      this.listenerTarget.addEventListener('resize', this.handleResize)\n    },\n\n    removeListeners () {\n      if (!this.listenerTarget) {\n        return\n      }\n\n      this.listenerTarget.removeEventListener('scroll', this.handleScroll)\n      this.listenerTarget.removeEventListener('resize', this.handleResize)\n\n      this.listenerTarget = null\n    },\n\n    scrollToItem (index) {\n      let scroll\n      const gridItems = this.gridItems || 1\n      if (this.itemSize === null) {\n        scroll = index > 0 ? this.sizes[index - 1].accumulator : 0\n      } else {\n        scroll = Math.floor(index / gridItems) * this.itemSize\n      }\n      this.scrollToPosition(scroll)\n    },\n\n    scrollToPosition (position) {\n      const direction = this.direction === 'vertical'\n        ? { scroll: 'scrollTop', start: 'top' }\n        : { scroll: 'scrollLeft', start: 'left' }\n\n      let viewport\n      let scrollDirection\n      let scrollDistance\n\n      if (this.pageMode) {\n        const viewportEl = getScrollParent(this.$el)\n        // HTML doesn't overflow like other elements\n        const scrollTop = viewportEl.tagName === 'HTML' ? 0 : viewportEl[direction.scroll]\n        const bounds = viewportEl.getBoundingClientRect()\n\n        const scroller = this.$el.getBoundingClientRect()\n        const scrollerPosition = scroller[direction.start] - bounds[direction.start]\n\n        viewport = viewportEl\n        scrollDirection = direction.scroll\n        scrollDistance = position + scrollTop + scrollerPosition\n      } else {\n        viewport = this.$el\n        scrollDirection = direction.scroll\n        scrollDistance = position\n      }\n\n      viewport[scrollDirection] = scrollDistance\n    },\n\n    itemsLimitError () {\n      setTimeout(() => {\n        console.log('It seems the scroller element isn\\'t scrolling, so it tries to render all the items at once.', 'Scroller:', this.$el)\n        console.log('Make sure the scroller has a fixed height (or width) and \\'overflow-y\\' (or \\'overflow-x\\') set to \\'auto\\' so it can scroll correctly and only render the items visible in the scroll viewport.')\n      })\n      throw new Error('Rendered items limit reached')\n    },\n\n    sortViews () {\n      this.pool.sort((viewA, viewB) => viewA.nr.index - viewB.nr.index)\n    },\n  },\n}\n</script>\n\n<style>\n.vue-recycle-scroller {\n  position: relative;\n}\n\n.vue-recycle-scroller.direction-vertical:not(.page-mode) {\n  overflow-y: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal:not(.page-mode) {\n  overflow-x: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal {\n  display: flex;\n}\n\n.vue-recycle-scroller__slot {\n  flex: auto 0 0;\n}\n\n.vue-recycle-scroller__item-wrapper {\n  flex: 1;\n  box-sizing: border-box;\n  overflow: hidden;\n  position: relative;\n}\n\n.vue-recycle-scroller.ready .vue-recycle-scroller__item-view {\n  position: absolute;\n  top: 0;\n  left: 0;\n  will-change: transform;\n}\n\n.vue-recycle-scroller.direction-vertical .vue-recycle-scroller__item-wrapper {\n  width: 100%;\n}\n\n.vue-recycle-scroller.direction-horizontal .vue-recycle-scroller__item-wrapper {\n  height: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-vertical .vue-recycle-scroller__item-view {\n  width: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-horizontal .vue-recycle-scroller__item-view {\n  height: 100%;\n}\n</style>\n","<template>\n  <RecycleScroller\n    ref=\"scroller\"\n    :items=\"itemsWithSize\"\n    :min-item-size=\"minItemSize\"\n    :direction=\"direction\"\n    key-field=\"id\"\n    :list-tag=\"listTag\"\n    :item-tag=\"itemTag\"\n    v-bind=\"$attrs\"\n    @resize=\"onScrollerResize\"\n    @visible=\"onScrollerVisible\"\n  >\n    <template #default=\"{ item: itemWithSize, index, active }\">\n      <slot\n        v-bind=\"{\n          item: itemWithSize.item,\n          index,\n          active,\n          itemWithSize\n        }\"\n      />\n    </template>\n    <template #before>\n      <slot name=\"before\" />\n    </template>\n    <template #after>\n      <slot name=\"after\" />\n    </template>\n    <template #empty>\n      <slot name=\"empty\" />\n    </template>\n  </RecycleScroller>\n</template>\n\n<script>\nimport mitt from 'mitt'\nimport RecycleScroller from './RecycleScroller.vue'\nimport { props, simpleArray } from './common'\n\nexport default {\n  name: 'DynamicScroller',\n\n  components: {\n    RecycleScroller,\n  },\n\n  provide () {\n    if (typeof ResizeObserver !== 'undefined') {\n      this.$_resizeObserver = new ResizeObserver(entries => {\n        requestAnimationFrame(() => {\n          if (!Array.isArray(entries)) {\n            return\n          }\n          for (const entry of entries) {\n            if (entry.target && entry.target.$_vs_onResize) {\n              let width, height\n              if (entry.borderBoxSize) {\n                const resizeObserverSize = entry.borderBoxSize[0]\n                width = resizeObserverSize.inlineSize\n                height = resizeObserverSize.blockSize\n              } else {\n                // @TODO remove when contentRect is deprecated\n                width = entry.contentRect.width\n                height = entry.contentRect.height\n              }\n              entry.target.$_vs_onResize(entry.target.$_vs_id, width, height)\n            }\n          }\n        })\n      })\n    }\n\n    return {\n      vscrollData: this.vscrollData,\n      vscrollParent: this,\n      vscrollResizeObserver: this.$_resizeObserver,\n    }\n  },\n\n  inheritAttrs: false,\n\n  props: {\n    ...props,\n\n    minItemSize: {\n      type: [Number, String],\n      required: true,\n    },\n  },\n\n  emits: [\n    'resize',\n    'visible',\n  ],\n\n  data () {\n    return {\n      vscrollData: {\n        active: true,\n        sizes: {},\n        keyField: this.keyField,\n        simpleArray: false,\n      },\n    }\n  },\n\n  computed: {\n    simpleArray,\n\n    itemsWithSize () {\n      const result = []\n      const { items, keyField, simpleArray } = this\n      const sizes = this.vscrollData.sizes\n      const l = items.length\n      for (let i = 0; i < l; i++) {\n        const item = items[i]\n        const id = simpleArray ? i : item[keyField]\n        let size = sizes[id]\n        if (typeof size === 'undefined' && !this.$_undefinedMap[id]) {\n          size = 0\n        }\n        result.push({\n          item,\n          id,\n          size,\n        })\n      }\n      return result\n    },\n  },\n\n  watch: {\n    items () {\n      this.forceUpdate()\n    },\n\n    simpleArray: {\n      handler (value) {\n        this.vscrollData.simpleArray = value\n      },\n      immediate: true,\n    },\n\n    direction (value) {\n      this.forceUpdate(true)\n    },\n\n    itemsWithSize (next, prev) {\n      const scrollTop = this.$el.scrollTop\n\n      // Calculate total diff between prev and next sizes\n      // over current scroll top. Then add it to scrollTop to\n      // avoid jumping the contents that the user is seeing.\n      let prevActiveTop = 0; let activeTop = 0\n      const length = Math.min(next.length, prev.length)\n      for (let i = 0; i < length; i++) {\n        if (prevActiveTop >= scrollTop) {\n          break\n        }\n        prevActiveTop += prev[i].size || this.minItemSize\n        activeTop += next[i].size || this.minItemSize\n      }\n      const offset = activeTop - prevActiveTop\n\n      if (offset === 0) {\n        return\n      }\n\n      this.$el.scrollTop += offset\n    },\n  },\n\n  beforeCreate () {\n    this.$_updates = []\n    this.$_undefinedSizes = 0\n    this.$_undefinedMap = {}\n    this.$_events = mitt()\n  },\n\n  activated () {\n    this.vscrollData.active = true\n  },\n\n  deactivated () {\n    this.vscrollData.active = false\n  },\n\n  unmounted () {\n    this.$_events.all.clear()\n  },\n\n  methods: {\n    onScrollerResize () {\n      const scroller = this.$refs.scroller\n      if (scroller) {\n        this.forceUpdate()\n      }\n      this.$emit('resize')\n    },\n\n    onScrollerVisible () {\n      this.$_events.emit('vscroll:update', { force: false })\n      this.$emit('visible')\n    },\n\n    forceUpdate (clear = false) {\n      if (clear || this.simpleArray) {\n        this.vscrollData.sizes = {}\n      }\n      this.$_events.emit('vscroll:update', { force: true })\n    },\n\n    scrollToItem (index) {\n      const scroller = this.$refs.scroller\n      if (scroller) scroller.scrollToItem(index)\n    },\n\n    getItemSize (item, index = undefined) {\n      const id = this.simpleArray ? (index != null ? index : this.items.indexOf(item)) : item[this.keyField]\n      return this.vscrollData.sizes[id] || 0\n    },\n\n    scrollToBottom () {\n      if (this.$_scrollingToBottom) return\n      this.$_scrollingToBottom = true\n      const el = this.$el\n      // Item is inserted to the DOM\n      this.$nextTick(() => {\n        el.scrollTop = el.scrollHeight + 5000\n        // Item sizes are computed\n        const cb = () => {\n          el.scrollTop = el.scrollHeight + 5000\n          requestAnimationFrame(() => {\n            el.scrollTop = el.scrollHeight + 5000\n            if (this.$_undefinedSizes === 0) {\n              this.$_scrollingToBottom = false\n            } else {\n              requestAnimationFrame(cb)\n            }\n          })\n        }\n        requestAnimationFrame(cb)\n      })\n    },\n  },\n}\n</script>\n","export default function(n){return{all:n=n||new Map,on:function(t,e){var i=n.get(t);i&&i.push(e)||n.set(t,[e])},off:function(t,e){var i=n.get(t);i&&i.splice(i.indexOf(e)>>>0,1)},emit:function(t,e){(n.get(t)||[]).slice().map(function(n){n(e)}),(n.get(\"*\")||[]).slice().map(function(n){n(t,e)})}}}\n//# sourceMappingURL=mitt.es.js.map\n","<template>\n  <RecycleScroller\n    ref=\"scroller\"\n    :items=\"itemsWithSize\"\n    :min-item-size=\"minItemSize\"\n    :direction=\"direction\"\n    key-field=\"id\"\n    :list-tag=\"listTag\"\n    :item-tag=\"itemTag\"\n    v-bind=\"$attrs\"\n    @resize=\"onScrollerResize\"\n    @visible=\"onScrollerVisible\"\n  >\n    <template #default=\"{ item: itemWithSize, index, active }\">\n      <slot\n        v-bind=\"{\n          item: itemWithSize.item,\n          index,\n          active,\n          itemWithSize\n        }\"\n      />\n    </template>\n    <template #before>\n      <slot name=\"before\" />\n    </template>\n    <template #after>\n      <slot name=\"after\" />\n    </template>\n    <template #empty>\n      <slot name=\"empty\" />\n    </template>\n  </RecycleScroller>\n</template>\n\n<script>\nimport mitt from 'mitt'\nimport RecycleScroller from './RecycleScroller.vue'\nimport { props, simpleArray } from './common'\n\nexport default {\n  name: 'DynamicScroller',\n\n  components: {\n    RecycleScroller,\n  },\n\n  provide () {\n    if (typeof ResizeObserver !== 'undefined') {\n      this.$_resizeObserver = new ResizeObserver(entries => {\n        requestAnimationFrame(() => {\n          if (!Array.isArray(entries)) {\n            return\n          }\n          for (const entry of entries) {\n            if (entry.target && entry.target.$_vs_onResize) {\n              let width, height\n              if (entry.borderBoxSize) {\n                const resizeObserverSize = entry.borderBoxSize[0]\n                width = resizeObserverSize.inlineSize\n                height = resizeObserverSize.blockSize\n              } else {\n                // @TODO remove when contentRect is deprecated\n                width = entry.contentRect.width\n                height = entry.contentRect.height\n              }\n              entry.target.$_vs_onResize(entry.target.$_vs_id, width, height)\n            }\n          }\n        })\n      })\n    }\n\n    return {\n      vscrollData: this.vscrollData,\n      vscrollParent: this,\n      vscrollResizeObserver: this.$_resizeObserver,\n    }\n  },\n\n  inheritAttrs: false,\n\n  props: {\n    ...props,\n\n    minItemSize: {\n      type: [Number, String],\n      required: true,\n    },\n  },\n\n  emits: [\n    'resize',\n    'visible',\n  ],\n\n  data () {\n    return {\n      vscrollData: {\n        active: true,\n        sizes: {},\n        keyField: this.keyField,\n        simpleArray: false,\n      },\n    }\n  },\n\n  computed: {\n    simpleArray,\n\n    itemsWithSize () {\n      const result = []\n      const { items, keyField, simpleArray } = this\n      const sizes = this.vscrollData.sizes\n      const l = items.length\n      for (let i = 0; i < l; i++) {\n        const item = items[i]\n        const id = simpleArray ? i : item[keyField]\n        let size = sizes[id]\n        if (typeof size === 'undefined' && !this.$_undefinedMap[id]) {\n          size = 0\n        }\n        result.push({\n          item,\n          id,\n          size,\n        })\n      }\n      return result\n    },\n  },\n\n  watch: {\n    items () {\n      this.forceUpdate()\n    },\n\n    simpleArray: {\n      handler (value) {\n        this.vscrollData.simpleArray = value\n      },\n      immediate: true,\n    },\n\n    direction (value) {\n      this.forceUpdate(true)\n    },\n\n    itemsWithSize (next, prev) {\n      const scrollTop = this.$el.scrollTop\n\n      // Calculate total diff between prev and next sizes\n      // over current scroll top. Then add it to scrollTop to\n      // avoid jumping the contents that the user is seeing.\n      let prevActiveTop = 0; let activeTop = 0\n      const length = Math.min(next.length, prev.length)\n      for (let i = 0; i < length; i++) {\n        if (prevActiveTop >= scrollTop) {\n          break\n        }\n        prevActiveTop += prev[i].size || this.minItemSize\n        activeTop += next[i].size || this.minItemSize\n      }\n      const offset = activeTop - prevActiveTop\n\n      if (offset === 0) {\n        return\n      }\n\n      this.$el.scrollTop += offset\n    },\n  },\n\n  beforeCreate () {\n    this.$_updates = []\n    this.$_undefinedSizes = 0\n    this.$_undefinedMap = {}\n    this.$_events = mitt()\n  },\n\n  activated () {\n    this.vscrollData.active = true\n  },\n\n  deactivated () {\n    this.vscrollData.active = false\n  },\n\n  unmounted () {\n    this.$_events.all.clear()\n  },\n\n  methods: {\n    onScrollerResize () {\n      const scroller = this.$refs.scroller\n      if (scroller) {\n        this.forceUpdate()\n      }\n      this.$emit('resize')\n    },\n\n    onScrollerVisible () {\n      this.$_events.emit('vscroll:update', { force: false })\n      this.$emit('visible')\n    },\n\n    forceUpdate (clear = false) {\n      if (clear || this.simpleArray) {\n        this.vscrollData.sizes = {}\n      }\n      this.$_events.emit('vscroll:update', { force: true })\n    },\n\n    scrollToItem (index) {\n      const scroller = this.$refs.scroller\n      if (scroller) scroller.scrollToItem(index)\n    },\n\n    getItemSize (item, index = undefined) {\n      const id = this.simpleArray ? (index != null ? index : this.items.indexOf(item)) : item[this.keyField]\n      return this.vscrollData.sizes[id] || 0\n    },\n\n    scrollToBottom () {\n      if (this.$_scrollingToBottom) return\n      this.$_scrollingToBottom = true\n      const el = this.$el\n      // Item is inserted to the DOM\n      this.$nextTick(() => {\n        el.scrollTop = el.scrollHeight + 5000\n        // Item sizes are computed\n        const cb = () => {\n          el.scrollTop = el.scrollHeight + 5000\n          requestAnimationFrame(() => {\n            el.scrollTop = el.scrollHeight + 5000\n            if (this.$_undefinedSizes === 0) {\n              this.$_scrollingToBottom = false\n            } else {\n              requestAnimationFrame(cb)\n            }\n          })\n        }\n        requestAnimationFrame(cb)\n      })\n    },\n  },\n}\n</script>\n","<script>\nimport { h } from 'vue'\n\nexport default {\n  name: 'DynamicScrollerItem',\n\n  inject: [\n    'vscrollData',\n    'vscrollParent',\n    'vscrollResizeObserver',\n  ],\n\n  props: {\n    // eslint-disable-next-line vue/require-prop-types\n    item: {\n      required: true,\n    },\n\n    watchData: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Indicates if the view is actively used to display an item.\n     */\n    active: {\n      type: Boolean,\n      required: true,\n    },\n\n    index: {\n      type: Number,\n      default: undefined,\n    },\n\n    sizeDependencies: {\n      type: [Array, Object],\n      default: null,\n    },\n\n    emitResize: {\n      type: Boolean,\n      default: false,\n    },\n\n    tag: {\n      type: String,\n      default: 'div',\n    },\n  },\n\n  emits: [\n    'resize',\n  ],\n\n  computed: {\n    id () {\n      if (this.vscrollData.simpleArray) return this.index\n      // eslint-disable-next-line no-prototype-builtins\n      if (this.vscrollData.keyField in this.item) return this.item[this.vscrollData.keyField]\n      throw new Error(`keyField '${this.vscrollData.keyField}' not found in your item. You should set a valid keyField prop on your Scroller`)\n    },\n\n    size () {\n      return this.vscrollData.sizes[this.id] || 0\n    },\n\n    finalActive () {\n      return this.active && this.vscrollData.active\n    },\n  },\n\n  watch: {\n    watchData: 'updateWatchData',\n\n    id (value, oldValue) {\n      this.$el.$_vs_id = this.id\n      if (!this.size) {\n        this.onDataUpdate()\n      }\n\n      if (this.$_sizeObserved) {\n        // In case the old item had the same size, it won't trigger the ResizeObserver\n        // since we are reusing the same DOM node\n        const oldSize = this.vscrollData.sizes[oldValue]\n        const size = this.vscrollData.sizes[value]\n        if (oldSize != null && oldSize !== size) {\n          this.applySize(oldSize)\n        }\n      }\n    },\n\n    finalActive (value) {\n      if (!this.size) {\n        if (value) {\n          if (!this.vscrollParent.$_undefinedMap[this.id]) {\n            this.vscrollParent.$_undefinedSizes++\n            this.vscrollParent.$_undefinedMap[this.id] = true\n          }\n        } else {\n          if (this.vscrollParent.$_undefinedMap[this.id]) {\n            this.vscrollParent.$_undefinedSizes--\n            this.vscrollParent.$_undefinedMap[this.id] = false\n          }\n        }\n      }\n\n      if (this.vscrollResizeObserver) {\n        if (value) {\n          this.observeSize()\n        } else {\n          this.unobserveSize()\n        }\n      } else if (value && this.$_pendingVScrollUpdate === this.id) {\n        this.updateSize()\n      }\n    },\n  },\n\n  created () {\n    if (this.$isServer) return\n\n    this.$_forceNextVScrollUpdate = null\n    this.updateWatchData()\n\n    if (!this.vscrollResizeObserver) {\n      for (const k in this.sizeDependencies) {\n        this.$watch(() => this.sizeDependencies[k], this.onDataUpdate)\n      }\n\n      this.vscrollParent.$_events.on('vscroll:update', this.onVscrollUpdate)\n    }\n  },\n\n  mounted () {\n    if (this.finalActive) {\n      this.updateSize()\n      this.observeSize()\n    }\n  },\n\n  beforeUnmount () {\n    this.vscrollParent.$_events.off('vscroll:update', this.onVscrollUpdate)\n    this.unobserveSize()\n  },\n\n  methods: {\n    updateSize () {\n      if (this.finalActive) {\n        if (this.$_pendingSizeUpdate !== this.id) {\n          this.$_pendingSizeUpdate = this.id\n          this.$_forceNextVScrollUpdate = null\n          this.$_pendingVScrollUpdate = null\n          this.computeSize(this.id)\n        }\n      } else {\n        this.$_forceNextVScrollUpdate = this.id\n      }\n    },\n\n    updateWatchData () {\n      if (this.watchData && !this.vscrollResizeObserver) {\n        this.$_watchData = this.$watch('item', () => {\n          this.onDataUpdate()\n        }, {\n          deep: true,\n        })\n      } else if (this.$_watchData) {\n        this.$_watchData()\n        this.$_watchData = null\n      }\n    },\n\n    onVscrollUpdate ({ force }) {\n      // If not active, sechedule a size update when it becomes active\n      if (!this.finalActive && force) {\n        this.$_pendingVScrollUpdate = this.id\n      }\n\n      if (this.$_forceNextVScrollUpdate === this.id || force || !this.size) {\n        this.updateSize()\n      }\n    },\n\n    onDataUpdate () {\n      this.updateSize()\n    },\n\n    computeSize (id) {\n      this.$nextTick(() => {\n        if (this.id === id) {\n          const width = this.$el.offsetWidth\n          const height = this.$el.offsetHeight\n          this.applyWidthHeight(width, height)\n        }\n        this.$_pendingSizeUpdate = null\n      })\n    },\n\n    applyWidthHeight (width, height) {\n      const size = ~~(this.vscrollParent.direction === 'vertical' ? height : width)\n      if (size && this.size !== size) {\n        this.applySize(size)\n      }\n    },\n\n    applySize (size) {\n      if (this.vscrollParent.$_undefinedMap[this.id]) {\n        this.vscrollParent.$_undefinedSizes--\n        this.vscrollParent.$_undefinedMap[this.id] = undefined\n      }\n      this.vscrollData.sizes[this.id] = size\n      if (this.emitResize) this.$emit('resize', this.id)\n    },\n\n    observeSize () {\n      if (!this.vscrollResizeObserver) return\n      if (this.$_sizeObserved) return\n      this.vscrollResizeObserver.observe(this.$el)\n      this.$el.$_vs_id = this.id\n      this.$el.$_vs_onResize = this.onResize\n      this.$_sizeObserved = true\n    },\n\n    unobserveSize () {\n      if (!this.vscrollResizeObserver) return\n      if (!this.$_sizeObserved) return\n      this.vscrollResizeObserver.unobserve(this.$el)\n      this.$el.$_vs_onResize = undefined\n      this.$_sizeObserved = false\n    },\n\n    onResize (id, width, height) {\n      if (this.id === id) {\n        this.applyWidthHeight(width, height)\n      }\n    },\n  },\n\n  render () {\n    return h(this.tag, this.$slots.default())\n  },\n}\n</script>\n","import config from './config'\n\nimport RecycleScroller from './components/RecycleScroller.vue'\nimport DynamicScroller from './components/DynamicScroller.vue'\nimport DynamicScrollerItem from './components/DynamicScrollerItem.vue'\n\nexport { default as IdState } from './mixins/IdState'\n\nexport {\n  RecycleScroller,\n  DynamicScroller,\n  DynamicScrollerItem,\n}\n\nfunction registerComponents (app, prefix) {\n  app.component(`${prefix}recycle-scroller`, RecycleScroller)\n  app.component(`${prefix}RecycleScroller`, RecycleScroller)\n  app.component(`${prefix}dynamic-scroller`, DynamicScroller)\n  app.component(`${prefix}DynamicScroller`, DynamicScroller)\n  app.component(`${prefix}dynamic-scroller-item`, DynamicScrollerItem)\n  app.component(`${prefix}DynamicScrollerItem`, DynamicScrollerItem)\n}\n\nconst plugin = {\n  // eslint-disable-next-line no-undef\n  version: VERSION,\n  install (app, options) {\n    const finalOptions = Object.assign({}, {\n      installComponents: true,\n      componentsPrefix: '',\n    }, options)\n\n    for (const key in finalOptions) {\n      if (typeof finalOptions[key] !== 'undefined') {\n        config[key] = finalOptions[key]\n      }\n    }\n\n    if (finalOptions.installComponents) {\n      registerComponents(app, finalOptions.componentsPrefix)\n    }\n  },\n}\n\nexport default plugin\n","import { reactive } from 'vue'\n\nexport default function ({\n  idProp = vm => vm.item.id,\n} = {}) {\n  const store = reactive({})\n\n  // @vue/component\n  return {\n    data () {\n      return {\n        idState: null,\n      }\n    },\n\n    created () {\n      this.$_id = null\n      if (typeof idProp === 'function') {\n        this.$_getId = () => idProp.call(this, this)\n      } else {\n        this.$_getId = () => this[idProp]\n      }\n      this.$watch(this.$_getId, {\n        handler (value) {\n          this.$nextTick(() => {\n            this.$_id = value\n          })\n        },\n        immediate: true,\n      })\n      this.$_updateIdState()\n    },\n\n    beforeUpdate () {\n      this.$_updateIdState()\n    },\n\n    methods: {\n      /**\n       * Initialize an idState\n       * @param {number|string} id Unique id for the data\n       */\n      $_idStateInit (id) {\n        const factory = this.$options.idState\n        if (typeof factory === 'function') {\n          const data = factory.call(this, this)\n          store[id] = data\n          this.$_id = id\n          return data\n        } else {\n          throw new Error('[mixin IdState] Missing `idState` function on component definition.')\n        }\n      },\n\n      /**\n       * Ensure idState is created and up-to-date\n       */\n      $_updateIdState () {\n        const id = this.$_getId()\n        if (id == null) {\n          console.warn(`No id found for IdState with idProp: '${idProp}'.`)\n        }\n        if (id !== this.$_id) {\n          if (!store[id]) {\n            this.$_idStateInit(id)\n          }\n          this.idState = store[id]\n        }\n      },\n    },\n  }\n}\n"],"names":["config","itemsLimit","ua","window","navigator","userAgent","msie","indexOf","parseInt","substring","rv","edge","_typeof","obj","Symbol","iterator","constructor","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_toConsumableArray","arr","Array","isArray","_arrayLikeToArray","_arrayWithoutHoles","iter","from","_iterableToArray","o","minLen","n","toString","call","slice","name","test","_unsupportedIterableToArray","TypeError","_nonIterableSpread","len","arr2","VisibilityState","el","options","vnode","instance","Constructor","_classCallCheck","this","observer","frozen","createObserver","protoProps","staticProps","value","_this","destroyObserver","callback","result","entry","once","throttle","_leading","throttleOptions","leading","delay","timeout","lastState","currentArgs","arguments","undefined","throttled","state","_len","args","_key","apply","concat","clearTimeout","setTimeout","_clear","oldResult","IntersectionObserver","entries","intersectingEntry","find","e","isIntersecting","intersectionRatio","threshold","intersection","nextTick","observe","disconnect","get","beforeMount","_ref2","console","warn","_vue_visibilityState","unmounted","ObserveVisibility","updated","_ref3","deepEqual","val1","val2","oldValue","regex","style","node","prop","getComputedStyle","getPropertyValue","scroll","overflow","getScrollParent","HTMLElement","SVGElement","ps","parents","parentNode","document","scrollingElement","documentElement","items","type","required","keyField","String","default","direction","validator","includes","listTag","itemTag","simpleArray","supportsPassive","opts","addEventListener","uid","script$2","components","ResizeObserver","directives","itemSize","Number","gridItems","itemSecondarySize","minItemSize","sizeField","typeField","buffer","pageMode","Boolean","prerender","emitUpdate","updateInterval","skipHover","listClass","itemClass","emits","data","pool","totalSize","ready","hoverKey","computed","[object Object]","sizes","-1","accumulator","field","current","computedMinSize","l","size","$_computedMinItemSize","watch","updateVisibleItems","applyPageMode","deep","$_startIndex","$_endIndex","$_views","Map","$_unusedViews","$_scrollDirty","$_lastUpdateScrollPosition","$_prerender","error","$nextTick","lastPosition","scrollToPosition","removeListeners","methods","index","item","nr","markRaw","id","used","view","shallowReactive","position","push","fake","unusedViews","unusedPool","set","$emit","event","$_updateTimeout","requestUpdate","requestAnimationFrame","continuous","$_refreshTimout","handleScroll","isVisible","boundingClientRect","width","height","checkItem","checkPositionDiff","count","views","itemIndexByKey","startIndex","endIndex","visibleStartIndex","visibleEndIndex","Math","min","getScroll","positionDiff","start","end","beforeSize","$refs","before","scrollHeight","after","afterSize","h","oldI","a","b","ceil","max","floor","itemsLimitError","unuseView","unusedIndex","v","Error","newlyUsedView","splice","pop","addView","delete","offset","$_sortTimer","sortViews","$el","body","isVertical","scrollState","bounds","getBoundingClientRect","boundsSize","top","left","innerHeight","innerWidth","scrollTop","clientHeight","scrollLeft","clientWidth","addListeners","listenerTarget","getListenerTarget","passive","handleResize","removeEventListener","viewport","scrollDirection","scrollDistance","viewportEl","tagName","scrollerPosition","log","sort","viewA","viewB","ref","class","_createElementBlock","$data","$props","_ctx","$options","$slots","_openBlock","_hoisted_1","_renderSlot","_createBlock","createBlock","_resolveDynamicComponent","_normalizeStyle","normalizeStyle","_normalizeClass","_Fragment","Fragment","_renderList","_mergeProps","hover","_toHandlers","mouseenter","active","_hoisted_2","_createVNode","_component_ResizeObserver","onNotify","handleVisibilityChange","script$1","RecycleScroller","$_resizeObserver","$_vs_onResize","borderBoxSize","resizeObserverSize","inlineSize","blockSize","contentRect","$_vs_id","vscrollData","vscrollParent","vscrollResizeObserver","inheritAttrs","$_undefinedMap","forceUpdate","immediate","next","prev","prevActiveTop","activeTop","all","$_updates","$_undefinedSizes","$_events","on","handler","handlers","off","emit","evt","map","clear","scroller","force","scrollToItem","$_scrollingToBottom","cb","_component_RecycleScroller","itemsWithSize","min-item-size","key-field","list-tag","item-tag","$attrs","onResize","onScrollerResize","onVisible","onScrollerVisible","itemWithSize","_normalizeProps","_guardReactiveProps","empty","script","inject","watchData","sizeDependencies","emitResize","tag","onDataUpdate","$_sizeObserved","oldSize","applySize","observeSize","unobserveSize","$_pendingVScrollUpdate","updateSize","$isServer","$_forceNextVScrollUpdate","updateWatchData","k","$watch","onVscrollUpdate","finalActive","$_pendingSizeUpdate","computeSize","$_watchData","offsetWidth","offsetHeight","applyWidthHeight","unobserve","plugin","version","VERSION","install","app","finalOptions","assign","installComponents","componentsPrefix","prefix","component","DynamicScroller","DynamicScrollerItem","registerComponents","_ref","_ref$idProp","idProp","vm","store","reactive","idState","created","$_id","$_getId","_this2","$_updateIdState","beforeUpdate","$_idStateInit","factory"],"mappings":"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"}