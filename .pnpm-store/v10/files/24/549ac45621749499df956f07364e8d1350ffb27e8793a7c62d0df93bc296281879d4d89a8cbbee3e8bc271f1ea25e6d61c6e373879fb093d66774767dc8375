{"version":3,"file":"utils.js","sources":["../../../../src/profiling/utils.ts"],"sourcesContent":["/* eslint-disable max-lines */\n\nimport { DEFAULT_ENVIRONMENT, getClient, spanToJSON } from '@sentry/core';\nimport type {\n  DebugImage,\n  Envelope,\n  Event,\n  EventEnvelope,\n  Profile,\n  Span,\n  StackFrame,\n  StackParser,\n  ThreadCpuProfile,\n} from '@sentry/types';\nimport {\n  GLOBAL_OBJ,\n  browserPerformanceTimeOrigin,\n  forEachEnvelopeItem,\n  logger,\n  timestampInSeconds,\n  uuid4,\n} from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport { WINDOW } from '../helpers';\nimport type { JSSelfProfile, JSSelfProfileStack, JSSelfProfiler, JSSelfProfilerConstructor } from './jsSelfProfiling';\n\nconst MS_TO_NS = 1e6;\n// Use 0 as main thread id which is identical to threadId in node:worker_threads\n// where main logs 0 and workers seem to log in increments of 1\nconst THREAD_ID_STRING = String(0);\nconst THREAD_NAME = 'main';\n\n// Machine properties (eval only once)\nlet OS_PLATFORM = '';\nlet OS_PLATFORM_VERSION = '';\nlet OS_ARCH = '';\nlet OS_BROWSER = (WINDOW.navigator && WINDOW.navigator.userAgent) || '';\nlet OS_MODEL = '';\nconst OS_LOCALE =\n  (WINDOW.navigator && WINDOW.navigator.language) ||\n  (WINDOW.navigator && WINDOW.navigator.languages && WINDOW.navigator.languages[0]) ||\n  '';\n\ntype UAData = {\n  platform?: string;\n  architecture?: string;\n  model?: string;\n  platformVersion?: string;\n  fullVersionList?: {\n    brand: string;\n    version: string;\n  }[];\n};\n\ninterface UserAgentData {\n  getHighEntropyValues: (keys: string[]) => Promise<UAData>;\n}\n\nfunction isUserAgentData(data: unknown): data is UserAgentData {\n  return typeof data === 'object' && data !== null && 'getHighEntropyValues' in data;\n}\n\n// @ts-expect-error userAgentData is not part of the navigator interface yet\nconst userAgentData = WINDOW.navigator && WINDOW.navigator.userAgentData;\n\nif (isUserAgentData(userAgentData)) {\n  userAgentData\n    .getHighEntropyValues(['architecture', 'model', 'platform', 'platformVersion', 'fullVersionList'])\n    .then((ua: UAData) => {\n      OS_PLATFORM = ua.platform || '';\n      OS_ARCH = ua.architecture || '';\n      OS_MODEL = ua.model || '';\n      OS_PLATFORM_VERSION = ua.platformVersion || '';\n\n      if (ua.fullVersionList && ua.fullVersionList.length > 0) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const firstUa = ua.fullVersionList[ua.fullVersionList.length - 1]!;\n        OS_BROWSER = `${firstUa.brand} ${firstUa.version}`;\n      }\n    })\n    .catch(e => void e);\n}\n\nfunction isProcessedJSSelfProfile(profile: ThreadCpuProfile | JSSelfProfile): profile is JSSelfProfile {\n  return !('thread_metadata' in profile);\n}\n\n// Enriches the profile with threadId of the current thread.\n// This is done in node as we seem to not be able to get the info from C native code.\n/**\n *\n */\nexport function enrichWithThreadInformation(profile: ThreadCpuProfile | JSSelfProfile): ThreadCpuProfile {\n  if (!isProcessedJSSelfProfile(profile)) {\n    return profile;\n  }\n\n  return convertJSSelfProfileToSampledFormat(profile);\n}\n\n// Profile is marked as optional because it is deleted from the metadata\n// by the integration before the event is processed by other integrations.\nexport interface ProfiledEvent extends Event {\n  sdkProcessingMetadata: {\n    profile?: JSSelfProfile;\n  };\n}\n\nfunction getTraceId(event: Event): string {\n  const traceId: unknown = event && event.contexts && event.contexts['trace'] && event.contexts['trace']['trace_id'];\n  // Log a warning if the profile has an invalid traceId (should be uuidv4).\n  // All profiles and transactions are rejected if this is the case and we want to\n  // warn users that this is happening if they enable debug flag\n  if (typeof traceId === 'string' && traceId.length !== 32) {\n    if (DEBUG_BUILD) {\n      logger.log(`[Profiling] Invalid traceId: ${traceId} on profiled event`);\n    }\n  }\n  if (typeof traceId !== 'string') {\n    return '';\n  }\n\n  return traceId;\n}\n/**\n * Creates a profiling event envelope from a Sentry event. If profile does not pass\n * validation, returns null.\n * @param event\n * @param dsn\n * @param metadata\n * @param tunnel\n * @returns {EventEnvelope | null}\n */\n\n/**\n * Creates a profiling event envelope from a Sentry event.\n */\nexport function createProfilePayload(\n  profile_id: string,\n  start_timestamp: number | undefined,\n  processed_profile: JSSelfProfile,\n  event: ProfiledEvent,\n): Profile {\n  if (event.type !== 'transaction') {\n    // createProfilingEventEnvelope should only be called for transactions,\n    // we type guard this behavior with isProfiledTransactionEvent.\n    throw new TypeError('Profiling events may only be attached to transactions, this should never occur.');\n  }\n\n  if (processed_profile === undefined || processed_profile === null) {\n    throw new TypeError(\n      `Cannot construct profiling event envelope without a valid profile. Got ${processed_profile} instead.`,\n    );\n  }\n\n  const traceId = getTraceId(event);\n  const enrichedThreadProfile = enrichWithThreadInformation(processed_profile);\n  const transactionStartMs = start_timestamp\n    ? start_timestamp\n    : typeof event.start_timestamp === 'number'\n      ? event.start_timestamp * 1000\n      : timestampInSeconds() * 1000;\n  const transactionEndMs = typeof event.timestamp === 'number' ? event.timestamp * 1000 : timestampInSeconds() * 1000;\n\n  const profile: Profile = {\n    event_id: profile_id,\n    timestamp: new Date(transactionStartMs).toISOString(),\n    platform: 'javascript',\n    version: '1',\n    release: event.release || '',\n    environment: event.environment || DEFAULT_ENVIRONMENT,\n    runtime: {\n      name: 'javascript',\n      version: WINDOW.navigator.userAgent,\n    },\n    os: {\n      name: OS_PLATFORM,\n      version: OS_PLATFORM_VERSION,\n      build_number: OS_BROWSER,\n    },\n    device: {\n      locale: OS_LOCALE,\n      model: OS_MODEL,\n      manufacturer: OS_BROWSER,\n      architecture: OS_ARCH,\n      is_emulator: false,\n    },\n    debug_meta: {\n      images: applyDebugMetadata(processed_profile.resources),\n    },\n    profile: enrichedThreadProfile,\n    transactions: [\n      {\n        name: event.transaction || '',\n        id: event.event_id || uuid4(),\n        trace_id: traceId,\n        active_thread_id: THREAD_ID_STRING,\n        relative_start_ns: '0',\n        relative_end_ns: ((transactionEndMs - transactionStartMs) * 1e6).toFixed(0),\n      },\n    ],\n  };\n\n  return profile;\n}\n\n/**\n *\n */\nexport function isProfiledTransactionEvent(event: Event): event is ProfiledEvent {\n  return !!(event.sdkProcessingMetadata && event.sdkProcessingMetadata['profile']);\n}\n\n/*\n  See packages/browser-utils/src/browser/router.ts\n*/\n/**\n *\n */\nexport function isAutomatedPageLoadSpan(span: Span): boolean {\n  return spanToJSON(span).op === 'pageload';\n}\n\n/**\n * Converts a JSSelfProfile to a our sampled format.\n * Does not currently perform stack indexing.\n */\nexport function convertJSSelfProfileToSampledFormat(input: JSSelfProfile): Profile['profile'] {\n  let EMPTY_STACK_ID: undefined | number = undefined;\n  let STACK_ID = 0;\n\n  // Initialize the profile that we will fill with data\n  const profile: Profile['profile'] = {\n    samples: [],\n    stacks: [],\n    frames: [],\n    thread_metadata: {\n      [THREAD_ID_STRING]: { name: THREAD_NAME },\n    },\n  };\n\n  const firstSample = input.samples[0];\n  if (!firstSample) {\n    return profile;\n  }\n\n  // We assert samples.length > 0 above and timestamp should always be present\n  const start = firstSample.timestamp;\n  // The JS SDK might change it's time origin based on some heuristic (see See packages/utils/src/time.ts)\n  // when that happens, we need to ensure we are correcting the profile timings so the two timelines stay in sync.\n  // Since JS self profiling time origin is always initialized to performance.timeOrigin, we need to adjust for\n  // the drift between the SDK selected value and our profile time origin.\n  const origin =\n    typeof performance.timeOrigin === 'number' ? performance.timeOrigin : browserPerformanceTimeOrigin || 0;\n  const adjustForOriginChange = origin - (browserPerformanceTimeOrigin || origin);\n\n  input.samples.forEach((jsSample, i) => {\n    // If sample has no stack, add an empty sample\n    if (jsSample.stackId === undefined) {\n      if (EMPTY_STACK_ID === undefined) {\n        EMPTY_STACK_ID = STACK_ID;\n        profile.stacks[EMPTY_STACK_ID] = [];\n        STACK_ID++;\n      }\n\n      profile['samples'][i] = {\n        // convert ms timestamp to ns\n        elapsed_since_start_ns: ((jsSample.timestamp + adjustForOriginChange - start) * MS_TO_NS).toFixed(0),\n        stack_id: EMPTY_STACK_ID,\n        thread_id: THREAD_ID_STRING,\n      };\n      return;\n    }\n\n    let stackTop: JSSelfProfileStack | undefined = input.stacks[jsSample.stackId];\n\n    // Functions in top->down order (root is last)\n    // We follow the stackTop.parentId trail and collect each visited frameId\n    const stack: number[] = [];\n\n    while (stackTop) {\n      stack.push(stackTop.frameId);\n\n      const frame = input.frames[stackTop.frameId];\n\n      // If our frame has not been indexed yet, index it\n      if (frame && profile.frames[stackTop.frameId] === undefined) {\n        profile.frames[stackTop.frameId] = {\n          function: frame.name,\n          abs_path: typeof frame.resourceId === 'number' ? input.resources[frame.resourceId] : undefined,\n          lineno: frame.line,\n          colno: frame.column,\n        };\n      }\n\n      stackTop = stackTop.parentId === undefined ? undefined : input.stacks[stackTop.parentId];\n    }\n\n    const sample: Profile['profile']['samples'][0] = {\n      // convert ms timestamp to ns\n      elapsed_since_start_ns: ((jsSample.timestamp + adjustForOriginChange - start) * MS_TO_NS).toFixed(0),\n      stack_id: STACK_ID,\n      thread_id: THREAD_ID_STRING,\n    };\n\n    profile['stacks'][STACK_ID] = stack;\n    profile['samples'][i] = sample;\n    STACK_ID++;\n  });\n\n  return profile;\n}\n\n/**\n * Adds items to envelope if they are not already present - mutates the envelope.\n * @param envelope\n */\nexport function addProfilesToEnvelope(envelope: EventEnvelope, profiles: Profile[]): Envelope {\n  if (!profiles.length) {\n    return envelope;\n  }\n\n  for (const profile of profiles) {\n    envelope[1].push([{ type: 'profile' }, profile]);\n  }\n  return envelope;\n}\n\n/**\n * Finds transactions with profile_id context in the envelope\n * @param envelope\n * @returns\n */\nexport function findProfiledTransactionsFromEnvelope(envelope: Envelope): Event[] {\n  const events: Event[] = [];\n\n  forEachEnvelopeItem(envelope, (item, type) => {\n    if (type !== 'transaction') {\n      return;\n    }\n\n    for (let j = 1; j < item.length; j++) {\n      const event = item[j] as Event;\n\n      if (event && event.contexts && event.contexts['profile'] && event.contexts['profile']['profile_id']) {\n        events.push(item[j] as Event);\n      }\n    }\n  });\n\n  return events;\n}\n\nconst debugIdStackParserCache = new WeakMap<StackParser, Map<string, StackFrame[]>>();\n/**\n * Applies debug meta data to an event from a list of paths to resources (sourcemaps)\n */\nexport function applyDebugMetadata(resource_paths: ReadonlyArray<string>): DebugImage[] {\n  const debugIdMap = GLOBAL_OBJ._sentryDebugIds;\n\n  if (!debugIdMap) {\n    return [];\n  }\n\n  const client = getClient();\n  const options = client && client.getOptions();\n  const stackParser = options && options.stackParser;\n\n  if (!stackParser) {\n    return [];\n  }\n\n  let debugIdStackFramesCache: Map<string, StackFrame[]>;\n  const cachedDebugIdStackFrameCache = debugIdStackParserCache.get(stackParser);\n  if (cachedDebugIdStackFrameCache) {\n    debugIdStackFramesCache = cachedDebugIdStackFrameCache;\n  } else {\n    debugIdStackFramesCache = new Map<string, StackFrame[]>();\n    debugIdStackParserCache.set(stackParser, debugIdStackFramesCache);\n  }\n\n  // Build a map of filename -> debug_id\n  const filenameDebugIdMap = Object.keys(debugIdMap).reduce<Record<string, string>>((acc, debugIdStackTrace) => {\n    let parsedStack: StackFrame[];\n\n    const cachedParsedStack = debugIdStackFramesCache.get(debugIdStackTrace);\n    if (cachedParsedStack) {\n      parsedStack = cachedParsedStack;\n    } else {\n      parsedStack = stackParser(debugIdStackTrace);\n      debugIdStackFramesCache.set(debugIdStackTrace, parsedStack);\n    }\n\n    for (let i = parsedStack.length - 1; i >= 0; i--) {\n      const stackFrame = parsedStack[i];\n      const file = stackFrame && stackFrame.filename;\n\n      if (stackFrame && file) {\n        acc[file] = debugIdMap[debugIdStackTrace] as string;\n        break;\n      }\n    }\n    return acc;\n  }, {});\n\n  const images: DebugImage[] = [];\n  for (const path of resource_paths) {\n    if (path && filenameDebugIdMap[path]) {\n      images.push({\n        type: 'sourcemap',\n        code_file: path,\n        debug_id: filenameDebugIdMap[path] as string,\n      });\n    }\n  }\n\n  return images;\n}\n\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\nexport function isValidSampleRate(rate: unknown): boolean {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  if ((typeof rate !== 'number' && typeof rate !== 'boolean') || (typeof rate === 'number' && isNaN(rate))) {\n    DEBUG_BUILD &&\n      logger.warn(\n        `[Profiling] Invalid sample rate. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(\n          rate,\n        )} of type ${JSON.stringify(typeof rate)}.`,\n      );\n    return false;\n  }\n\n  // Boolean sample rates are always valid\n  if (rate === true || rate === false) {\n    return true;\n  }\n\n  // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n  if (rate < 0 || rate > 1) {\n    DEBUG_BUILD && logger.warn(`[Profiling] Invalid sample rate. Sample rate must be between 0 and 1. Got ${rate}.`);\n    return false;\n  }\n  return true;\n}\n\nfunction isValidProfile(profile: JSSelfProfile): profile is JSSelfProfile & { profile_id: string } {\n  if (profile.samples.length < 2) {\n    if (DEBUG_BUILD) {\n      // Log a warning if the profile has less than 2 samples so users can know why\n      // they are not seeing any profiling data and we cant avoid the back and forth\n      // of asking them to provide us with a dump of the profile data.\n      logger.log('[Profiling] Discarding profile because it contains less than 2 samples');\n    }\n    return false;\n  }\n\n  if (!profile.frames.length) {\n    if (DEBUG_BUILD) {\n      logger.log('[Profiling] Discarding profile because it contains no frames');\n    }\n    return false;\n  }\n\n  return true;\n}\n\n// Keep a flag value to avoid re-initializing the profiler constructor. If it fails\n// once, it will always fail and this allows us to early return.\nlet PROFILING_CONSTRUCTOR_FAILED: boolean = false;\nexport const MAX_PROFILE_DURATION_MS = 30_000;\n\n/**\n * Check if profiler constructor is available.\n * @param maybeProfiler\n */\nfunction isJSProfilerSupported(maybeProfiler: unknown): maybeProfiler is typeof JSSelfProfilerConstructor {\n  return typeof maybeProfiler === 'function';\n}\n\n/**\n * Starts the profiler and returns the profiler instance.\n */\nexport function startJSSelfProfile(): JSSelfProfiler | undefined {\n  // Feature support check first\n  const JSProfilerConstructor = WINDOW.Profiler;\n\n  if (!isJSProfilerSupported(JSProfilerConstructor)) {\n    if (DEBUG_BUILD) {\n      logger.log(\n        '[Profiling] Profiling is not supported by this browser, Profiler interface missing on window object.',\n      );\n    }\n    return;\n  }\n\n  // From initial testing, it seems that the minimum value for sampleInterval is 10ms.\n  const samplingIntervalMS = 10;\n  // Start the profiler\n  const maxSamples = Math.floor(MAX_PROFILE_DURATION_MS / samplingIntervalMS);\n\n  // Attempt to initialize the profiler constructor, if it fails, we disable profiling for the current user session.\n  // This is likely due to a missing 'Document-Policy': 'js-profiling' header. We do not want to throw an error if this happens\n  // as we risk breaking the user's application, so just disable profiling and log an error.\n  try {\n    return new JSProfilerConstructor({ sampleInterval: samplingIntervalMS, maxBufferSize: maxSamples });\n  } catch (e) {\n    if (DEBUG_BUILD) {\n      logger.log(\n        \"[Profiling] Failed to initialize the Profiling constructor, this is likely due to a missing 'Document-Policy': 'js-profiling' header.\",\n      );\n      logger.log('[Profiling] Disabling profiling for current user session.');\n    }\n    PROFILING_CONSTRUCTOR_FAILED = true;\n  }\n\n  return;\n}\n\n/**\n * Determine if a profile should be profiled.\n */\nexport function shouldProfileSpan(span: Span): boolean {\n  // If constructor failed once, it will always fail, so we can early return.\n  if (PROFILING_CONSTRUCTOR_FAILED) {\n    if (DEBUG_BUILD) {\n      logger.log('[Profiling] Profiling has been disabled for the duration of the current user session.');\n    }\n    return false;\n  }\n\n  if (!span.isRecording()) {\n    if (DEBUG_BUILD) {\n      logger.log('[Profiling] Discarding profile because transaction was not sampled.');\n    }\n    return false;\n  }\n\n  const client = getClient();\n  const options = client && client.getOptions();\n  if (!options) {\n    DEBUG_BUILD && logger.log('[Profiling] Profiling disabled, no options found.');\n    return false;\n  }\n\n  // @ts-expect-error profilesSampleRate is not part of the browser options yet\n  const profilesSampleRate: number | boolean | undefined = options.profilesSampleRate;\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n  if (!isValidSampleRate(profilesSampleRate)) {\n    DEBUG_BUILD && logger.warn('[Profiling] Discarding profile because of invalid sample rate.');\n    return false;\n  }\n\n  // if the function returned 0 (or false), or if `profileSampleRate` is 0, it's a sign the profile should be dropped\n  if (!profilesSampleRate) {\n    DEBUG_BUILD &&\n      logger.log(\n        '[Profiling] Discarding profile because a negative sampling decision was inherited or profileSampleRate is set to 0',\n      );\n    return false;\n  }\n\n  // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n  const sampled = profilesSampleRate === true ? true : Math.random() < profilesSampleRate;\n  // Check if we should sample this profile\n  if (!sampled) {\n    DEBUG_BUILD &&\n      logger.log(\n        `[Profiling] Discarding profile because it's not included in the random sample (sampling rate = ${Number(\n          profilesSampleRate,\n        )})`,\n      );\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Creates a profiling envelope item, if the profile does not pass validation, returns null.\n * @param event\n * @returns {Profile | null}\n */\nexport function createProfilingEvent(\n  profile_id: string,\n  start_timestamp: number | undefined,\n  profile: JSSelfProfile,\n  event: ProfiledEvent,\n): Profile | null {\n  if (!isValidProfile(profile)) {\n    return null;\n  }\n\n  return createProfilePayload(profile_id, start_timestamp, profile, event);\n}\n\n// TODO (v8): We need to obtain profile ids in @sentry-internal/tracing,\n// but we don't have access to this map because importing this map would\n// cause a circular dependancy. We need to resolve this in v8.\nconst PROFILE_MAP: Map<string, JSSelfProfile> = new Map();\n/**\n *\n */\nexport function getActiveProfilesCount(): number {\n  return PROFILE_MAP.size;\n}\n\n/**\n * Retrieves profile from global cache and removes it.\n */\nexport function takeProfileFromGlobalCache(profile_id: string): JSSelfProfile | undefined {\n  const profile = PROFILE_MAP.get(profile_id);\n  if (profile) {\n    PROFILE_MAP.delete(profile_id);\n  }\n  return profile;\n}\n/**\n * Adds profile to global cache and evicts the oldest profile if the cache is full.\n */\nexport function addProfileToGlobalCache(profile_id: string, profile: JSSelfProfile): void {\n  PROFILE_MAP.set(profile_id, profile);\n\n  if (PROFILE_MAP.size > 30) {\n    const last: string = PROFILE_MAP.keys().next().value;\n    PROFILE_MAP.delete(last);\n  }\n}\n"],"names":[],"mappings":"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"}