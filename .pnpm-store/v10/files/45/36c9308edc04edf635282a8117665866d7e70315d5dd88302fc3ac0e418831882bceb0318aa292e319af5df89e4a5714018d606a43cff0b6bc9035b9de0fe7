{"version":3,"sources":["../src/index.js"],"names":["index","fetch","bind","url","options","Promise","resolve","reject","response","let","header","keys","all","headers","request","getAllResponseHeaders","replace","m","key","value","push","toLowerCase","ok","status","statusText","responseURL","clone","text","responseText","json","then","JSON","parse","blob","Blob","entries","get","n","has","XMLHttpRequest","open","method","i","setRequestHeader","withCredentials","credentials","onload","onerror","send","body"],"mappings":"AAAA,GAAAA,GAA6B,kBAAPC,OAAoBA,MAAMC,OAAS,SAASC,EAAKC,GAEtE,MADAA,GAAUA,MACH,GAAIC,SAAS,SAACC,EAASC,GAmB7B,QAASC,KACRC,GAGCC,GAHGC,KACHC,KACAC,IAUD,OAPAC,GAAQC,wBAAwBC,QAAQ,+BAAgC,SAACC,EAAGC,EAAKC,GAChFR,EAAKS,KAAKF,EAAMA,EAAIG,eACpBT,EAAIQ,MAAMF,EAAKC,IACfT,EAASG,EAAQK,GACjBL,EAAQK,GAAOR,EAASA,EAAS,IAAIS,EAAUA,KAI/CG,GAA8B,IAAzBR,EAAQS,OAAO,IAAI,GACxBA,OAAQT,EAAQS,OAChBC,WAAYV,EAAQU,WACpBrB,IAAKW,EAAQW,YACbC,MAAOlB,EACPmB,KAAM,WAAG,MAAGtB,SAAQC,QAAQQ,EAAQc,eACpCC,KAAM,WAAG,MAAGxB,SAAQC,QAAQQ,EAAQc,cAAcE,KAAKC,KAAKC,QAC5DC,KAAM,WAAG,MAAG5B,SAAQC,QAAQ,GAAI4B,OAAMpB,EAAQN,aAC9CK,SACCF,KAAM,WAAG,MAAGA,IACZwB,QAAS,WAAG,MAAGvB,IACfwB,IAAK,SAAAC,GAAE,MAAGxB,GAAQwB,EAAEhB,gBACpBiB,IAAK,SAAAD,GAAE,MAAGA,GAAEhB,eAAiBR,MA5ChCJ,GAAIK,GAAU,GAAIyB,eAElBzB,GAAQ0B,KAAKpC,EAAQqC,QAAU,MAAOtC,GAAK,EAE3C,KAAKM,GAAIiC,KAAKtC,GAAQS,QACrBC,EAAQ6B,iBAAiBD,EAAGtC,EAAQS,QAAQ6B,GAG7C5B,GAAQ8B,gBAAuC,WAArBxC,EAAQyC,YAElC/B,EAAQgC,OAAS,WAChBxC,EAAQE,MAGTM,EAAQiC,QAAUxC,EAElBO,EAAQkC,KAAK5C,EAAQ6C,MAAQ","file":"unfetch.js","sourcesContent":["export default typeof fetch=='function' ? fetch.bind() : function(url, options) {\n\toptions = options || {};\n\treturn new Promise( (resolve, reject) => {\n\t\tlet request = new XMLHttpRequest();\n\n\t\trequest.open(options.method || 'get', url, true);\n\n\t\tfor (let i in options.headers) {\n\t\t\trequest.setRequestHeader(i, options.headers[i]);\n\t\t}\n\n\t\trequest.withCredentials = options.credentials=='include';\n\n\t\trequest.onload = () => {\n\t\t\tresolve(response());\n\t\t};\n\n\t\trequest.onerror = reject;\n\n\t\trequest.send(options.body || null);\n\n\t\tfunction response() {\n\t\t\tlet keys = [],\n\t\t\t\tall = [],\n\t\t\t\theaders = {},\n\t\t\t\theader;\n\n\t\t\trequest.getAllResponseHeaders().replace(/^(.*?):[^\\S\\n]*([\\s\\S]*?)$/gm, (m, key, value) => {\n\t\t\t\tkeys.push(key = key.toLowerCase());\n\t\t\t\tall.push([key, value]);\n\t\t\t\theader = headers[key];\n\t\t\t\theaders[key] = header ? `${header},${value}` : value;\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\tok: (request.status/100|0) == 2,\t\t// 200-299\n\t\t\t\tstatus: request.status,\n\t\t\t\tstatusText: request.statusText,\n\t\t\t\turl: request.responseURL,\n\t\t\t\tclone: response,\n\t\t\t\ttext: () => Promise.resolve(request.responseText),\n\t\t\t\tjson: () => Promise.resolve(request.responseText).then(JSON.parse),\n\t\t\t\tblob: () => Promise.resolve(new Blob([request.response])),\n\t\t\t\theaders: {\n\t\t\t\t\tkeys: () => keys,\n\t\t\t\t\tentries: () => all,\n\t\t\t\t\tget: n => headers[n.toLowerCase()],\n\t\t\t\t\thas: n => n.toLowerCase() in headers\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t});\n}\n"]}