{"version":3,"file":"clone.js","sourceRoot":"","sources":["../lib/clone.js"],"names":[],"mappings":";;;AAAA,SAAgB,KAAK,CAAC,UAAU;IAC9B,IAAI,OAAO,UAAU,KAAK,QAAQ;QAAE,OAAO,UAAU,CAAA;IAErD,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,iBAAiB,EAAE;QACpE,IAAM,IAAI,GAAG,EAAE,CAAC;QAChB,KAAK,IAAM,GAAG,IAAI,UAAU,EAAE;YAC5B,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,CAAC,EAAE;gBACzD,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;aACpC;SACF;QACD,OAAO,IAAI,CAAC;KACb;SAAM,IAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;QACpC,OAAO,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KAC9B;SAAM;QAEL,OAAO,UAAU,CAAC;KACnB;AACH,CAAC;AAjBD,sBAiBC","sourcesContent":["export function clone(properties) {\n  if (typeof properties !== 'object') return properties\n\n  if (Object.prototype.toString.call(properties) === '[object Object]') {\n    const temp = {};\n    for (const key in properties) {\n      if (Object.prototype.hasOwnProperty.call(properties, key)) {\n        temp[key] = clone(properties[key]);\n      }\n    }\n    return temp;\n  } else if (Array.isArray(properties)) {\n    return properties.map(clone);\n  } else {\n    // this is dangerous because it means this is not cloned\n    return properties;\n  }\n}\n"]}