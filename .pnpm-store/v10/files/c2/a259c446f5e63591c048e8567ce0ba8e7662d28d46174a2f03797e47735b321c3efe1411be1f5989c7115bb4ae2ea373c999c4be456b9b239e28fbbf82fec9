{"version":3,"file":"tsub-middleware.bundle.edac75d5aa100b72b407.js","mappings":"yMAeaA,EACX,SAACC,GACD,gBAAC,G,IAAEC,EAAO,UAAEC,EAAW,cAAEC,EAAI,OACb,IAAI,QAAWH,GACFI,0BAA0BF,GAExCG,SAAQ,SAACC,GAGpB,IAFQ,IAAAC,EAA2BD,EAAI,SAArBE,EAAiBF,EAAI,aAE9BG,EAAI,EAAGA,EAAIF,EAASG,OAAQD,IACnC,GAAI,UAAaR,EAAQU,IAAKJ,EAASE,MACrCR,EAAQU,IAAM,YAAeV,EAAQU,IAAKH,EAAaC,IAEnC,OAAhBR,EAAQU,KACV,OAAOR,EAAK,SAMpBA,EAAKF","sources":["webpack://@june-so/analytics-next/./src/plugins/routing-middleware/index.ts"],"sourcesContent":["import * as tsub from '@segment/tsub'\nimport { Matcher, Rule } from '@segment/tsub/dist/store'\nimport { DestinationMiddlewareFunction } from '../middleware'\n\n// TODO: update tsub definition\ntype RoutingRuleMatcher = Matcher & {\n  config?: {\n    expr: string\n  }\n}\n\nexport type RoutingRule = Rule & {\n  matchers: RoutingRuleMatcher[]\n}\n\nexport const tsubMiddleware =\n  (rules: RoutingRule[]): DestinationMiddlewareFunction =>\n  ({ payload, integration, next }): void => {\n    const store = new tsub.Store(rules)\n    const rulesToApply = store.getRulesByDestinationName(integration)\n\n    rulesToApply.forEach((rule) => {\n      const { matchers, transformers } = rule\n\n      for (let i = 0; i < matchers.length; i++) {\n        if (tsub.matches(payload.obj, matchers[i])) {\n          payload.obj = tsub.transform(payload.obj, transformers[i])\n\n          if (payload.obj === null) {\n            return next(null)\n          }\n        }\n      }\n    })\n\n    next(payload)\n  }\n"],"names":["tsubMiddleware","rules","payload","integration","next","getRulesByDestinationName","forEach","rule","matchers","transformers","i","length","obj"],"sourceRoot":""}