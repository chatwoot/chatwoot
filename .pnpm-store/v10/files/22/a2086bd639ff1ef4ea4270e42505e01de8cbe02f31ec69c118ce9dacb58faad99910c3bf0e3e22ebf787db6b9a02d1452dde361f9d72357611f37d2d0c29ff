{"version":3,"file":"PhoneNumber.test.js","names":["describe","it","expect","PhoneNumber","to","phoneNumber","metadata","countryCallingCode","should","equal","country","number","ext","format","formatExtension","extension","isEqual","isNonGeographic","setExt","formatNational","be","undefined","getPossibleCountries","deep","indexOf","length"],"sources":["../source/PhoneNumber.test.js"],"sourcesContent":["import metadata from '../metadata.min.json' assert { type: 'json' }\r\nimport PhoneNumber from './PhoneNumber.js'\r\n\r\ndescribe('PhoneNumber', () => {\r\n\tit('should validate constructor arguments', () => {\r\n\t\texpect(() => new PhoneNumber()).to.throw('`countryCallingCode` not passed')\r\n\t\texpect(() => new PhoneNumber('7')).to.throw('`nationalNumber` not passed')\r\n\t\texpect(() => new PhoneNumber('7', '8005553535')).to.throw('`metadata` not passed')\r\n\t})\r\n\r\n\tit('should accept country code argument', () => {\r\n\t\tconst phoneNumber = new PhoneNumber('RU', '8005553535', metadata)\r\n\t\tphoneNumber.countryCallingCode.should.equal('7')\r\n\t\tphoneNumber.country.should.equal('RU')\r\n\t\tphoneNumber.number.should.equal('+78005553535')\r\n\t})\r\n\r\n\tit('should format number with options', () => {\r\n\t\tconst phoneNumber = new PhoneNumber('7', '8005553535', metadata)\r\n\t\tphoneNumber.ext = '123'\r\n\t\tphoneNumber.format('NATIONAL', {\r\n\t\t\tformatExtension: (number, extension) => `${number} доб. ${extension}`\r\n\t\t})\r\n\t\t.should.equal('8 (800) 555-35-35 доб. 123')\r\n\t})\r\n\r\n\tit('should compare phone numbers', () => {\r\n\t\tnew PhoneNumber('RU', '8005553535', metadata).isEqual(new PhoneNumber('RU', '8005553535', metadata)).should.equal(true)\r\n\t\tnew PhoneNumber('RU', '8005553535', metadata).isEqual(new PhoneNumber('7', '8005553535', metadata)).should.equal(true)\r\n\t\tnew PhoneNumber('RU', '8005553535', metadata).isEqual(new PhoneNumber('RU', '8005553536', metadata)).should.equal(false)\r\n\t})\r\n\r\n\tit('should tell if a number is non-geographic', () => {\r\n\t\tnew PhoneNumber('7', '8005553535', metadata).isNonGeographic().should.equal(false)\r\n\t\tnew PhoneNumber('870', '773111632', metadata).isNonGeographic().should.equal(true)\r\n\t})\r\n\r\n\tit('should allow setting extension', () => {\r\n\t\tconst phoneNumber = new PhoneNumber('1', '2133734253', metadata)\r\n\t\tphoneNumber.setExt('1234')\r\n\t\tphoneNumber.ext.should.equal('1234')\r\n\t\tphoneNumber.formatNational().should.equal('(213) 373-4253 ext. 1234')\r\n\t})\r\n\r\n\tit('should return possible countries', () => {\r\n      // \"599\": [\r\n      //    \"CW\", //  \"possible_lengths\": [7, 8]\r\n      //    \"BQ\" //  \"possible_lengths\": [7]\r\n      // ]\r\n\r\n\t\tlet phoneNumber = new PhoneNumber('599', '123456', metadata)\r\n\t\texpect(phoneNumber.country).to.be.undefined\r\n\t\tphoneNumber.getPossibleCountries().should.deep.equal([])\r\n\r\n\t\tphoneNumber = new PhoneNumber('599', '1234567', metadata)\r\n\t\texpect(phoneNumber.country).to.be.undefined\r\n\t\tphoneNumber.getPossibleCountries().should.deep.equal(['CW', 'BQ'])\r\n\r\n\t\tphoneNumber = new PhoneNumber('599', '12345678', metadata)\r\n\t\texpect(phoneNumber.country).to.be.undefined\r\n\t\tphoneNumber.getPossibleCountries().should.deep.equal(['CW'])\r\n\r\n\t\tphoneNumber = new PhoneNumber('599', '123456789', metadata)\r\n\t\texpect(phoneNumber.country).to.be.undefined\r\n\t\tphoneNumber.getPossibleCountries().should.deep.equal([])\r\n\t})\r\n\r\n\tit('should return possible countries in case of ambiguity', () => {\r\n\t\tconst phoneNumber = new PhoneNumber('1', '2223334444', metadata)\r\n\t\texpect(phoneNumber.country).to.be.undefined\r\n\t\tphoneNumber.getPossibleCountries().indexOf('US').should.equal(0)\r\n\t\tphoneNumber.getPossibleCountries().length.should.equal(25)\r\n\t})\r\n\r\n\t// it('should return empty possible countries when no national number has been input', () => {\r\n\t// \tconst phoneNumber = new PhoneNumber('1', '', metadata)\r\n\t// \texpect(phoneNumber.country).to.be.undefined\r\n\t// \tphoneNumber.getPossibleCountries().should.deep.equal([])\r\n\t// })\r\n\r\n\tit('should return empty possible countries when not enough national number digits have been input', () => {\r\n\t\tconst phoneNumber = new PhoneNumber('1', '222', metadata)\r\n\t\texpect(phoneNumber.country).to.be.undefined\r\n\t\tphoneNumber.getPossibleCountries().should.deep.equal([])\r\n\t})\r\n\r\n\tit('should return possible countries in case of no ambiguity', () => {\r\n\t\tconst phoneNumber = new PhoneNumber('US', '2133734253', metadata)\r\n\t\tphoneNumber.country.should.equal('US')\r\n\t\tphoneNumber.getPossibleCountries().should.deep.equal(['US'])\r\n\t})\r\n\r\n\tit('should return empty possible countries in case of an unknown calling code', () => {\r\n\t\tconst phoneNumber = new PhoneNumber('777', '123', metadata)\r\n\t\texpect(phoneNumber.country).to.be.undefined\r\n\t\tphoneNumber.getPossibleCountries().should.deep.equal([])\r\n\t})\r\n\r\n\t// it('should validate phone number length', () => {\r\n\t// \tconst phoneNumber = new PhoneNumber('RU', '800', metadata)\r\n\t// \texpect(phoneNumber.validateLength()).to.equal('TOO_SHORT')\r\n\t//\r\n\t// \tconst phoneNumberValid = new PhoneNumber('RU', '8005553535', metadata)\r\n\t// \texpect(phoneNumberValid.validateLength()).to.be.undefined\r\n\t// })\r\n})"],"mappings":"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"}