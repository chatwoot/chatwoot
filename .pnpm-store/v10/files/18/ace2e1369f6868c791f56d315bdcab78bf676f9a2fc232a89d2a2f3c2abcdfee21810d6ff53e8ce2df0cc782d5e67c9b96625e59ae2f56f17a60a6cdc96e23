{"version":3,"file":"onFCP.js","sources":["../../../../src/metrics/web-vitals/onFCP.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { getActivationStart } from './lib/getActivationStart';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { whenActivated } from './lib/whenActivated';\nimport type { FCPMetric, FCPReportCallback, MetricRatingThresholds, ReportOpts } from './types';\n\n/** Thresholds for FCP. See https://web.dev/articles/fcp#what_is_a_good_fcp_score */\nexport const FCPThresholds: MetricRatingThresholds = [1800, 3000];\n\n/**\n * Calculates the [FCP](https://web.dev/articles/fcp) value for the current page and\n * calls the `callback` function once the value is ready, along with the\n * relevant `paint` performance entry used to determine the value. The reported\n * value is a `DOMHighResTimeStamp`.\n */\nexport const onFCP = (onReport: FCPReportCallback, opts: ReportOpts = {}): void => {\n  whenActivated(() => {\n    const visibilityWatcher = getVisibilityWatcher();\n    const metric = initMetric('FCP');\n    let report: ReturnType<typeof bindReporter>;\n\n    const handleEntries = (entries: FCPMetric['entries']) => {\n      (entries as PerformancePaintTiming[]).forEach(entry => {\n        if (entry.name === 'first-contentful-paint') {\n          po!.disconnect();\n\n          // Only report if the page wasn't hidden prior to the first paint.\n          if (entry.startTime < visibilityWatcher.firstHiddenTime) {\n            // The activationStart reference is used because FCP should be\n            // relative to page activation rather than navigation start if the\n            // page was prerendered. But in cases where `activationStart` occurs\n            // after the FCP, this time should be clamped at 0.\n            metric.value = Math.max(entry.startTime - getActivationStart(), 0);\n            metric.entries.push(entry);\n            report(true);\n          }\n        }\n      });\n    };\n\n    const po = observe('paint', handleEntries);\n\n    if (po) {\n      report = bindReporter(onReport, metric, FCPThresholds, opts!.reportAllChanges);\n    }\n  });\n};\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AASA;AACO,MAAM,aAAa,GAA2B,CAAC,IAAI,EAAE,IAAI,EAAC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAM,KAAM,GAAE,CAAC,QAAQ,EAAqB,IAAI,GAAe,EAAE,KAAW;AACnF,EAAE,aAAa,CAAC,MAAM;AACtB,IAAI,MAAM,iBAAA,GAAoB,oBAAoB,EAAE,CAAA;AACpD,IAAI,MAAM,MAAO,GAAE,UAAU,CAAC,KAAK,CAAC,CAAA;AACpC,IAAI,IAAI,MAAM,CAAA;AACd;AACA,IAAI,MAAM,aAAc,GAAE,CAAC,OAAO,KAA2B;AAC7D,MAAM,CAAC,OAAQ,GAA6B,OAAO,CAAC,SAAS;AAC7D,QAAQ,IAAI,KAAK,CAAC,IAAK,KAAI,wBAAwB,EAAE;AACrD,UAAU,EAAE,CAAE,UAAU,EAAE,CAAA;AAC1B;AACA;AACA,UAAU,IAAI,KAAK,CAAC,YAAY,iBAAiB,CAAC,eAAe,EAAE;AACnE;AACA;AACA;AACA;AACA,YAAY,MAAM,CAAC,KAAA,GAAQ,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,YAAY,kBAAkB,EAAE,EAAE,CAAC,CAAC,CAAA;AAC9E,YAAY,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;AACtC,YAAY,MAAM,CAAC,IAAI,CAAC,CAAA;AACxB,WAAU;AACV,SAAQ;AACR,OAAO,CAAC,CAAA;AACR,KAAK,CAAA;AACL;AACA,IAAI,MAAM,KAAK,OAAO,CAAC,OAAO,EAAE,aAAa,CAAC,CAAA;AAC9C;AACA,IAAI,IAAI,EAAE,EAAE;AACZ,MAAM,MAAO,GAAE,YAAY,CAAC,QAAQ,EAAE,MAAM,EAAE,aAAa,EAAE,IAAI,CAAE,gBAAgB,CAAC,CAAA;AACpF,KAAI;AACJ,GAAG,CAAC,CAAA;AACJ;;;;"}