{"version":3,"file":"remoteMiddleware.bundle.cda924abd78d0a3ac182.js","mappings":"uOAOO,SAAeA,EACpBC,EACAC,EACAC,G,iCACCC,SAAO,W,2EACR,OAAI,SACK,CAAC,EAAD,KAEHC,GAAO,UACPC,EAA6C,QAA1B,EAAAJ,EAASK,yBAAiB,QAAI,GACjDC,EAAQC,OAAOC,QAAQJ,GAC1BK,QAAO,SAAC,GAAE,KAAe,OAAN,QACnBC,KAAI,SAAC,GAAW,OAAN,QAEPC,EAAUL,EAAMI,KAAI,SAAOE,GAAI,2C,oEAC7BC,EAAgBD,EAAKE,QAAQ,YAAa,IAC5CC,EAAaF,EACbZ,IACFc,EAAaC,KAAKH,GAAeC,QAAQ,KAAM,KAE3CG,EAAW,UAAGd,EAAI,uBAAeY,EAAU,mBAAWA,EAAU,U,iBAGpE,O,sBAAA,IAAM,OAAWE,I,OAEjB,OAFA,SAEO,CAAP,EAAOC,OAAO,UAAGL,EAAa,gB,yBAE9Bd,EAAIoB,IAAI,QAAS,GACjBpB,EAAIqB,MAAMC,UAAU,4B,iCAIP,GAAMnB,QAAQoB,IAAIX,K,OAGnC,MAAO,CAAP,EAHiB,SACOF,OAAOc","sources":["webpack://@june-so/analytics-next/./src/plugins/remote-middleware/index.ts"],"sourcesContent":["import { LegacySettings } from '../../browser'\nimport { Context } from '../../core/context'\nimport { isServer } from '../../core/environment'\nimport { loadScript } from '../../lib/load-script'\nimport { getNextIntegrationsURL } from '../../lib/parse-cdn'\nimport { MiddlewareFunction } from '../middleware'\n\nexport async function remoteMiddlewares(\n  ctx: Context,\n  settings: LegacySettings,\n  obfuscate?: boolean\n): Promise<MiddlewareFunction[]> {\n  if (isServer()) {\n    return []\n  }\n  const path = getNextIntegrationsURL()\n  const remoteMiddleware = settings.enabledMiddleware ?? {}\n  const names = Object.entries(remoteMiddleware)\n    .filter(([_, enabled]) => enabled)\n    .map(([name]) => name)\n\n  const scripts = names.map(async (name) => {\n    const nonNamespaced = name.replace('@segment/', '')\n    let bundleName = nonNamespaced\n    if (obfuscate) {\n      bundleName = btoa(nonNamespaced).replace(/=/g, '')\n    }\n    const fullPath = `${path}/middleware/${bundleName}/latest/${bundleName}.js.gz`\n\n    try {\n      await loadScript(fullPath)\n      // @ts-ignore\n      return window[`${nonNamespaced}Middleware`] as MiddlewareFunction\n    } catch (error: any) {\n      ctx.log('error', error)\n      ctx.stats.increment('failed_remote_middleware')\n    }\n  })\n\n  let middleware = await Promise.all(scripts)\n  middleware = middleware.filter(Boolean)\n\n  return middleware as MiddlewareFunction[]\n}\n"],"names":["remoteMiddlewares","ctx","settings","obfuscate","Promise","path","remoteMiddleware","enabledMiddleware","names","Object","entries","filter","map","scripts","name","nonNamespaced","replace","bundleName","btoa","fullPath","window","log","stats","increment","all","Boolean"],"sourceRoot":""}