{"version":3,"file":"identify.js","sourceRoot":"","sources":["../lib/identify.js"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport { Facade } from \"./facade\";\nimport get from \"obj-case\";\nimport inherit from \"inherits\";\nimport isEmail from \"./is-email\";\nimport newDate from \"new-date\";\n\nlet trim = (str) => str.trim();\n\n/**\n * Initialize a new `Identify` facade with a `dictionary` of arguments.\n *\n * @param {Object} dictionary - The object to wrap.\n * @param {string} [dictionary.userId] - The ID of the user.\n * @param {string} [dictionary.anonymousId] - The anonymous ID of the user.\n * @param {string} [dictionary.traits] - The user's traits.\n * @param {Object} opts - Options about what kind of Facade to create.\n *\n * @augments Facade\n */\nexport function Identify(dictionary, opts) {\n  Facade.call(this, dictionary, opts);\n}\n\ninherit(Identify, Facade);\n\nconst i = Identify.prototype;\n\n/**\n * Return the type of facade this is. This will always return `\"identify\"`.\n *\n * @return {string}\n */\ni.action = function () {\n  return \"identify\";\n};\n\n/**\n * An alias for {@link Identify#action}.\n *\n * @function\n * @return {string}\n */\ni.type = i.action;\n\n/**\n * Get the user's traits. This is identical to how {@link Facade#traits} works,\n * except it looks at `traits.*` instead of `options.traits.*`.\n *\n * Traits are gotten from `traits`, augmented with a property `id` with\n * the event's `userId`.\n *\n * The parameter `aliases` is meant to transform keys in `traits` into new\n * keys. Each alias like `{ \"xxx\": \"yyy\" }` will take whatever is at `xxx` in\n * the traits, and move it to `yyy`. If `xxx` is a method of this facade, it'll\n * be called as a function instead of treated as a key into the traits.\n *\n * @example\n * let obj = { traits: { foo: \"bar\" }, anonymousId: \"xxx\" }\n * let identify = new Identify(obj)\n *\n * identify.traits() // { \"foo\": \"bar\" }\n * identify.traits({ \"foo\": \"asdf\" }) // { \"asdf\": \"bar\" }\n * identify.traits({ \"sessionId\": \"rofl\" }) // { \"rofl\": \"xxx\" }\n *\n * @param {Object} aliases - A mapping from keys to the new keys they should be\n * transformed to.\n * @return {Object}\n */\ni.traits = function (aliases) {\n  let ret = this.field(\"traits\") || {};\n  let id = this.userId();\n  aliases = aliases || {};\n\n  if (id) ret.id = id;\n\n  for (let alias in aliases) {\n    let value =\n      this[alias] == null ? this.proxy(\"traits.\" + alias) : this[alias]();\n    if (value == null) continue;\n    ret[aliases[alias]] = value;\n    if (alias !== aliases[alias]) delete ret[alias];\n  }\n\n  return ret;\n};\n\n/**\n * Get the user's email from `traits.email`, falling back to `userId` only if\n * it looks like a valid email.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @return {string}\n */\ni.email = function () {\n  let email = this.proxy(\"traits.email\");\n  if (email) return email;\n\n  let userId = this.userId();\n  if (isEmail(userId)) return userId;\n};\n\n/**\n * Get the time of creation of the user from `traits.created` or\n * `traits.createdAt`.\n *\n * @return {Date}\n */\ni.created = function () {\n  let created = this.proxy(\"traits.created\") || this.proxy(\"traits.createdAt\");\n  if (created) return newDate(created);\n};\n\n/**\n * Get the time of creation of the user's company from `traits.company.created`\n * or `traits.company.createdAt`.\n *\n * @return {Date}\n */\ni.companyCreated = function () {\n  let created =\n    this.proxy(\"traits.company.created\") ||\n    this.proxy(\"traits.company.createdAt\");\n\n  if (created) {\n    return newDate(created);\n  }\n};\n\n/**\n * Get the user's company name from `traits.company.name`.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @return {string}\n */\ni.companyName = function () {\n  return this.proxy(\"traits.company.name\");\n};\n\n/**\n * Get the user's name `traits.name`, falling back to combining {@link\n * Identify#firstName} and {@link Identify#lastName} if possible.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @return {string}\n */\ni.name = function () {\n  let name = this.proxy(\"traits.name\");\n  if (typeof name === \"string\") {\n    return trim(name);\n  }\n\n  let firstName = this.firstName();\n  let lastName = this.lastName();\n  if (firstName && lastName) {\n    return trim(firstName + \" \" + lastName);\n  }\n};\n\n/**\n * Get the user's first name from `traits.firstName`, optionally splitting it\n * out of a the full name if that's all that was provided.\n *\n * Splitting the full name works on the assumption that the full name is of the\n * form \"FirstName LastName\"; it will not work for non-Western names.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @return {string}\n */\ni.firstName = function () {\n  let firstName = this.proxy(\"traits.firstName\");\n  if (typeof firstName === \"string\") {\n    return trim(firstName);\n  }\n\n  let name = this.proxy(\"traits.name\");\n  if (typeof name === \"string\") {\n    return trim(name).split(\" \")[0];\n  }\n};\n\n/**\n * Get the user's last name from `traits.lastName`, optionally splitting it out\n * of a the full name if that's all that was provided.\n *\n * Splitting the full name works on the assumption that the full name is of the\n * form \"FirstName LastName\"; it will not work for non-Western names.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @return {string}\n */\ni.lastName = function () {\n  let lastName = this.proxy(\"traits.lastName\");\n  if (typeof lastName === \"string\") {\n    return trim(lastName);\n  }\n\n  let name = this.proxy(\"traits.name\");\n  if (typeof name !== \"string\") {\n    return;\n  }\n\n  let space = trim(name).indexOf(\" \");\n  if (space === -1) {\n    return;\n  }\n\n  return trim(name.substr(space + 1));\n};\n\n/**\n * Get the user's \"unique id\" from `userId`, `traits.username`, or\n * `traits.email`.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @return {string}\n */\ni.uid = function () {\n  return this.userId() || this.username() || this.email();\n};\n\n/**\n * Get the user's description from `traits.description` or `traits.background`.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @return {string}\n */\ni.description = function () {\n  return this.proxy(\"traits.description\") || this.proxy(\"traits.background\");\n};\n\n/**\n * Get the user's age from `traits.age`, falling back to computing it from\n * `traits.birthday` and the current time.\n *\n * @return {number}\n */\ni.age = function () {\n  let date = this.birthday();\n  let age = get(this.traits(), \"age\");\n  if (age != null) return age;\n  if (!(date instanceof Date)) return;\n  let now = new Date();\n  return now.getFullYear() - date.getFullYear();\n};\n\n/**\n * Get the URL of the user's avatar from `traits.avatar`, `traits.photoUrl`, or\n * `traits.avatarUrl`.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @return {string}\n */\ni.avatar = function () {\n  let traits = this.traits();\n  return (\n    get(traits, \"avatar\") || get(traits, \"photoUrl\") || get(traits, \"avatarUrl\")\n  );\n};\n\n/**\n * Get the user's job position from `traits.position` or `traits.jobTitle`.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @return {string}\n */\ni.position = function () {\n  let traits = this.traits();\n  return get(traits, \"position\") || get(traits, \"jobTitle\");\n};\n\n/**\n * Get the user's username from `traits.username`.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @function\n * @return {string}\n */\ni.username = Facade.proxy(\"traits.username\");\n\n/**\n * Get the user's website from `traits.website`, or if there are multiple in\n * `traits.websites`, return the first one.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @function\n * @return {string}\n */\ni.website = Facade.one(\"traits.website\");\n\n/**\n * Get the user's websites from `traits.websites`, or if there is only one in\n * `traits.website`, then wrap it in an array.\n *\n * This *should* be an array of strings, but may not be if the client isn't\n * adhering to the spec.\n *\n * @function\n * @return {array}\n */\ni.websites = Facade.multi(\"traits.website\");\n\n/**\n * Get the user's phone number from `traits.phone`, or if there are multiple in\n * `traits.phones`, return the first one.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @function\n * @return {string}\n */\ni.phone = Facade.one(\"traits.phone\");\n\n/**\n * Get the user's phone numbers from `traits.phones`, or if there is only one\n * in `traits.phone`, then wrap it in an array.\n *\n * This *should* be an array of strings, but may not be if the client isn't\n * adhering to the spec.\n *\n * @function\n * @return {array}\n */\ni.phones = Facade.multi(\"traits.phone\");\n\n/**\n * Get the user's address from `traits.address`.\n *\n * This *should* be an object, but may not be if the client isn't adhering to\n * the spec.\n *\n * @function\n * @return {object}\n */\ni.address = Facade.proxy(\"traits.address\");\n\n/**\n * Get the user's gender from `traits.gender`.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @function\n * @return {string}\n */\ni.gender = Facade.proxy(\"traits.gender\");\n\n/**\n * Get the user's birthday from `traits.birthday`.\n *\n * This *should* be a Date if `opts.traverse` was enabled (it is by default)\n * when letructing this Identify. Otherwise, it should be a string. But it\n * may be neither if the client isn't adhering to the spec.\n * spec.\n *\n * @function\n * @return {object}\n */\ni.birthday = Facade.proxy(\"traits.birthday\");\n"]}