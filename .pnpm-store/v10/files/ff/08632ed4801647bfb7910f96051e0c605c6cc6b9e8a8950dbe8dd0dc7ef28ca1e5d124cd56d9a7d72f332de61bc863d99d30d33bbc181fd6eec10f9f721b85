{"version":3,"file":"vue-virtual-scroller.esm.js","sources":["../src/config.js","../src/scrollparent.js","../src/components/common.js","../src/utils.js","../src/components/RecycleScroller.vue","../src/components/RecycleScroller.vue?vue&type=template&id=093a936d&lang.js","../src/components/DynamicScroller.vue","../src/components/DynamicScroller.vue?vue&type=template&id=76e15f19&lang.js","../src/components/DynamicScrollerItem.vue","../src/mixins/IdState.js","../src/index.js"],"sourcesContent":["export default {\n  itemsLimit: 1000,\n}\n","// Fork of https://github.com/olahol/scrollparent.js to be able to build with Rollup\n\nconst regex = /(auto|scroll)/\n\nfunction parents (node, ps) {\n  if (node.parentNode === null) { return ps }\n\n  return parents(node.parentNode, ps.concat([node]))\n}\n\nconst style = function (node, prop) {\n  return getComputedStyle(node, null).getPropertyValue(prop)\n}\n\nconst overflow = function (node) {\n  return style(node, 'overflow') + style(node, 'overflow-y') + style(node, 'overflow-x')\n}\n\nconst scroll = function (node) {\n  return regex.test(overflow(node))\n}\n\nexport function getScrollParent (node) {\n  if (!(node instanceof HTMLElement || node instanceof SVGElement)) {\n    return\n  }\n\n  const ps = parents(node.parentNode, [])\n\n  for (let i = 0; i < ps.length; i += 1) {\n    if (scroll(ps[i])) {\n      return ps[i]\n    }\n  }\n\n  return document.scrollingElement || document.documentElement\n}\n","export const props = {\n  items: {\n    type: Array,\n    required: true,\n  },\n\n  keyField: {\n    type: String,\n    default: 'id',\n  },\n\n  direction: {\n    type: String,\n    default: 'vertical',\n    validator: (value) => ['vertical', 'horizontal'].includes(value),\n  },\n\n  listTag: {\n    type: String,\n    default: 'div',\n  },\n\n  itemTag: {\n    type: String,\n    default: 'div',\n  },\n}\n\nexport function simpleArray () {\n  return this.items.length && typeof this.items[0] !== 'object'\n}\n","export let supportsPassive = false\n\nif (typeof window !== 'undefined') {\n  supportsPassive = false\n  try {\n    const opts = Object.defineProperty({}, 'passive', {\n      get () {\n        supportsPassive = true\n      },\n    })\n    window.addEventListener('test', null, opts)\n  } catch (e) {}\n}\n","<template>\n  <div\n    v-observe-visibility=\"handleVisibilityChange\"\n    class=\"vue-recycle-scroller\"\n    :class=\"{\n      ready,\n      'page-mode': pageMode,\n      [`direction-${direction}`]: true,\n    }\"\n    @scroll.passive=\"handleScroll\"\n  >\n    <div\n      v-if=\"$slots.before\"\n      ref=\"before\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"before\"\n      />\n    </div>\n\n    <component\n      :is=\"listTag\"\n      ref=\"wrapper\"\n      :style=\"{ [direction === 'vertical' ? 'minHeight' : 'minWidth']: totalSize + 'px' }\"\n      class=\"vue-recycle-scroller__item-wrapper\"\n      :class=\"listClass\"\n    >\n      <component\n        :is=\"itemTag\"\n        v-for=\"view of pool\"\n        :key=\"view.nr.id\"\n        :style=\"ready ? {\n          transform: `translate${direction === 'vertical' ? 'Y' : 'X'}(${view.position}px) translate${direction === 'vertical' ? 'X' : 'Y'}(${view.offset}px)`,\n          width: gridItems ? `${direction === 'vertical' ? itemSecondarySize || itemSize : itemSize}px` : undefined,\n          height: gridItems ? `${direction === 'horizontal' ? itemSecondarySize || itemSize : itemSize}px` : undefined,\n        } : null\"\n        class=\"vue-recycle-scroller__item-view\"\n        :class=\"[\n          itemClass,\n          {\n            hover: !skipHover && hoverKey === view.nr.key\n          },\n        ]\"\n        v-on=\"skipHover ? {} : {\n          mouseenter: () => { hoverKey = view.nr.key },\n          mouseleave: () => { hoverKey = null },\n        }\"\n      >\n        <slot\n          :item=\"view.item\"\n          :index=\"view.nr.index\"\n          :active=\"view.nr.used\"\n        />\n      </component>\n\n      <slot\n        name=\"empty\"\n      />\n    </component>\n\n    <div\n      v-if=\"$slots.after\"\n      ref=\"after\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"after\"\n      />\n    </div>\n\n    <ResizeObserver @notify=\"handleResize\" />\n  </div>\n</template>\n\n<script>\nimport { shallowReactive, markRaw } from 'vue'\nimport { ResizeObserver } from 'vue-resize'\nimport { ObserveVisibility } from 'vue-observe-visibility'\nimport { getScrollParent } from '../scrollparent'\nimport config from '../config'\nimport { props, simpleArray } from './common'\nimport { supportsPassive } from '../utils'\n\nlet uid = 0\n\nexport default {\n  name: 'RecycleScroller',\n\n  components: {\n    ResizeObserver,\n  },\n\n  directives: {\n    ObserveVisibility,\n  },\n\n  props: {\n    ...props,\n\n    itemSize: {\n      type: Number,\n      default: null,\n    },\n\n    gridItems: {\n      type: Number,\n      default: undefined,\n    },\n\n    itemSecondarySize: {\n      type: Number,\n      default: undefined,\n    },\n\n    minItemSize: {\n      type: [Number, String],\n      default: null,\n    },\n\n    sizeField: {\n      type: String,\n      default: 'size',\n    },\n\n    typeField: {\n      type: String,\n      default: 'type',\n    },\n\n    buffer: {\n      type: Number,\n      default: 200,\n    },\n\n    pageMode: {\n      type: Boolean,\n      default: false,\n    },\n\n    prerender: {\n      type: Number,\n      default: 0,\n    },\n\n    emitUpdate: {\n      type: Boolean,\n      default: false,\n    },\n\n    updateInterval: {\n      type: Number,\n      default: 0,\n    },\n\n    skipHover: {\n      type: Boolean,\n      default: false,\n    },\n\n    listTag: {\n      type: String,\n      default: 'div',\n    },\n\n    itemTag: {\n      type: String,\n      default: 'div',\n    },\n\n    listClass: {\n      type: [String, Object, Array],\n      default: '',\n    },\n\n    itemClass: {\n      type: [String, Object, Array],\n      default: '',\n    },\n  },\n\n  emits: [\n    'resize',\n    'visible',\n    'hidden',\n    'update',\n    'scroll-start',\n    'scroll-end',\n  ],\n\n  data () {\n    return {\n      pool: [],\n      totalSize: 0,\n      ready: false,\n      hoverKey: null,\n    }\n  },\n\n  computed: {\n    sizes () {\n      if (this.itemSize === null) {\n        const sizes = {\n          '-1': { accumulator: 0 },\n        }\n        const items = this.items\n        const field = this.sizeField\n        const minItemSize = this.minItemSize\n        let computedMinSize = 10000\n        let accumulator = 0\n        let current\n        for (let i = 0, l = items.length; i < l; i++) {\n          current = items[i][field] || minItemSize\n          if (current < computedMinSize) {\n            computedMinSize = current\n          }\n          accumulator += current\n          sizes[i] = { accumulator, size: current }\n        }\n        // eslint-disable-next-line\n        this.$_computedMinItemSize = computedMinSize\n        return sizes\n      }\n      return []\n    },\n\n    simpleArray,\n\n    itemIndexByKey () {\n      const { keyField, items } = this\n      const result = {}\n      for (let i = 0, l = items.length; i < l; i++) {\n        result[items[i][keyField]] = i\n      }\n      return result\n    },\n  },\n\n  watch: {\n    items () {\n      this.updateVisibleItems(true)\n    },\n\n    pageMode () {\n      this.applyPageMode()\n      this.updateVisibleItems(false)\n    },\n\n    sizes: {\n      handler () {\n        this.updateVisibleItems(false)\n      },\n      deep: true,\n    },\n\n    gridItems () {\n      this.updateVisibleItems(true)\n    },\n\n    itemSecondarySize () {\n      this.updateVisibleItems(true)\n    },\n  },\n\n  created () {\n    this.$_startIndex = 0\n    this.$_endIndex = 0\n    this.$_views = new Map()\n    this.$_unusedViews = new Map()\n    this.$_scrollDirty = false\n    this.$_lastUpdateScrollPosition = 0\n\n    // In SSR mode, we also prerender the same number of item for the first render\n    // to avoir mismatch between server and client templates\n    if (this.prerender) {\n      this.$_prerender = true\n      this.updateVisibleItems(false)\n    }\n\n    if (this.gridItems && !this.itemSize) {\n      console.error('[vue-recycle-scroller] You must provide an itemSize when using gridItems')\n    }\n  },\n\n  mounted () {\n    this.applyPageMode()\n    this.$nextTick(() => {\n      // In SSR mode, render the real number of visible items\n      this.$_prerender = false\n      this.updateVisibleItems(true)\n      this.ready = true\n    })\n  },\n\n  activated () {\n    const lastPosition = this.$_lastUpdateScrollPosition\n    if (typeof lastPosition === 'number') {\n      this.$nextTick(() => {\n        this.scrollToPosition(lastPosition)\n      })\n    }\n  },\n\n  beforeUnmount () {\n    this.removeListeners()\n  },\n\n  methods: {\n    addView (pool, index, item, key, type) {\n      const nr = markRaw({\n        id: uid++,\n        index,\n        used: true,\n        key,\n        type,\n      })\n      const view = shallowReactive({\n        item,\n        position: 0,\n        nr,\n      })\n      pool.push(view)\n      return view\n    },\n\n    unuseView (view, fake = false) {\n      const unusedViews = this.$_unusedViews\n      const type = view.nr.type\n      let unusedPool = unusedViews.get(type)\n      if (!unusedPool) {\n        unusedPool = []\n        unusedViews.set(type, unusedPool)\n      }\n      unusedPool.push(view)\n      if (!fake) {\n        view.nr.used = false\n        view.position = -9999\n      }\n    },\n\n    handleResize () {\n      this.$emit('resize')\n      if (this.ready) this.updateVisibleItems(false)\n    },\n\n    handleScroll (event) {\n      if (!this.$_scrollDirty) {\n        this.$_scrollDirty = true\n        if (this.$_updateTimeout) return\n\n        const requestUpdate = () => requestAnimationFrame(() => {\n          this.$_scrollDirty = false\n          const { continuous } = this.updateVisibleItems(false, true)\n\n          // It seems sometimes chrome doesn't fire scroll event :/\n          // When non continous scrolling is ending, we force a refresh\n          if (!continuous) {\n            clearTimeout(this.$_refreshTimout)\n            this.$_refreshTimout = setTimeout(this.handleScroll, this.updateInterval + 100)\n          }\n        })\n\n        requestUpdate()\n\n        // Schedule the next update with throttling\n        if (this.updateInterval) {\n          this.$_updateTimeout = setTimeout(() => {\n            this.$_updateTimeout = 0\n            if (this.$_scrollDirty) requestUpdate()\n          }, this.updateInterval)\n        }\n      }\n    },\n\n    handleVisibilityChange (isVisible, entry) {\n      if (this.ready) {\n        if (isVisible || entry.boundingClientRect.width !== 0 || entry.boundingClientRect.height !== 0) {\n          this.$emit('visible')\n          requestAnimationFrame(() => {\n            this.updateVisibleItems(false)\n          })\n        } else {\n          this.$emit('hidden')\n        }\n      }\n    },\n\n    updateVisibleItems (checkItem, checkPositionDiff = false) {\n      const itemSize = this.itemSize\n      const gridItems = this.gridItems || 1\n      const itemSecondarySize = this.itemSecondarySize || itemSize\n      const minItemSize = this.$_computedMinItemSize\n      const typeField = this.typeField\n      const keyField = this.simpleArray ? null : this.keyField\n      const items = this.items\n      const count = items.length\n      const sizes = this.sizes\n      const views = this.$_views\n      const unusedViews = this.$_unusedViews\n      const pool = this.pool\n      const itemIndexByKey = this.itemIndexByKey\n      let startIndex, endIndex\n      let totalSize\n      let visibleStartIndex, visibleEndIndex\n\n      if (!count) {\n        startIndex = endIndex = visibleStartIndex = visibleEndIndex = totalSize = 0\n      } else if (this.$_prerender) {\n        startIndex = visibleStartIndex = 0\n        endIndex = visibleEndIndex = Math.min(this.prerender, items.length)\n        totalSize = null\n      } else {\n        const scroll = this.getScroll()\n\n        // Skip update if use hasn't scrolled enough\n        if (checkPositionDiff) {\n          let positionDiff = scroll.start - this.$_lastUpdateScrollPosition\n          if (positionDiff < 0) positionDiff = -positionDiff\n          if ((itemSize === null && positionDiff < minItemSize) || positionDiff < itemSize) {\n            return {\n              continuous: true,\n            }\n          }\n        }\n        this.$_lastUpdateScrollPosition = scroll.start\n\n        const buffer = this.buffer\n        scroll.start -= buffer\n        scroll.end += buffer\n\n        // account for leading slot\n        let beforeSize = 0\n        if (this.$refs.before) {\n          beforeSize = this.$refs.before.scrollHeight\n          scroll.start -= beforeSize\n        }\n\n        // account for trailing slot\n        if (this.$refs.after) {\n          const afterSize = this.$refs.after.scrollHeight\n          scroll.end += afterSize\n        }\n\n        // Variable size mode\n        if (itemSize === null) {\n          let h\n          let a = 0\n          let b = count - 1\n          let i = ~~(count / 2)\n          let oldI\n\n          // Searching for startIndex\n          do {\n            oldI = i\n            h = sizes[i].accumulator\n            if (h < scroll.start) {\n              a = i\n            } else if (i < count - 1 && sizes[i + 1].accumulator > scroll.start) {\n              b = i\n            }\n            i = ~~((a + b) / 2)\n          } while (i !== oldI)\n          i < 0 && (i = 0)\n          startIndex = i\n\n          // For container style\n          totalSize = sizes[count - 1].accumulator\n\n          // Searching for endIndex\n          for (endIndex = i; endIndex < count && sizes[endIndex].accumulator < scroll.end; endIndex++);\n          if (endIndex === -1) {\n            endIndex = items.length - 1\n          } else {\n            endIndex++\n            // Bounds\n            endIndex > count && (endIndex = count)\n          }\n\n          // search visible startIndex\n          for (visibleStartIndex = startIndex; visibleStartIndex < count && (beforeSize + sizes[visibleStartIndex].accumulator) < scroll.start; visibleStartIndex++);\n\n          // search visible endIndex\n          for (visibleEndIndex = visibleStartIndex; visibleEndIndex < count && (beforeSize + sizes[visibleEndIndex].accumulator) < scroll.end; visibleEndIndex++);\n        } else {\n          // Fixed size mode\n          startIndex = ~~(scroll.start / itemSize * gridItems)\n          const remainer = startIndex % gridItems\n          startIndex -= remainer\n          endIndex = Math.ceil(scroll.end / itemSize * gridItems)\n          visibleStartIndex = Math.max(0, Math.floor((scroll.start - beforeSize) / itemSize * gridItems))\n          visibleEndIndex = Math.floor((scroll.end - beforeSize) / itemSize * gridItems)\n\n          // Bounds\n          startIndex < 0 && (startIndex = 0)\n          endIndex > count && (endIndex = count)\n          visibleStartIndex < 0 && (visibleStartIndex = 0)\n          visibleEndIndex > count && (visibleEndIndex = count)\n\n          totalSize = Math.ceil(count / gridItems) * itemSize\n        }\n      }\n\n      if (endIndex - startIndex > config.itemsLimit) {\n        this.itemsLimitError()\n      }\n\n      this.totalSize = totalSize\n\n      let view\n\n      const continuous = startIndex <= this.$_endIndex && endIndex >= this.$_startIndex\n\n      // Unuse views that are no longer visible\n      if (continuous) {\n        for (let i = 0, l = pool.length; i < l; i++) {\n          view = pool[i]\n          if (view.nr.used) {\n            // Update view item index\n            if (checkItem) {\n              view.nr.index = itemIndexByKey[view.item[keyField]]\n            }\n\n            // Check if index is still in visible range\n            if (\n              view.nr.index == null ||\n              view.nr.index < startIndex ||\n              view.nr.index >= endIndex\n            ) {\n              this.unuseView(view)\n            }\n          }\n        }\n      }\n\n      const unusedIndex = continuous ? null : new Map()\n\n      let item, type\n      let v\n      for (let i = startIndex; i < endIndex; i++) {\n        item = items[i]\n        const key = keyField ? item[keyField] : item\n        if (key == null) {\n          throw new Error(`Key is ${key} on item (keyField is '${keyField}')`)\n        }\n        view = views.get(key)\n\n        if (!itemSize && !sizes[i].size) {\n          if (view) this.unuseView(view)\n          continue\n        }\n\n        type = item[typeField]\n\n        let unusedPool = unusedViews.get(type)\n        let newlyUsedView = false\n\n        // No view assigned to item\n        if (!view) {\n          if (continuous) {\n            // Reuse existing view\n            if (unusedPool && unusedPool.length) {\n              view = unusedPool.pop()\n            } else {\n              view = this.addView(pool, i, item, key, type)\n            }\n          } else {\n            // Use existing view\n            // We don't care if they are already used\n            // because we are not in continous scrolling\n            v = unusedIndex.get(type) || 0\n\n            if (!unusedPool || v >= unusedPool.length) {\n              view = this.addView(pool, i, item, key, type)\n              this.unuseView(view, true)\n              unusedPool = unusedViews.get(type)\n            }\n\n            view = unusedPool[v]\n            unusedIndex.set(type, v + 1)\n          }\n\n          // Assign view to item\n          views.delete(view.nr.key)\n          view.nr.used = true\n          view.nr.index = i\n          view.nr.key = key\n          view.nr.type = type\n          views.set(key, view)\n\n          newlyUsedView = true\n        } else {\n          // View already assigned to item\n          if (!view.nr.used) {\n            view.nr.used = true\n            newlyUsedView = true\n            if (unusedPool) {\n              const index = unusedPool.indexOf(view)\n              if (index !== -1) unusedPool.splice(index, 1)\n            }\n          }\n        }\n\n        // Always set item in case it's a new object with the same key\n        view.item = item\n\n        if (newlyUsedView) {\n          if (i === items.length - 1) this.$emit('scroll-end')\n          if (i === 0) this.$emit('scroll-start')\n        }\n\n        // Update position\n        if (itemSize === null) {\n          view.position = sizes[i - 1].accumulator\n          view.offset = 0\n        } else {\n          view.position = Math.floor(i / gridItems) * itemSize\n          view.offset = (i % gridItems) * itemSecondarySize\n        }\n      }\n\n      this.$_startIndex = startIndex\n      this.$_endIndex = endIndex\n\n      if (this.emitUpdate) this.$emit('update', startIndex, endIndex, visibleStartIndex, visibleEndIndex)\n\n      // After the user has finished scrolling\n      // Sort views so text selection is correct\n      clearTimeout(this.$_sortTimer)\n      this.$_sortTimer = setTimeout(this.sortViews, this.updateInterval + 300)\n\n      return {\n        continuous,\n      }\n    },\n\n    getListenerTarget () {\n      let target = getScrollParent(this.$el)\n      // Fix global scroll target for Chrome and Safari\n      if (window.document && (target === window.document.documentElement || target === window.document.body)) {\n        target = window\n      }\n      return target\n    },\n\n    getScroll () {\n      const { $el: el, direction } = this\n      const isVertical = direction === 'vertical'\n      let scrollState\n\n      if (this.pageMode) {\n        const bounds = el.getBoundingClientRect()\n        const boundsSize = isVertical ? bounds.height : bounds.width\n        let start = -(isVertical ? bounds.top : bounds.left)\n        let size = isVertical ? window.innerHeight : window.innerWidth\n        if (start < 0) {\n          size += start\n          start = 0\n        }\n        if (start + size > boundsSize) {\n          size = boundsSize - start\n        }\n        scrollState = {\n          start,\n          end: start + size,\n        }\n      } else if (isVertical) {\n        scrollState = {\n          start: el.scrollTop,\n          end: el.scrollTop + el.clientHeight,\n        }\n      } else {\n        scrollState = {\n          start: el.scrollLeft,\n          end: el.scrollLeft + el.clientWidth,\n        }\n      }\n\n      return scrollState\n    },\n\n    applyPageMode () {\n      if (this.pageMode) {\n        this.addListeners()\n      } else {\n        this.removeListeners()\n      }\n    },\n\n    addListeners () {\n      this.listenerTarget = this.getListenerTarget()\n      this.listenerTarget.addEventListener('scroll', this.handleScroll, supportsPassive\n        ? {\n            passive: true,\n          }\n        : false)\n      this.listenerTarget.addEventListener('resize', this.handleResize)\n    },\n\n    removeListeners () {\n      if (!this.listenerTarget) {\n        return\n      }\n\n      this.listenerTarget.removeEventListener('scroll', this.handleScroll)\n      this.listenerTarget.removeEventListener('resize', this.handleResize)\n\n      this.listenerTarget = null\n    },\n\n    scrollToItem (index) {\n      let scroll\n      const gridItems = this.gridItems || 1\n      if (this.itemSize === null) {\n        scroll = index > 0 ? this.sizes[index - 1].accumulator : 0\n      } else {\n        scroll = Math.floor(index / gridItems) * this.itemSize\n      }\n      this.scrollToPosition(scroll)\n    },\n\n    scrollToPosition (position) {\n      const direction = this.direction === 'vertical'\n        ? { scroll: 'scrollTop', start: 'top' }\n        : { scroll: 'scrollLeft', start: 'left' }\n\n      let viewport\n      let scrollDirection\n      let scrollDistance\n\n      if (this.pageMode) {\n        const viewportEl = getScrollParent(this.$el)\n        // HTML doesn't overflow like other elements\n        const scrollTop = viewportEl.tagName === 'HTML' ? 0 : viewportEl[direction.scroll]\n        const bounds = viewportEl.getBoundingClientRect()\n\n        const scroller = this.$el.getBoundingClientRect()\n        const scrollerPosition = scroller[direction.start] - bounds[direction.start]\n\n        viewport = viewportEl\n        scrollDirection = direction.scroll\n        scrollDistance = position + scrollTop + scrollerPosition\n      } else {\n        viewport = this.$el\n        scrollDirection = direction.scroll\n        scrollDistance = position\n      }\n\n      viewport[scrollDirection] = scrollDistance\n    },\n\n    itemsLimitError () {\n      setTimeout(() => {\n        console.log('It seems the scroller element isn\\'t scrolling, so it tries to render all the items at once.', 'Scroller:', this.$el)\n        console.log('Make sure the scroller has a fixed height (or width) and \\'overflow-y\\' (or \\'overflow-x\\') set to \\'auto\\' so it can scroll correctly and only render the items visible in the scroll viewport.')\n      })\n      throw new Error('Rendered items limit reached')\n    },\n\n    sortViews () {\n      this.pool.sort((viewA, viewB) => viewA.nr.index - viewB.nr.index)\n    },\n  },\n}\n</script>\n\n<style>\n.vue-recycle-scroller {\n  position: relative;\n}\n\n.vue-recycle-scroller.direction-vertical:not(.page-mode) {\n  overflow-y: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal:not(.page-mode) {\n  overflow-x: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal {\n  display: flex;\n}\n\n.vue-recycle-scroller__slot {\n  flex: auto 0 0;\n}\n\n.vue-recycle-scroller__item-wrapper {\n  flex: 1;\n  box-sizing: border-box;\n  overflow: hidden;\n  position: relative;\n}\n\n.vue-recycle-scroller.ready .vue-recycle-scroller__item-view {\n  position: absolute;\n  top: 0;\n  left: 0;\n  will-change: transform;\n}\n\n.vue-recycle-scroller.direction-vertical .vue-recycle-scroller__item-wrapper {\n  width: 100%;\n}\n\n.vue-recycle-scroller.direction-horizontal .vue-recycle-scroller__item-wrapper {\n  height: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-vertical .vue-recycle-scroller__item-view {\n  width: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-horizontal .vue-recycle-scroller__item-view {\n  height: 100%;\n}\n</style>\n","<template>\n  <div\n    v-observe-visibility=\"handleVisibilityChange\"\n    class=\"vue-recycle-scroller\"\n    :class=\"{\n      ready,\n      'page-mode': pageMode,\n      [`direction-${direction}`]: true,\n    }\"\n    @scroll.passive=\"handleScroll\"\n  >\n    <div\n      v-if=\"$slots.before\"\n      ref=\"before\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"before\"\n      />\n    </div>\n\n    <component\n      :is=\"listTag\"\n      ref=\"wrapper\"\n      :style=\"{ [direction === 'vertical' ? 'minHeight' : 'minWidth']: totalSize + 'px' }\"\n      class=\"vue-recycle-scroller__item-wrapper\"\n      :class=\"listClass\"\n    >\n      <component\n        :is=\"itemTag\"\n        v-for=\"view of pool\"\n        :key=\"view.nr.id\"\n        :style=\"ready ? {\n          transform: `translate${direction === 'vertical' ? 'Y' : 'X'}(${view.position}px) translate${direction === 'vertical' ? 'X' : 'Y'}(${view.offset}px)`,\n          width: gridItems ? `${direction === 'vertical' ? itemSecondarySize || itemSize : itemSize}px` : undefined,\n          height: gridItems ? `${direction === 'horizontal' ? itemSecondarySize || itemSize : itemSize}px` : undefined,\n        } : null\"\n        class=\"vue-recycle-scroller__item-view\"\n        :class=\"[\n          itemClass,\n          {\n            hover: !skipHover && hoverKey === view.nr.key\n          },\n        ]\"\n        v-on=\"skipHover ? {} : {\n          mouseenter: () => { hoverKey = view.nr.key },\n          mouseleave: () => { hoverKey = null },\n        }\"\n      >\n        <slot\n          :item=\"view.item\"\n          :index=\"view.nr.index\"\n          :active=\"view.nr.used\"\n        />\n      </component>\n\n      <slot\n        name=\"empty\"\n      />\n    </component>\n\n    <div\n      v-if=\"$slots.after\"\n      ref=\"after\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"after\"\n      />\n    </div>\n\n    <ResizeObserver @notify=\"handleResize\" />\n  </div>\n</template>\n\n<script>\nimport { shallowReactive, markRaw } from 'vue'\nimport { ResizeObserver } from 'vue-resize'\nimport { ObserveVisibility } from 'vue-observe-visibility'\nimport { getScrollParent } from '../scrollparent'\nimport config from '../config'\nimport { props, simpleArray } from './common'\nimport { supportsPassive } from '../utils'\n\nlet uid = 0\n\nexport default {\n  name: 'RecycleScroller',\n\n  components: {\n    ResizeObserver,\n  },\n\n  directives: {\n    ObserveVisibility,\n  },\n\n  props: {\n    ...props,\n\n    itemSize: {\n      type: Number,\n      default: null,\n    },\n\n    gridItems: {\n      type: Number,\n      default: undefined,\n    },\n\n    itemSecondarySize: {\n      type: Number,\n      default: undefined,\n    },\n\n    minItemSize: {\n      type: [Number, String],\n      default: null,\n    },\n\n    sizeField: {\n      type: String,\n      default: 'size',\n    },\n\n    typeField: {\n      type: String,\n      default: 'type',\n    },\n\n    buffer: {\n      type: Number,\n      default: 200,\n    },\n\n    pageMode: {\n      type: Boolean,\n      default: false,\n    },\n\n    prerender: {\n      type: Number,\n      default: 0,\n    },\n\n    emitUpdate: {\n      type: Boolean,\n      default: false,\n    },\n\n    updateInterval: {\n      type: Number,\n      default: 0,\n    },\n\n    skipHover: {\n      type: Boolean,\n      default: false,\n    },\n\n    listTag: {\n      type: String,\n      default: 'div',\n    },\n\n    itemTag: {\n      type: String,\n      default: 'div',\n    },\n\n    listClass: {\n      type: [String, Object, Array],\n      default: '',\n    },\n\n    itemClass: {\n      type: [String, Object, Array],\n      default: '',\n    },\n  },\n\n  emits: [\n    'resize',\n    'visible',\n    'hidden',\n    'update',\n    'scroll-start',\n    'scroll-end',\n  ],\n\n  data () {\n    return {\n      pool: [],\n      totalSize: 0,\n      ready: false,\n      hoverKey: null,\n    }\n  },\n\n  computed: {\n    sizes () {\n      if (this.itemSize === null) {\n        const sizes = {\n          '-1': { accumulator: 0 },\n        }\n        const items = this.items\n        const field = this.sizeField\n        const minItemSize = this.minItemSize\n        let computedMinSize = 10000\n        let accumulator = 0\n        let current\n        for (let i = 0, l = items.length; i < l; i++) {\n          current = items[i][field] || minItemSize\n          if (current < computedMinSize) {\n            computedMinSize = current\n          }\n          accumulator += current\n          sizes[i] = { accumulator, size: current }\n        }\n        // eslint-disable-next-line\n        this.$_computedMinItemSize = computedMinSize\n        return sizes\n      }\n      return []\n    },\n\n    simpleArray,\n\n    itemIndexByKey () {\n      const { keyField, items } = this\n      const result = {}\n      for (let i = 0, l = items.length; i < l; i++) {\n        result[items[i][keyField]] = i\n      }\n      return result\n    },\n  },\n\n  watch: {\n    items () {\n      this.updateVisibleItems(true)\n    },\n\n    pageMode () {\n      this.applyPageMode()\n      this.updateVisibleItems(false)\n    },\n\n    sizes: {\n      handler () {\n        this.updateVisibleItems(false)\n      },\n      deep: true,\n    },\n\n    gridItems () {\n      this.updateVisibleItems(true)\n    },\n\n    itemSecondarySize () {\n      this.updateVisibleItems(true)\n    },\n  },\n\n  created () {\n    this.$_startIndex = 0\n    this.$_endIndex = 0\n    this.$_views = new Map()\n    this.$_unusedViews = new Map()\n    this.$_scrollDirty = false\n    this.$_lastUpdateScrollPosition = 0\n\n    // In SSR mode, we also prerender the same number of item for the first render\n    // to avoir mismatch between server and client templates\n    if (this.prerender) {\n      this.$_prerender = true\n      this.updateVisibleItems(false)\n    }\n\n    if (this.gridItems && !this.itemSize) {\n      console.error('[vue-recycle-scroller] You must provide an itemSize when using gridItems')\n    }\n  },\n\n  mounted () {\n    this.applyPageMode()\n    this.$nextTick(() => {\n      // In SSR mode, render the real number of visible items\n      this.$_prerender = false\n      this.updateVisibleItems(true)\n      this.ready = true\n    })\n  },\n\n  activated () {\n    const lastPosition = this.$_lastUpdateScrollPosition\n    if (typeof lastPosition === 'number') {\n      this.$nextTick(() => {\n        this.scrollToPosition(lastPosition)\n      })\n    }\n  },\n\n  beforeUnmount () {\n    this.removeListeners()\n  },\n\n  methods: {\n    addView (pool, index, item, key, type) {\n      const nr = markRaw({\n        id: uid++,\n        index,\n        used: true,\n        key,\n        type,\n      })\n      const view = shallowReactive({\n        item,\n        position: 0,\n        nr,\n      })\n      pool.push(view)\n      return view\n    },\n\n    unuseView (view, fake = false) {\n      const unusedViews = this.$_unusedViews\n      const type = view.nr.type\n      let unusedPool = unusedViews.get(type)\n      if (!unusedPool) {\n        unusedPool = []\n        unusedViews.set(type, unusedPool)\n      }\n      unusedPool.push(view)\n      if (!fake) {\n        view.nr.used = false\n        view.position = -9999\n      }\n    },\n\n    handleResize () {\n      this.$emit('resize')\n      if (this.ready) this.updateVisibleItems(false)\n    },\n\n    handleScroll (event) {\n      if (!this.$_scrollDirty) {\n        this.$_scrollDirty = true\n        if (this.$_updateTimeout) return\n\n        const requestUpdate = () => requestAnimationFrame(() => {\n          this.$_scrollDirty = false\n          const { continuous } = this.updateVisibleItems(false, true)\n\n          // It seems sometimes chrome doesn't fire scroll event :/\n          // When non continous scrolling is ending, we force a refresh\n          if (!continuous) {\n            clearTimeout(this.$_refreshTimout)\n            this.$_refreshTimout = setTimeout(this.handleScroll, this.updateInterval + 100)\n          }\n        })\n\n        requestUpdate()\n\n        // Schedule the next update with throttling\n        if (this.updateInterval) {\n          this.$_updateTimeout = setTimeout(() => {\n            this.$_updateTimeout = 0\n            if (this.$_scrollDirty) requestUpdate()\n          }, this.updateInterval)\n        }\n      }\n    },\n\n    handleVisibilityChange (isVisible, entry) {\n      if (this.ready) {\n        if (isVisible || entry.boundingClientRect.width !== 0 || entry.boundingClientRect.height !== 0) {\n          this.$emit('visible')\n          requestAnimationFrame(() => {\n            this.updateVisibleItems(false)\n          })\n        } else {\n          this.$emit('hidden')\n        }\n      }\n    },\n\n    updateVisibleItems (checkItem, checkPositionDiff = false) {\n      const itemSize = this.itemSize\n      const gridItems = this.gridItems || 1\n      const itemSecondarySize = this.itemSecondarySize || itemSize\n      const minItemSize = this.$_computedMinItemSize\n      const typeField = this.typeField\n      const keyField = this.simpleArray ? null : this.keyField\n      const items = this.items\n      const count = items.length\n      const sizes = this.sizes\n      const views = this.$_views\n      const unusedViews = this.$_unusedViews\n      const pool = this.pool\n      const itemIndexByKey = this.itemIndexByKey\n      let startIndex, endIndex\n      let totalSize\n      let visibleStartIndex, visibleEndIndex\n\n      if (!count) {\n        startIndex = endIndex = visibleStartIndex = visibleEndIndex = totalSize = 0\n      } else if (this.$_prerender) {\n        startIndex = visibleStartIndex = 0\n        endIndex = visibleEndIndex = Math.min(this.prerender, items.length)\n        totalSize = null\n      } else {\n        const scroll = this.getScroll()\n\n        // Skip update if use hasn't scrolled enough\n        if (checkPositionDiff) {\n          let positionDiff = scroll.start - this.$_lastUpdateScrollPosition\n          if (positionDiff < 0) positionDiff = -positionDiff\n          if ((itemSize === null && positionDiff < minItemSize) || positionDiff < itemSize) {\n            return {\n              continuous: true,\n            }\n          }\n        }\n        this.$_lastUpdateScrollPosition = scroll.start\n\n        const buffer = this.buffer\n        scroll.start -= buffer\n        scroll.end += buffer\n\n        // account for leading slot\n        let beforeSize = 0\n        if (this.$refs.before) {\n          beforeSize = this.$refs.before.scrollHeight\n          scroll.start -= beforeSize\n        }\n\n        // account for trailing slot\n        if (this.$refs.after) {\n          const afterSize = this.$refs.after.scrollHeight\n          scroll.end += afterSize\n        }\n\n        // Variable size mode\n        if (itemSize === null) {\n          let h\n          let a = 0\n          let b = count - 1\n          let i = ~~(count / 2)\n          let oldI\n\n          // Searching for startIndex\n          do {\n            oldI = i\n            h = sizes[i].accumulator\n            if (h < scroll.start) {\n              a = i\n            } else if (i < count - 1 && sizes[i + 1].accumulator > scroll.start) {\n              b = i\n            }\n            i = ~~((a + b) / 2)\n          } while (i !== oldI)\n          i < 0 && (i = 0)\n          startIndex = i\n\n          // For container style\n          totalSize = sizes[count - 1].accumulator\n\n          // Searching for endIndex\n          for (endIndex = i; endIndex < count && sizes[endIndex].accumulator < scroll.end; endIndex++);\n          if (endIndex === -1) {\n            endIndex = items.length - 1\n          } else {\n            endIndex++\n            // Bounds\n            endIndex > count && (endIndex = count)\n          }\n\n          // search visible startIndex\n          for (visibleStartIndex = startIndex; visibleStartIndex < count && (beforeSize + sizes[visibleStartIndex].accumulator) < scroll.start; visibleStartIndex++);\n\n          // search visible endIndex\n          for (visibleEndIndex = visibleStartIndex; visibleEndIndex < count && (beforeSize + sizes[visibleEndIndex].accumulator) < scroll.end; visibleEndIndex++);\n        } else {\n          // Fixed size mode\n          startIndex = ~~(scroll.start / itemSize * gridItems)\n          const remainer = startIndex % gridItems\n          startIndex -= remainer\n          endIndex = Math.ceil(scroll.end / itemSize * gridItems)\n          visibleStartIndex = Math.max(0, Math.floor((scroll.start - beforeSize) / itemSize * gridItems))\n          visibleEndIndex = Math.floor((scroll.end - beforeSize) / itemSize * gridItems)\n\n          // Bounds\n          startIndex < 0 && (startIndex = 0)\n          endIndex > count && (endIndex = count)\n          visibleStartIndex < 0 && (visibleStartIndex = 0)\n          visibleEndIndex > count && (visibleEndIndex = count)\n\n          totalSize = Math.ceil(count / gridItems) * itemSize\n        }\n      }\n\n      if (endIndex - startIndex > config.itemsLimit) {\n        this.itemsLimitError()\n      }\n\n      this.totalSize = totalSize\n\n      let view\n\n      const continuous = startIndex <= this.$_endIndex && endIndex >= this.$_startIndex\n\n      // Unuse views that are no longer visible\n      if (continuous) {\n        for (let i = 0, l = pool.length; i < l; i++) {\n          view = pool[i]\n          if (view.nr.used) {\n            // Update view item index\n            if (checkItem) {\n              view.nr.index = itemIndexByKey[view.item[keyField]]\n            }\n\n            // Check if index is still in visible range\n            if (\n              view.nr.index == null ||\n              view.nr.index < startIndex ||\n              view.nr.index >= endIndex\n            ) {\n              this.unuseView(view)\n            }\n          }\n        }\n      }\n\n      const unusedIndex = continuous ? null : new Map()\n\n      let item, type\n      let v\n      for (let i = startIndex; i < endIndex; i++) {\n        item = items[i]\n        const key = keyField ? item[keyField] : item\n        if (key == null) {\n          throw new Error(`Key is ${key} on item (keyField is '${keyField}')`)\n        }\n        view = views.get(key)\n\n        if (!itemSize && !sizes[i].size) {\n          if (view) this.unuseView(view)\n          continue\n        }\n\n        type = item[typeField]\n\n        let unusedPool = unusedViews.get(type)\n        let newlyUsedView = false\n\n        // No view assigned to item\n        if (!view) {\n          if (continuous) {\n            // Reuse existing view\n            if (unusedPool && unusedPool.length) {\n              view = unusedPool.pop()\n            } else {\n              view = this.addView(pool, i, item, key, type)\n            }\n          } else {\n            // Use existing view\n            // We don't care if they are already used\n            // because we are not in continous scrolling\n            v = unusedIndex.get(type) || 0\n\n            if (!unusedPool || v >= unusedPool.length) {\n              view = this.addView(pool, i, item, key, type)\n              this.unuseView(view, true)\n              unusedPool = unusedViews.get(type)\n            }\n\n            view = unusedPool[v]\n            unusedIndex.set(type, v + 1)\n          }\n\n          // Assign view to item\n          views.delete(view.nr.key)\n          view.nr.used = true\n          view.nr.index = i\n          view.nr.key = key\n          view.nr.type = type\n          views.set(key, view)\n\n          newlyUsedView = true\n        } else {\n          // View already assigned to item\n          if (!view.nr.used) {\n            view.nr.used = true\n            newlyUsedView = true\n            if (unusedPool) {\n              const index = unusedPool.indexOf(view)\n              if (index !== -1) unusedPool.splice(index, 1)\n            }\n          }\n        }\n\n        // Always set item in case it's a new object with the same key\n        view.item = item\n\n        if (newlyUsedView) {\n          if (i === items.length - 1) this.$emit('scroll-end')\n          if (i === 0) this.$emit('scroll-start')\n        }\n\n        // Update position\n        if (itemSize === null) {\n          view.position = sizes[i - 1].accumulator\n          view.offset = 0\n        } else {\n          view.position = Math.floor(i / gridItems) * itemSize\n          view.offset = (i % gridItems) * itemSecondarySize\n        }\n      }\n\n      this.$_startIndex = startIndex\n      this.$_endIndex = endIndex\n\n      if (this.emitUpdate) this.$emit('update', startIndex, endIndex, visibleStartIndex, visibleEndIndex)\n\n      // After the user has finished scrolling\n      // Sort views so text selection is correct\n      clearTimeout(this.$_sortTimer)\n      this.$_sortTimer = setTimeout(this.sortViews, this.updateInterval + 300)\n\n      return {\n        continuous,\n      }\n    },\n\n    getListenerTarget () {\n      let target = getScrollParent(this.$el)\n      // Fix global scroll target for Chrome and Safari\n      if (window.document && (target === window.document.documentElement || target === window.document.body)) {\n        target = window\n      }\n      return target\n    },\n\n    getScroll () {\n      const { $el: el, direction } = this\n      const isVertical = direction === 'vertical'\n      let scrollState\n\n      if (this.pageMode) {\n        const bounds = el.getBoundingClientRect()\n        const boundsSize = isVertical ? bounds.height : bounds.width\n        let start = -(isVertical ? bounds.top : bounds.left)\n        let size = isVertical ? window.innerHeight : window.innerWidth\n        if (start < 0) {\n          size += start\n          start = 0\n        }\n        if (start + size > boundsSize) {\n          size = boundsSize - start\n        }\n        scrollState = {\n          start,\n          end: start + size,\n        }\n      } else if (isVertical) {\n        scrollState = {\n          start: el.scrollTop,\n          end: el.scrollTop + el.clientHeight,\n        }\n      } else {\n        scrollState = {\n          start: el.scrollLeft,\n          end: el.scrollLeft + el.clientWidth,\n        }\n      }\n\n      return scrollState\n    },\n\n    applyPageMode () {\n      if (this.pageMode) {\n        this.addListeners()\n      } else {\n        this.removeListeners()\n      }\n    },\n\n    addListeners () {\n      this.listenerTarget = this.getListenerTarget()\n      this.listenerTarget.addEventListener('scroll', this.handleScroll, supportsPassive\n        ? {\n            passive: true,\n          }\n        : false)\n      this.listenerTarget.addEventListener('resize', this.handleResize)\n    },\n\n    removeListeners () {\n      if (!this.listenerTarget) {\n        return\n      }\n\n      this.listenerTarget.removeEventListener('scroll', this.handleScroll)\n      this.listenerTarget.removeEventListener('resize', this.handleResize)\n\n      this.listenerTarget = null\n    },\n\n    scrollToItem (index) {\n      let scroll\n      const gridItems = this.gridItems || 1\n      if (this.itemSize === null) {\n        scroll = index > 0 ? this.sizes[index - 1].accumulator : 0\n      } else {\n        scroll = Math.floor(index / gridItems) * this.itemSize\n      }\n      this.scrollToPosition(scroll)\n    },\n\n    scrollToPosition (position) {\n      const direction = this.direction === 'vertical'\n        ? { scroll: 'scrollTop', start: 'top' }\n        : { scroll: 'scrollLeft', start: 'left' }\n\n      let viewport\n      let scrollDirection\n      let scrollDistance\n\n      if (this.pageMode) {\n        const viewportEl = getScrollParent(this.$el)\n        // HTML doesn't overflow like other elements\n        const scrollTop = viewportEl.tagName === 'HTML' ? 0 : viewportEl[direction.scroll]\n        const bounds = viewportEl.getBoundingClientRect()\n\n        const scroller = this.$el.getBoundingClientRect()\n        const scrollerPosition = scroller[direction.start] - bounds[direction.start]\n\n        viewport = viewportEl\n        scrollDirection = direction.scroll\n        scrollDistance = position + scrollTop + scrollerPosition\n      } else {\n        viewport = this.$el\n        scrollDirection = direction.scroll\n        scrollDistance = position\n      }\n\n      viewport[scrollDirection] = scrollDistance\n    },\n\n    itemsLimitError () {\n      setTimeout(() => {\n        console.log('It seems the scroller element isn\\'t scrolling, so it tries to render all the items at once.', 'Scroller:', this.$el)\n        console.log('Make sure the scroller has a fixed height (or width) and \\'overflow-y\\' (or \\'overflow-x\\') set to \\'auto\\' so it can scroll correctly and only render the items visible in the scroll viewport.')\n      })\n      throw new Error('Rendered items limit reached')\n    },\n\n    sortViews () {\n      this.pool.sort((viewA, viewB) => viewA.nr.index - viewB.nr.index)\n    },\n  },\n}\n</script>\n\n<style>\n.vue-recycle-scroller {\n  position: relative;\n}\n\n.vue-recycle-scroller.direction-vertical:not(.page-mode) {\n  overflow-y: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal:not(.page-mode) {\n  overflow-x: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal {\n  display: flex;\n}\n\n.vue-recycle-scroller__slot {\n  flex: auto 0 0;\n}\n\n.vue-recycle-scroller__item-wrapper {\n  flex: 1;\n  box-sizing: border-box;\n  overflow: hidden;\n  position: relative;\n}\n\n.vue-recycle-scroller.ready .vue-recycle-scroller__item-view {\n  position: absolute;\n  top: 0;\n  left: 0;\n  will-change: transform;\n}\n\n.vue-recycle-scroller.direction-vertical .vue-recycle-scroller__item-wrapper {\n  width: 100%;\n}\n\n.vue-recycle-scroller.direction-horizontal .vue-recycle-scroller__item-wrapper {\n  height: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-vertical .vue-recycle-scroller__item-view {\n  width: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-horizontal .vue-recycle-scroller__item-view {\n  height: 100%;\n}\n</style>\n","<template>\n  <RecycleScroller\n    ref=\"scroller\"\n    :items=\"itemsWithSize\"\n    :min-item-size=\"minItemSize\"\n    :direction=\"direction\"\n    key-field=\"id\"\n    :list-tag=\"listTag\"\n    :item-tag=\"itemTag\"\n    v-bind=\"$attrs\"\n    @resize=\"onScrollerResize\"\n    @visible=\"onScrollerVisible\"\n  >\n    <template #default=\"{ item: itemWithSize, index, active }\">\n      <slot\n        v-bind=\"{\n          item: itemWithSize.item,\n          index,\n          active,\n          itemWithSize\n        }\"\n      />\n    </template>\n    <template #before>\n      <slot name=\"before\" />\n    </template>\n    <template #after>\n      <slot name=\"after\" />\n    </template>\n    <template #empty>\n      <slot name=\"empty\" />\n    </template>\n  </RecycleScroller>\n</template>\n\n<script>\nimport mitt from 'mitt'\nimport RecycleScroller from './RecycleScroller.vue'\nimport { props, simpleArray } from './common'\n\nexport default {\n  name: 'DynamicScroller',\n\n  components: {\n    RecycleScroller,\n  },\n\n  provide () {\n    if (typeof ResizeObserver !== 'undefined') {\n      this.$_resizeObserver = new ResizeObserver(entries => {\n        requestAnimationFrame(() => {\n          if (!Array.isArray(entries)) {\n            return\n          }\n          for (const entry of entries) {\n            if (entry.target && entry.target.$_vs_onResize) {\n              let width, height\n              if (entry.borderBoxSize) {\n                const resizeObserverSize = entry.borderBoxSize[0]\n                width = resizeObserverSize.inlineSize\n                height = resizeObserverSize.blockSize\n              } else {\n                // @TODO remove when contentRect is deprecated\n                width = entry.contentRect.width\n                height = entry.contentRect.height\n              }\n              entry.target.$_vs_onResize(entry.target.$_vs_id, width, height)\n            }\n          }\n        })\n      })\n    }\n\n    return {\n      vscrollData: this.vscrollData,\n      vscrollParent: this,\n      vscrollResizeObserver: this.$_resizeObserver,\n    }\n  },\n\n  inheritAttrs: false,\n\n  props: {\n    ...props,\n\n    minItemSize: {\n      type: [Number, String],\n      required: true,\n    },\n  },\n\n  emits: [\n    'resize',\n    'visible',\n  ],\n\n  data () {\n    return {\n      vscrollData: {\n        active: true,\n        sizes: {},\n        keyField: this.keyField,\n        simpleArray: false,\n      },\n    }\n  },\n\n  computed: {\n    simpleArray,\n\n    itemsWithSize () {\n      const result = []\n      const { items, keyField, simpleArray } = this\n      const sizes = this.vscrollData.sizes\n      const l = items.length\n      for (let i = 0; i < l; i++) {\n        const item = items[i]\n        const id = simpleArray ? i : item[keyField]\n        let size = sizes[id]\n        if (typeof size === 'undefined' && !this.$_undefinedMap[id]) {\n          size = 0\n        }\n        result.push({\n          item,\n          id,\n          size,\n        })\n      }\n      return result\n    },\n  },\n\n  watch: {\n    items () {\n      this.forceUpdate()\n    },\n\n    simpleArray: {\n      handler (value) {\n        this.vscrollData.simpleArray = value\n      },\n      immediate: true,\n    },\n\n    direction (value) {\n      this.forceUpdate(true)\n    },\n\n    itemsWithSize (next, prev) {\n      const scrollTop = this.$el.scrollTop\n\n      // Calculate total diff between prev and next sizes\n      // over current scroll top. Then add it to scrollTop to\n      // avoid jumping the contents that the user is seeing.\n      let prevActiveTop = 0; let activeTop = 0\n      const length = Math.min(next.length, prev.length)\n      for (let i = 0; i < length; i++) {\n        if (prevActiveTop >= scrollTop) {\n          break\n        }\n        prevActiveTop += prev[i].size || this.minItemSize\n        activeTop += next[i].size || this.minItemSize\n      }\n      const offset = activeTop - prevActiveTop\n\n      if (offset === 0) {\n        return\n      }\n\n      this.$el.scrollTop += offset\n    },\n  },\n\n  beforeCreate () {\n    this.$_updates = []\n    this.$_undefinedSizes = 0\n    this.$_undefinedMap = {}\n    this.$_events = mitt()\n  },\n\n  activated () {\n    this.vscrollData.active = true\n  },\n\n  deactivated () {\n    this.vscrollData.active = false\n  },\n\n  unmounted () {\n    this.$_events.all.clear()\n  },\n\n  methods: {\n    onScrollerResize () {\n      const scroller = this.$refs.scroller\n      if (scroller) {\n        this.forceUpdate()\n      }\n      this.$emit('resize')\n    },\n\n    onScrollerVisible () {\n      this.$_events.emit('vscroll:update', { force: false })\n      this.$emit('visible')\n    },\n\n    forceUpdate (clear = false) {\n      if (clear || this.simpleArray) {\n        this.vscrollData.sizes = {}\n      }\n      this.$_events.emit('vscroll:update', { force: true })\n    },\n\n    scrollToItem (index) {\n      const scroller = this.$refs.scroller\n      if (scroller) scroller.scrollToItem(index)\n    },\n\n    getItemSize (item, index = undefined) {\n      const id = this.simpleArray ? (index != null ? index : this.items.indexOf(item)) : item[this.keyField]\n      return this.vscrollData.sizes[id] || 0\n    },\n\n    scrollToBottom () {\n      if (this.$_scrollingToBottom) return\n      this.$_scrollingToBottom = true\n      const el = this.$el\n      // Item is inserted to the DOM\n      this.$nextTick(() => {\n        el.scrollTop = el.scrollHeight + 5000\n        // Item sizes are computed\n        const cb = () => {\n          el.scrollTop = el.scrollHeight + 5000\n          requestAnimationFrame(() => {\n            el.scrollTop = el.scrollHeight + 5000\n            if (this.$_undefinedSizes === 0) {\n              this.$_scrollingToBottom = false\n            } else {\n              requestAnimationFrame(cb)\n            }\n          })\n        }\n        requestAnimationFrame(cb)\n      })\n    },\n  },\n}\n</script>\n","<template>\n  <RecycleScroller\n    ref=\"scroller\"\n    :items=\"itemsWithSize\"\n    :min-item-size=\"minItemSize\"\n    :direction=\"direction\"\n    key-field=\"id\"\n    :list-tag=\"listTag\"\n    :item-tag=\"itemTag\"\n    v-bind=\"$attrs\"\n    @resize=\"onScrollerResize\"\n    @visible=\"onScrollerVisible\"\n  >\n    <template #default=\"{ item: itemWithSize, index, active }\">\n      <slot\n        v-bind=\"{\n          item: itemWithSize.item,\n          index,\n          active,\n          itemWithSize\n        }\"\n      />\n    </template>\n    <template #before>\n      <slot name=\"before\" />\n    </template>\n    <template #after>\n      <slot name=\"after\" />\n    </template>\n    <template #empty>\n      <slot name=\"empty\" />\n    </template>\n  </RecycleScroller>\n</template>\n\n<script>\nimport mitt from 'mitt'\nimport RecycleScroller from './RecycleScroller.vue'\nimport { props, simpleArray } from './common'\n\nexport default {\n  name: 'DynamicScroller',\n\n  components: {\n    RecycleScroller,\n  },\n\n  provide () {\n    if (typeof ResizeObserver !== 'undefined') {\n      this.$_resizeObserver = new ResizeObserver(entries => {\n        requestAnimationFrame(() => {\n          if (!Array.isArray(entries)) {\n            return\n          }\n          for (const entry of entries) {\n            if (entry.target && entry.target.$_vs_onResize) {\n              let width, height\n              if (entry.borderBoxSize) {\n                const resizeObserverSize = entry.borderBoxSize[0]\n                width = resizeObserverSize.inlineSize\n                height = resizeObserverSize.blockSize\n              } else {\n                // @TODO remove when contentRect is deprecated\n                width = entry.contentRect.width\n                height = entry.contentRect.height\n              }\n              entry.target.$_vs_onResize(entry.target.$_vs_id, width, height)\n            }\n          }\n        })\n      })\n    }\n\n    return {\n      vscrollData: this.vscrollData,\n      vscrollParent: this,\n      vscrollResizeObserver: this.$_resizeObserver,\n    }\n  },\n\n  inheritAttrs: false,\n\n  props: {\n    ...props,\n\n    minItemSize: {\n      type: [Number, String],\n      required: true,\n    },\n  },\n\n  emits: [\n    'resize',\n    'visible',\n  ],\n\n  data () {\n    return {\n      vscrollData: {\n        active: true,\n        sizes: {},\n        keyField: this.keyField,\n        simpleArray: false,\n      },\n    }\n  },\n\n  computed: {\n    simpleArray,\n\n    itemsWithSize () {\n      const result = []\n      const { items, keyField, simpleArray } = this\n      const sizes = this.vscrollData.sizes\n      const l = items.length\n      for (let i = 0; i < l; i++) {\n        const item = items[i]\n        const id = simpleArray ? i : item[keyField]\n        let size = sizes[id]\n        if (typeof size === 'undefined' && !this.$_undefinedMap[id]) {\n          size = 0\n        }\n        result.push({\n          item,\n          id,\n          size,\n        })\n      }\n      return result\n    },\n  },\n\n  watch: {\n    items () {\n      this.forceUpdate()\n    },\n\n    simpleArray: {\n      handler (value) {\n        this.vscrollData.simpleArray = value\n      },\n      immediate: true,\n    },\n\n    direction (value) {\n      this.forceUpdate(true)\n    },\n\n    itemsWithSize (next, prev) {\n      const scrollTop = this.$el.scrollTop\n\n      // Calculate total diff between prev and next sizes\n      // over current scroll top. Then add it to scrollTop to\n      // avoid jumping the contents that the user is seeing.\n      let prevActiveTop = 0; let activeTop = 0\n      const length = Math.min(next.length, prev.length)\n      for (let i = 0; i < length; i++) {\n        if (prevActiveTop >= scrollTop) {\n          break\n        }\n        prevActiveTop += prev[i].size || this.minItemSize\n        activeTop += next[i].size || this.minItemSize\n      }\n      const offset = activeTop - prevActiveTop\n\n      if (offset === 0) {\n        return\n      }\n\n      this.$el.scrollTop += offset\n    },\n  },\n\n  beforeCreate () {\n    this.$_updates = []\n    this.$_undefinedSizes = 0\n    this.$_undefinedMap = {}\n    this.$_events = mitt()\n  },\n\n  activated () {\n    this.vscrollData.active = true\n  },\n\n  deactivated () {\n    this.vscrollData.active = false\n  },\n\n  unmounted () {\n    this.$_events.all.clear()\n  },\n\n  methods: {\n    onScrollerResize () {\n      const scroller = this.$refs.scroller\n      if (scroller) {\n        this.forceUpdate()\n      }\n      this.$emit('resize')\n    },\n\n    onScrollerVisible () {\n      this.$_events.emit('vscroll:update', { force: false })\n      this.$emit('visible')\n    },\n\n    forceUpdate (clear = false) {\n      if (clear || this.simpleArray) {\n        this.vscrollData.sizes = {}\n      }\n      this.$_events.emit('vscroll:update', { force: true })\n    },\n\n    scrollToItem (index) {\n      const scroller = this.$refs.scroller\n      if (scroller) scroller.scrollToItem(index)\n    },\n\n    getItemSize (item, index = undefined) {\n      const id = this.simpleArray ? (index != null ? index : this.items.indexOf(item)) : item[this.keyField]\n      return this.vscrollData.sizes[id] || 0\n    },\n\n    scrollToBottom () {\n      if (this.$_scrollingToBottom) return\n      this.$_scrollingToBottom = true\n      const el = this.$el\n      // Item is inserted to the DOM\n      this.$nextTick(() => {\n        el.scrollTop = el.scrollHeight + 5000\n        // Item sizes are computed\n        const cb = () => {\n          el.scrollTop = el.scrollHeight + 5000\n          requestAnimationFrame(() => {\n            el.scrollTop = el.scrollHeight + 5000\n            if (this.$_undefinedSizes === 0) {\n              this.$_scrollingToBottom = false\n            } else {\n              requestAnimationFrame(cb)\n            }\n          })\n        }\n        requestAnimationFrame(cb)\n      })\n    },\n  },\n}\n</script>\n","<script>\nimport { h } from 'vue'\n\nexport default {\n  name: 'DynamicScrollerItem',\n\n  inject: [\n    'vscrollData',\n    'vscrollParent',\n    'vscrollResizeObserver',\n  ],\n\n  props: {\n    // eslint-disable-next-line vue/require-prop-types\n    item: {\n      required: true,\n    },\n\n    watchData: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Indicates if the view is actively used to display an item.\n     */\n    active: {\n      type: Boolean,\n      required: true,\n    },\n\n    index: {\n      type: Number,\n      default: undefined,\n    },\n\n    sizeDependencies: {\n      type: [Array, Object],\n      default: null,\n    },\n\n    emitResize: {\n      type: Boolean,\n      default: false,\n    },\n\n    tag: {\n      type: String,\n      default: 'div',\n    },\n  },\n\n  emits: [\n    'resize',\n  ],\n\n  computed: {\n    id () {\n      if (this.vscrollData.simpleArray) return this.index\n      // eslint-disable-next-line no-prototype-builtins\n      if (this.vscrollData.keyField in this.item) return this.item[this.vscrollData.keyField]\n      throw new Error(`keyField '${this.vscrollData.keyField}' not found in your item. You should set a valid keyField prop on your Scroller`)\n    },\n\n    size () {\n      return this.vscrollData.sizes[this.id] || 0\n    },\n\n    finalActive () {\n      return this.active && this.vscrollData.active\n    },\n  },\n\n  watch: {\n    watchData: 'updateWatchData',\n\n    id (value, oldValue) {\n      this.$el.$_vs_id = this.id\n      if (!this.size) {\n        this.onDataUpdate()\n      }\n\n      if (this.$_sizeObserved) {\n        // In case the old item had the same size, it won't trigger the ResizeObserver\n        // since we are reusing the same DOM node\n        const oldSize = this.vscrollData.sizes[oldValue]\n        const size = this.vscrollData.sizes[value]\n        if (oldSize != null && oldSize !== size) {\n          this.applySize(oldSize)\n        }\n      }\n    },\n\n    finalActive (value) {\n      if (!this.size) {\n        if (value) {\n          if (!this.vscrollParent.$_undefinedMap[this.id]) {\n            this.vscrollParent.$_undefinedSizes++\n            this.vscrollParent.$_undefinedMap[this.id] = true\n          }\n        } else {\n          if (this.vscrollParent.$_undefinedMap[this.id]) {\n            this.vscrollParent.$_undefinedSizes--\n            this.vscrollParent.$_undefinedMap[this.id] = false\n          }\n        }\n      }\n\n      if (this.vscrollResizeObserver) {\n        if (value) {\n          this.observeSize()\n        } else {\n          this.unobserveSize()\n        }\n      } else if (value && this.$_pendingVScrollUpdate === this.id) {\n        this.updateSize()\n      }\n    },\n  },\n\n  created () {\n    if (this.$isServer) return\n\n    this.$_forceNextVScrollUpdate = null\n    this.updateWatchData()\n\n    if (!this.vscrollResizeObserver) {\n      for (const k in this.sizeDependencies) {\n        this.$watch(() => this.sizeDependencies[k], this.onDataUpdate)\n      }\n\n      this.vscrollParent.$_events.on('vscroll:update', this.onVscrollUpdate)\n    }\n  },\n\n  mounted () {\n    if (this.finalActive) {\n      this.updateSize()\n      this.observeSize()\n    }\n  },\n\n  beforeUnmount () {\n    this.vscrollParent.$_events.off('vscroll:update', this.onVscrollUpdate)\n    this.unobserveSize()\n  },\n\n  methods: {\n    updateSize () {\n      if (this.finalActive) {\n        if (this.$_pendingSizeUpdate !== this.id) {\n          this.$_pendingSizeUpdate = this.id\n          this.$_forceNextVScrollUpdate = null\n          this.$_pendingVScrollUpdate = null\n          this.computeSize(this.id)\n        }\n      } else {\n        this.$_forceNextVScrollUpdate = this.id\n      }\n    },\n\n    updateWatchData () {\n      if (this.watchData && !this.vscrollResizeObserver) {\n        this.$_watchData = this.$watch('item', () => {\n          this.onDataUpdate()\n        }, {\n          deep: true,\n        })\n      } else if (this.$_watchData) {\n        this.$_watchData()\n        this.$_watchData = null\n      }\n    },\n\n    onVscrollUpdate ({ force }) {\n      // If not active, sechedule a size update when it becomes active\n      if (!this.finalActive && force) {\n        this.$_pendingVScrollUpdate = this.id\n      }\n\n      if (this.$_forceNextVScrollUpdate === this.id || force || !this.size) {\n        this.updateSize()\n      }\n    },\n\n    onDataUpdate () {\n      this.updateSize()\n    },\n\n    computeSize (id) {\n      this.$nextTick(() => {\n        if (this.id === id) {\n          const width = this.$el.offsetWidth\n          const height = this.$el.offsetHeight\n          this.applyWidthHeight(width, height)\n        }\n        this.$_pendingSizeUpdate = null\n      })\n    },\n\n    applyWidthHeight (width, height) {\n      const size = ~~(this.vscrollParent.direction === 'vertical' ? height : width)\n      if (size && this.size !== size) {\n        this.applySize(size)\n      }\n    },\n\n    applySize (size) {\n      if (this.vscrollParent.$_undefinedMap[this.id]) {\n        this.vscrollParent.$_undefinedSizes--\n        this.vscrollParent.$_undefinedMap[this.id] = undefined\n      }\n      this.vscrollData.sizes[this.id] = size\n      if (this.emitResize) this.$emit('resize', this.id)\n    },\n\n    observeSize () {\n      if (!this.vscrollResizeObserver) return\n      if (this.$_sizeObserved) return\n      this.vscrollResizeObserver.observe(this.$el)\n      this.$el.$_vs_id = this.id\n      this.$el.$_vs_onResize = this.onResize\n      this.$_sizeObserved = true\n    },\n\n    unobserveSize () {\n      if (!this.vscrollResizeObserver) return\n      if (!this.$_sizeObserved) return\n      this.vscrollResizeObserver.unobserve(this.$el)\n      this.$el.$_vs_onResize = undefined\n      this.$_sizeObserved = false\n    },\n\n    onResize (id, width, height) {\n      if (this.id === id) {\n        this.applyWidthHeight(width, height)\n      }\n    },\n  },\n\n  render () {\n    return h(this.tag, this.$slots.default())\n  },\n}\n</script>\n","import { reactive } from 'vue'\n\nexport default function ({\n  idProp = vm => vm.item.id,\n} = {}) {\n  const store = reactive({})\n\n  // @vue/component\n  return {\n    data () {\n      return {\n        idState: null,\n      }\n    },\n\n    created () {\n      this.$_id = null\n      if (typeof idProp === 'function') {\n        this.$_getId = () => idProp.call(this, this)\n      } else {\n        this.$_getId = () => this[idProp]\n      }\n      this.$watch(this.$_getId, {\n        handler (value) {\n          this.$nextTick(() => {\n            this.$_id = value\n          })\n        },\n        immediate: true,\n      })\n      this.$_updateIdState()\n    },\n\n    beforeUpdate () {\n      this.$_updateIdState()\n    },\n\n    methods: {\n      /**\n       * Initialize an idState\n       * @param {number|string} id Unique id for the data\n       */\n      $_idStateInit (id) {\n        const factory = this.$options.idState\n        if (typeof factory === 'function') {\n          const data = factory.call(this, this)\n          store[id] = data\n          this.$_id = id\n          return data\n        } else {\n          throw new Error('[mixin IdState] Missing `idState` function on component definition.')\n        }\n      },\n\n      /**\n       * Ensure idState is created and up-to-date\n       */\n      $_updateIdState () {\n        const id = this.$_getId()\n        if (id == null) {\n          console.warn(`No id found for IdState with idProp: '${idProp}'.`)\n        }\n        if (id !== this.$_id) {\n          if (!store[id]) {\n            this.$_idStateInit(id)\n          }\n          this.idState = store[id]\n        }\n      },\n    },\n  }\n}\n","import config from './config'\n\nimport RecycleScroller from './components/RecycleScroller.vue'\nimport DynamicScroller from './components/DynamicScroller.vue'\nimport DynamicScrollerItem from './components/DynamicScrollerItem.vue'\n\nexport { default as IdState } from './mixins/IdState'\n\nexport {\n  RecycleScroller,\n  DynamicScroller,\n  DynamicScrollerItem,\n}\n\nfunction registerComponents (app, prefix) {\n  app.component(`${prefix}recycle-scroller`, RecycleScroller)\n  app.component(`${prefix}RecycleScroller`, RecycleScroller)\n  app.component(`${prefix}dynamic-scroller`, DynamicScroller)\n  app.component(`${prefix}DynamicScroller`, DynamicScroller)\n  app.component(`${prefix}dynamic-scroller-item`, DynamicScrollerItem)\n  app.component(`${prefix}DynamicScrollerItem`, DynamicScrollerItem)\n}\n\nconst plugin = {\n  // eslint-disable-next-line no-undef\n  version: VERSION,\n  install (app, options) {\n    const finalOptions = Object.assign({}, {\n      installComponents: true,\n      componentsPrefix: '',\n    }, options)\n\n    for (const key in finalOptions) {\n      if (typeof finalOptions[key] !== 'undefined') {\n        config[key] = finalOptions[key]\n      }\n    }\n\n    if (finalOptions.installComponents) {\n      registerComponents(app, finalOptions.componentsPrefix)\n    }\n  },\n}\n\nexport default plugin\n"],"names":["itemsLimit","regex","parents","node","ps","parentNode","concat","style","prop","getComputedStyle","getPropertyValue","overflow","scroll","test","getScrollParent","HTMLElement","SVGElement","i","length","document","scrollingElement","documentElement","props","items","type","Array","required","keyField","String","default","direction","validator","value","includes","listTag","itemTag","simpleArray","supportsPassive","window","opts","Object","defineProperty","get","addEventListener","e","ResizeObserver","_createElementBlock","_openBlock","_renderSlot","_createBlock","_resolveDynamicComponent","_normalizeStyle","_normalizeClass","_Fragment","_renderList","_mergeProps","_toHandlers","_createVNode","RecycleScroller","_normalizeProps","_guardReactiveProps","idProp","vm","item","id","store","reactive","data","idState","created","$_id","$_getId","call","$watch","handler","$nextTick","immediate","$_updateIdState","beforeUpdate","methods","$_idStateInit","factory","$options","Error","console","warn","registerComponents","app","prefix","component","DynamicScroller","DynamicScrollerItem","plugin","version","VERSION","install","options","finalOptions","assign","installComponents","componentsPrefix","key","config"],"mappings":";;;;;AAAA,aAAe;AACbA,EAAAA,UAAU,EAAE,IAAA;AACd,CAAC;;ACFD;;AAEA,IAAMC,KAAK,GAAG,eAAe,CAAA;AAE7B,SAASC,OAAO,CAAEC,IAAI,EAAEC,EAAE,EAAE;AAC1B,EAAA,IAAID,IAAI,CAACE,UAAU,KAAK,IAAI,EAAE;AAAE,IAAA,OAAOD,EAAE,CAAA;AAAC,GAAA;AAE1C,EAAA,OAAOF,OAAO,CAACC,IAAI,CAACE,UAAU,EAAED,EAAE,CAACE,MAAM,CAAC,CAACH,IAAI,CAAC,CAAC,CAAC,CAAA;AACpD,CAAA;AAEA,IAAMI,KAAK,GAAG,SAARA,KAAK,CAAaJ,IAAI,EAAEK,IAAI,EAAE;EAClC,OAAOC,gBAAgB,CAACN,IAAI,EAAE,IAAI,CAAC,CAACO,gBAAgB,CAACF,IAAI,CAAC,CAAA;AAC5D,CAAC,CAAA;AAED,IAAMG,QAAQ,GAAG,SAAXA,QAAQ,CAAaR,IAAI,EAAE;AAC/B,EAAA,OAAOI,KAAK,CAACJ,IAAI,EAAE,UAAU,CAAC,GAAGI,KAAK,CAACJ,IAAI,EAAE,YAAY,CAAC,GAAGI,KAAK,CAACJ,IAAI,EAAE,YAAY,CAAC,CAAA;AACxF,CAAC,CAAA;AAED,IAAMS,MAAM,GAAG,SAATA,MAAM,CAAaT,IAAI,EAAE;EAC7B,OAAOF,KAAK,CAACY,IAAI,CAACF,QAAQ,CAACR,IAAI,CAAC,CAAC,CAAA;AACnC,CAAC,CAAA;AAEM,SAASW,eAAe,CAAEX,IAAI,EAAE;EACrC,IAAI,EAAEA,IAAI,YAAYY,WAAW,IAAIZ,IAAI,YAAYa,UAAU,CAAC,EAAE;AAChE,IAAA,OAAA;AACF,GAAA;EAEA,IAAMZ,EAAE,GAAGF,OAAO,CAACC,IAAI,CAACE,UAAU,EAAE,EAAE,CAAC,CAAA;AAEvC,EAAA,KAAK,IAAIY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,EAAE,CAACc,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;AACrC,IAAA,IAAIL,MAAM,CAACR,EAAE,CAACa,CAAC,CAAC,CAAC,EAAE;MACjB,OAAOb,EAAE,CAACa,CAAC,CAAC,CAAA;AACd,KAAA;AACF,GAAA;AAEA,EAAA,OAAOE,QAAQ,CAACC,gBAAgB,IAAID,QAAQ,CAACE,eAAe,CAAA;AAC9D;;;;;;;;;;;;ACpCO,IAAMC,KAAK,GAAG;AACnBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI,EAAEC,KAAK;AACXC,IAAAA,QAAQ,EAAE,IAAA;GACX;AAEDC,EAAAA,QAAQ,EAAE;AACRH,IAAAA,IAAI,EAAEI,MAAM;AACZC,IAAAA,OAAO,EAAE,IAAA;GACV;AAEDC,EAAAA,SAAS,EAAE;AACTN,IAAAA,IAAI,EAAEI,MAAM;AACZC,IAAAA,OAAO,EAAE,UAAU;IACnBE,SAAS,EAAE,mBAACC,KAAK,EAAA;MAAA,OAAK,CAAC,UAAU,EAAE,YAAY,CAAC,CAACC,QAAQ,CAACD,KAAK,CAAC,CAAA;AAAA,KAAA;GACjE;AAEDE,EAAAA,OAAO,EAAE;AACPV,IAAAA,IAAI,EAAEI,MAAM;AACZC,IAAAA,OAAO,EAAE,KAAA;GACV;AAEDM,EAAAA,OAAO,EAAE;AACPX,IAAAA,IAAI,EAAEI,MAAM;AACZC,IAAAA,OAAO,EAAE,KAAA;AACX,GAAA;AACF,CAAC,CAAA;AAEM,SAASO,WAAW,GAAI;AAC7B,EAAA,OAAO,IAAI,CAACb,KAAK,CAACL,MAAM,IAAI,OAAA,CAAO,IAAI,CAACK,KAAK,CAAC,CAAC,CAAC,MAAK,QAAQ,CAAA;AAC/D;;AC9BO,IAAIc,eAAe,GAAG,KAAK,CAAA;AAElC,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;AACjCD,EAAAA,eAAe,GAAG,KAAK,CAAA;EACvB,IAAI;IACF,IAAME,IAAI,GAAGC,MAAM,CAACC,cAAc,CAAC,EAAE,EAAE,SAAS,EAAE;AAChDC,MAAAA,GAAG,EAAI,SAAA,GAAA,GAAA;AACLL,QAAAA,eAAe,GAAG,IAAI,CAAA;AACxB,OAAA;AACF,KAAC,CAAC,CAAA;IACFC,MAAM,CAACK,gBAAgB,CAAC,MAAM,EAAE,IAAI,EAAEJ,IAAI,CAAC,CAAA;AAC7C,GAAC,CAAC,OAAOK,CAAC,EAAE,EAAC;AACf;;ACwEA,IAAI,MAAM,EAAA;;AAEV,eAAe;EACb,IAAI,EAAE,iBAAiB;;EAEvB,UAAU,EAAE;AACV,oBAAAC,gBAAc;GACf;;EAED,UAAU,EAAE;AACV,IAAA,iBAAiB;GAClB;;AAED,EAAA,KAAK,EAAE;AACL,IAAA,GAAG,KAAK;;AAER,IAAA,QAAQ,EAAE;MACR,IAAI,EAAE,MAAM;MACZ,OAAO,EAAE,IAAI;KACd;;IAED,SAAS,EAAE;MACT,IAAI,EAAE,MAAM;AACZ,MAAA,OAAO,EAAE,SAAS;KACnB;;AAED,IAAA,iBAAiB,EAAE;MACjB,IAAI,EAAE,MAAM;AACZ,MAAA,OAAO,EAAE,SAAS;KACnB;;IAED,WAAW,EAAE;AACX,MAAA,IAAI,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;MACtB,OAAO,EAAE,IAAI;KACd;;IAED,SAAS,EAAE;MACT,IAAI,EAAE,MAAM;AACZ,MAAA,OAAO,EAAE,MAAM;KAChB;;IAED,SAAS,EAAE;MACT,IAAI,EAAE,MAAM;AACZ,MAAA,OAAO,EAAE,MAAM;KAChB;;AAED,IAAA,MAAM,EAAE;MACN,IAAI,EAAE,MAAM;MACZ,OAAO,EAAE,GAAG;KACb;;AAED,IAAA,QAAQ,EAAE;MACR,IAAI,EAAE,OAAO;MACb,OAAO,EAAE,KAAK;KACf;;IAED,SAAS,EAAE;MACT,IAAI,EAAE,MAAM;AACZ,MAAA,OAAO,EAAE,CAAC;KACX;;IAED,UAAU,EAAE;MACV,IAAI,EAAE,OAAO;MACb,OAAO,EAAE,KAAK;KACf;;AAED,IAAA,cAAc,EAAE;MACd,IAAI,EAAE,MAAM;AACZ,MAAA,OAAO,EAAE,CAAC;KACX;;IAED,SAAS,EAAE;MACT,IAAI,EAAE,OAAO;MACb,OAAO,EAAE,KAAK;KACf;;AAED,IAAA,OAAO,EAAE;MACP,IAAI,EAAE,MAAM;MACZ,OAAO,EAAE,KAAK;KACf;;AAED,IAAA,OAAO,EAAE;MACP,IAAI,EAAE,MAAM;MACZ,OAAO,EAAE,KAAK;KACf;;IAED,SAAS,EAAE;MACT,IAAI,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC;MAC7B,OAAO,EAAE,EAAE;KACZ;;IAED,SAAS,EAAE;MACT,IAAI,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC;MAC7B,OAAO,EAAE,EAAE;KACZ;GACF;;AAED,EAAA,KAAK,EAAE;AACL,IAAA,QAAQ;AACR,IAAA,SAAS;AACT,IAAA,QAAQ;AACR,IAAA,QAAQ;AACR,IAAA,cAAc;IACd,YAAY;GACb;;AAED,EAAA,IAAK,CAAA,GAAG;AACN,IAAA,OAAO;AACL,MAAA,IAAI,EAAE,EAAE;MACR,SAAS,EAAE,CAAC;MACZ,KAAK,EAAE,KAAK;MACZ,QAAQ,EAAE,IAAI;AAChB,KAAA;GACD;;AAED,EAAA,QAAQ,EAAE;AACR,IAAA,KAAI,CAAE,GAAG;MACP,IAAI,IAAI,CAAC,aAAa,IAAI,EAAE;QAC1B,MAAM,KAAI,GAAI;AACZ,UAAA,IAAI,EAAE,EAAE,WAAW,EAAE,GAAG;AAC1B,UAAA;AACA,QAAA,MAAM,KAAI,GAAI,IAAI,CAAC,MAAI;QACvB,MAAM,KAAI,GAAI,IAAI,CAAC,UAAQ;AAC3B,QAAA,MAAM,WAAU,GAAI,IAAI,CAAC,YAAU;QACnC,IAAI,kBAAkB,MAAI;AAC1B,QAAA,IAAI,cAAc,EAAA;AAClB,QAAA,IAAI,QAAM;AACV,QAAA,KAAK,IAAI,CAAA,GAAI,CAAC,EAAE,CAAA,GAAI,KAAK,CAAC,MAAM,EAAE,CAAE,GAAE,CAAC,EAAE,CAAC,EAAE,EAAE;AAC5C,UAAA,OAAQ,GAAE,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAA,IAAK,YAAU;UACvC,IAAI,OAAQ,GAAE,eAAe,EAAE;YAC7B,kBAAkB,QAAM;AAC1B,WAAA;AACA,UAAA,WAAU,IAAK,QAAM;AACrB,UAAA,KAAK,CAAC,CAAC,CAAA,GAAI,EAAE,WAAW,EAAE,IAAI,EAAE,OAAQ,GAAA;AAC1C,SAAA;;AAEA,QAAA,IAAI,CAAC,wBAAwB,gBAAc;QAC3C,OAAO,KAAI;AACb,OAAA;AACA,MAAA,OAAO,EAAC;KACT;;IAED,WAAW;;AAEX,IAAA,cAAa,CAAE,GAAG;MAChB,MAAM,EAAE,QAAQ,EAAE,OAAQ,GAAE,KAAG;MAC/B,MAAM,MAAO,GAAE,GAAC;AAChB,MAAA,KAAK,IAAI,CAAA,GAAI,CAAC,EAAE,CAAA,GAAI,KAAK,CAAC,MAAM,EAAE,CAAE,GAAE,CAAC,EAAE,CAAC,EAAE,EAAE;QAC5C,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAA,GAAI,EAAA;AAC/B,OAAA;MACA,OAAO,MAAK;KACb;GACF;;AAED,EAAA,KAAK,EAAE;AACL,IAAA,KAAI,CAAE,GAAG;MACP,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAA;KAC7B;;IAED,QAAO,CAAE,GAAG;AACV,MAAA,IAAI,CAAC,aAAa,GAAC;MACnB,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAA;KAC9B;;AAED,IAAA,KAAK,EAAE;AACL,MAAA,OAAM,CAAE,GAAG;QACT,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAA;OAC9B;AACD,MAAA,IAAI,EAAE,IAAI;KACX;;IAED,SAAU,CAAA,GAAG;MACX,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAA;KAC7B;;AAED,IAAA,iBAAgB,CAAE,GAAG;MACnB,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAA;KAC7B;GACF;;AAED,EAAA,OAAM,CAAE,GAAG;AACT,IAAA,IAAI,CAAC,eAAe,EAAA;AACpB,IAAA,IAAI,CAAC,aAAa,EAAA;AAClB,IAAA,IAAI,CAAC,OAAM,GAAI,IAAI,GAAG,GAAC;IACvB,IAAI,CAAC,aAAY,GAAI,IAAI,GAAG,GAAC;IAC7B,IAAI,CAAC,gBAAgB,MAAI;AACzB,IAAA,IAAI,CAAC,6BAA6B,EAAA;;AAElC;;AAEA,IAAA,IAAI,IAAI,CAAC,SAAS,EAAE;AAClB,MAAA,IAAI,CAAC,cAAc,KAAG;MACtB,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAA;AAC/B,KAAA;;AAEA,IAAA,IAAI,IAAI,CAAC,SAAQ,IAAK,CAAC,IAAI,CAAC,QAAQ,EAAE;AACpC,MAAA,OAAO,CAAC,KAAK,CAAC,0EAA0E,EAAA;AAC1F,KAAA;GACD;;AAED,EAAA,OAAM,CAAE,GAAG;AACT,IAAA,IAAI,CAAC,aAAa,GAAC;AACnB,IAAA,IAAI,CAAC,SAAS,CAAC,MAAM;AACnB;AACA,MAAA,IAAI,CAAC,WAAU,GAAI,MAAI;MACvB,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAA;AAC5B,MAAA,IAAI,CAAC,KAAM,GAAE,KAAG;KACjB,EAAA;GACF;;EAED,SAAU,CAAA,GAAG;IACX,MAAM,YAAW,GAAI,IAAI,CAAC,2BAAyB;AACnD,IAAA,IAAI,OAAO,YAAa,KAAI,QAAQ,EAAE;AACpC,MAAA,IAAI,CAAC,SAAS,CAAC,MAAM;AACnB,QAAA,IAAI,CAAC,gBAAgB,CAAC,YAAY,EAAA;OACnC,EAAA;AACH,KAAA;GACD;;AAED,EAAA,aAAY,CAAE,GAAG;AACf,IAAA,IAAI,CAAC,eAAe,GAAC;GACtB;;AAED,EAAA,OAAO,EAAE;AACP,IAAA,OAAM,CAAE,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE;AACrC,MAAA,MAAM,EAAG,GAAE,OAAO,CAAC;AACjB,QAAA,EAAE,EAAE,GAAG,EAAE;QACT,KAAK;AACL,QAAA,IAAI,EAAE,IAAI;AACV,QAAA,GAAG;QACH,IAAI;OACL,EAAA;MACD,MAAM,IAAG,GAAI,eAAe,CAAC;QAC3B,IAAI;QACJ,QAAQ,EAAE,CAAC;AACX,QAAA,EAAE;OACH,EAAA;AACD,MAAA,IAAI,CAAC,IAAI,CAAC,IAAI,EAAA;AACd,MAAA,OAAO,IAAG;KACX;;IAED,SAAQ,CAAE,CAAC,IAAI,EAAE,IAAK,GAAE,KAAK,EAAE;AAC7B,MAAA,MAAM,WAAY,GAAE,IAAI,CAAC,cAAY;AACrC,MAAA,MAAM,IAAK,GAAE,IAAI,CAAC,EAAE,CAAC,KAAG;AACxB,MAAA,IAAI,UAAW,GAAE,WAAW,CAAC,GAAG,CAAC,IAAI,EAAA;AACrC,MAAA,IAAI,CAAC,UAAU,EAAE;QACf,UAAW,GAAE,GAAC;AACd,QAAA,WAAW,CAAC,GAAG,CAAC,IAAI,EAAE,UAAU,EAAA;AAClC,OAAA;AACA,MAAA,UAAU,CAAC,IAAI,CAAC,IAAI,EAAA;AACpB,MAAA,IAAI,CAAC,IAAI,EAAE;AACT,QAAA,IAAI,CAAC,EAAE,CAAC,IAAK,GAAE,MAAI;AACnB,QAAA,IAAI,CAAC,QAAS,GAAE,CAAC,KAAG;AACtB,OAAA;KACD;;AAED,IAAA,YAAa,CAAA,GAAG;AACd,MAAA,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAA;AACnB,MAAA,IAAI,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAA;KAC9C;;AAED,IAAA,aAAa,CAAC,KAAK,EAAE;MACnB,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;QACvB,IAAI,CAAC,gBAAgB,KAAG;QACxB,IAAI,IAAI,CAAC,eAAe,EAAE,MAAK;;QAE/B,MAAM,gBAAgB,MAAM,qBAAqB,CAAC,MAAM;UACtD,IAAI,CAAC,gBAAgB,MAAI;UACzB,MAAM,EAAE,UAAW,EAAA,GAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,IAAI,EAAA;;;;AAI1D,UAAA,IAAI,CAAC,UAAU,EAAE;AACf,YAAA,YAAY,CAAC,IAAI,CAAC,eAAe,EAAA;AACjC,YAAA,IAAI,CAAC,eAAgB,GAAE,UAAU,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,cAAa,GAAI,GAAG,EAAA;AAChF,WAAA;SACD,EAAA;;AAED,QAAA,aAAa,GAAC;;AAEd;QACA,IAAI,IAAI,CAAC,cAAc,EAAE;AACvB,UAAA,IAAI,CAAC,eAAc,GAAI,UAAU,CAAC,MAAM;AACtC,YAAA,IAAI,CAAC,kBAAkB,EAAA;AACvB,YAAA,IAAI,IAAI,CAAC,aAAa,EAAE,aAAa,GAAC;AACxC,WAAC,EAAE,IAAI,CAAC,cAAc,EAAA;AACxB,SAAA;AACF,OAAA;KACD;;AAED,IAAA,uBAAuB,CAAC,SAAS,EAAE,KAAK,EAAE;AACxC,MAAA,IAAI,IAAI,CAAC,KAAK,EAAE;AACd,QAAA,IAAI,SAAQ,IAAK,KAAK,CAAC,kBAAkB,CAAC,KAAM,KAAI,CAAA,IAAK,KAAK,CAAC,kBAAkB,CAAC,MAAK,KAAM,CAAC,EAAE;AAC9F,UAAA,IAAI,CAAC,KAAK,CAAC,SAAS,EAAA;UACpB,qBAAqB,CAAC,MAAM;YAC1B,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAA;WAC9B,EAAA;SACD,MAAK;AACL,UAAA,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAA;AACrB,SAAA;AACF,OAAA;KACD;;IAED,kBAAmB,CAAA,CAAC,SAAS,EAAE,iBAAkB,GAAE,KAAK,EAAE;MACxD,MAAM,QAAO,GAAI,IAAI,CAAC,SAAO;AAC7B,MAAA,MAAM,SAAU,GAAE,IAAI,CAAC,SAAQ,IAAK,EAAA;MACpC,MAAM,iBAAkB,GAAE,IAAI,CAAC,iBAAkB,IAAG,SAAO;AAC3D,MAAA,MAAM,cAAc,IAAI,CAAC,sBAAoB;MAC7C,MAAM,SAAQ,GAAI,IAAI,CAAC,UAAQ;MAC/B,MAAM,QAAS,GAAE,IAAI,CAAC,WAAU,GAAI,IAAK,GAAE,IAAI,CAAC,SAAO;AACvD,MAAA,MAAM,KAAI,GAAI,IAAI,CAAC,MAAI;MACvB,MAAM,KAAM,GAAE,KAAK,CAAC,OAAK;AACzB,MAAA,MAAM,KAAI,GAAI,IAAI,CAAC,MAAI;MACvB,MAAM,KAAM,GAAE,IAAI,CAAC,QAAM;AACzB,MAAA,MAAM,WAAY,GAAE,IAAI,CAAC,cAAY;AACrC,MAAA,MAAM,IAAG,GAAI,IAAI,CAAC,KAAG;AACrB,MAAA,MAAM,cAAa,GAAI,IAAI,CAAC,eAAa;AACzC,MAAA,IAAI,UAAU,EAAE,SAAO;MACvB,IAAI,UAAQ;AACZ,MAAA,IAAI,iBAAiB,EAAE,gBAAc;;MAErC,IAAI,CAAC,KAAK,EAAE;AACV,QAAA,UAAW,GAAE,QAAO,GAAI,iBAAkB,GAAE,eAAgB,GAAE,YAAY,EAAA;OAC1E,MAAK,IAAI,IAAI,CAAC,WAAW,EAAE;QAC3B,UAAS,GAAI,iBAAgB,GAAI,EAAA;QACjC,QAAO,GAAI,eAAc,GAAI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,MAAM,EAAA;QAClE,SAAU,GAAE,KAAG;OACf,MAAK;QACL,MAAM,MAAK,GAAI,IAAI,CAAC,SAAS,GAAC;;AAE9B;AACA,QAAA,IAAI,iBAAiB,EAAE;UACrB,IAAI,eAAe,MAAM,CAAC,KAAM,GAAE,IAAI,CAAC,2BAAyB;AAChE,UAAA,IAAI,YAAW,GAAI,CAAC,EAAE,eAAe,CAAC,aAAW;AACjD,UAAA,IAAI,CAAC,QAAO,KAAM,IAAG,IAAK,eAAe,WAAW,KAAK,eAAe,QAAQ,EAAE;AAChF,YAAA,OAAO;AACL,cAAA,UAAU,EAAE,IAAI;AAClB,aAAA;AACF,WAAA;AACF,SAAA;AACA,QAAA,IAAI,CAAC,0BAA2B,GAAE,MAAM,CAAC,MAAI;;QAE7C,MAAM,MAAK,GAAI,IAAI,CAAC,OAAK;AACzB,QAAA,MAAM,CAAC,SAAS,OAAK;AACrB,QAAA,MAAM,CAAC,GAAE,IAAK,OAAK;;;AAGnB,QAAA,IAAI,UAAS,GAAI,EAAA;AACjB,QAAA,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;AACrB,UAAA,UAAW,GAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,aAAW;UAC1C,MAAM,CAAC,SAAS,WAAS;AAC3B,SAAA;;;AAGA,QAAA,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE;AACpB,UAAA,MAAM,SAAU,GAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,aAAW;AAC9C,UAAA,MAAM,CAAC,GAAE,IAAK,UAAQ;AACxB,SAAA;;AAEA;AACA,QAAA,IAAI,QAAO,KAAM,IAAI,EAAE;AACrB,UAAA,IAAI,EAAA;UACJ,IAAI,CAAA,GAAI,EAAA;UACR,IAAI,CAAE,GAAE,KAAI,GAAI,EAAA;AAChB,UAAA,IAAI,CAAE,GAAE,CAAC,EAAE,KAAI,GAAI,CAAC,EAAA;AACpB,UAAA,IAAI,KAAG;;;AAGP,UAAA,GAAG;YACD,IAAG,GAAI,EAAA;AACP,YAAA,CAAA,GAAI,KAAK,CAAC,CAAC,CAAC,CAAC,YAAU;AACvB,YAAA,IAAI,CAAA,GAAI,MAAM,CAAC,KAAK,EAAE;AACpB,cAAA,CAAA,GAAI,EAAA;aACJ,MAAK,IAAI,CAAA,GAAI,KAAM,GAAE,CAAE,IAAG,KAAK,CAAC,CAAE,GAAE,CAAC,CAAC,CAAC,WAAU,GAAI,MAAM,CAAC,KAAK,EAAE;AACnE,cAAA,CAAA,GAAI,EAAA;AACN,aAAA;YACA,CAAE,GAAE,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,EAAA;AACpB,WAAA,QAAS,CAAE,KAAI,IAAI,CAAA;AACnB,UAAA,CAAA,GAAI,CAAE,KAAI,CAAA,GAAI,CAAC,EAAA;UACf,UAAS,GAAI,EAAA;;AAEb;AACA,UAAA,SAAU,GAAE,KAAK,CAAC,KAAI,GAAI,CAAC,CAAC,CAAC,YAAU;;AAEvC;AACA,UAAA,KAAK,WAAW,CAAC,EAAE,QAAS,GAAE,KAAI,IAAK,KAAK,CAAC,QAAQ,CAAC,CAAC,WAAU,GAAI,MAAM,CAAC,GAAG,EAAE,QAAQ,EAAE,CAAC,CAAA;AAC5F,UAAA,IAAI,aAAa,CAAC,CAAC,EAAE;YACnB,QAAO,GAAI,KAAK,CAAC,SAAS,EAAA;WAC1B,MAAK;AACL,YAAA,QAAQ,GAAC;AACT;AACA,YAAA,QAAS,GAAE,KAAM,KAAI,QAAO,GAAI,KAAK,EAAA;AACvC,WAAA;;;AAGA,UAAA,KAAK,iBAAkB,GAAE,UAAU,EAAE,oBAAoB,KAAI,IAAK,CAAC,UAAW,GAAE,KAAK,CAAC,iBAAiB,CAAC,CAAC,WAAW,IAAI,MAAM,CAAC,KAAK,EAAE,iBAAiB,EAAE,CAAC,CAAA;;;AAG1J,UAAA,KAAK,eAAgB,GAAE,iBAAiB,EAAE,eAAc,GAAI,KAAM,IAAG,CAAC,UAAW,GAAE,KAAK,CAAC,eAAe,CAAC,CAAC,WAAW,IAAI,MAAM,CAAC,GAAG,EAAE,eAAe,EAAE,CAAC,CAAA;SACvJ,MAAK;AACL;AACA,UAAA,UAAS,GAAI,CAAC,EAAE,MAAM,CAAC,QAAQ,WAAW,SAAS,EAAA;AACnD,UAAA,MAAM,QAAO,GAAI,UAAW,GAAE,UAAQ;AACtC,UAAA,UAAW,IAAG,SAAO;UACrB,QAAO,GAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAI,GAAE,QAAS,GAAE,SAAS,EAAA;AACtD,UAAA,iBAAgB,GAAI,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,KAAI,GAAI,UAAU,IAAI,QAAS,GAAE,SAAS,CAAC,EAAA;AAC9F,UAAA,eAAgB,GAAE,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,GAAE,GAAI,UAAU,IAAI,WAAW,SAAS,EAAA;;AAE7E;UACA,UAAW,GAAE,CAAE,KAAI,UAAW,GAAE,CAAC,EAAA;AACjC,UAAA,QAAS,GAAE,KAAM,KAAI,QAAO,GAAI,KAAK,EAAA;AACrC,UAAA,iBAAgB,GAAI,CAAE,KAAI,iBAAgB,GAAI,CAAC,EAAA;AAC/C,UAAA,eAAgB,GAAE,KAAM,KAAI,eAAgB,GAAE,KAAK,EAAA;;AAEnD,UAAA,SAAU,GAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,SAAS,CAAA,GAAI,SAAO;AACpD,SAAA;AACF,OAAA;;AAEA,MAAA,IAAI,QAAO,GAAI,UAAS,GAAI,MAAM,CAAC,UAAU,EAAE;AAC7C,QAAA,IAAI,CAAC,eAAe,GAAC;AACvB,OAAA;;MAEA,IAAI,CAAC,SAAQ,GAAI,UAAQ;;AAEzB,MAAA,IAAI,KAAG;;AAEP,MAAA,MAAM,aAAa,UAAS,IAAK,IAAI,CAAC,UAAW,IAAG,QAAO,IAAK,IAAI,CAAC,aAAW;;AAEhF;AACA,MAAA,IAAI,UAAU,EAAE;AACd,QAAA,KAAK,IAAI,CAAE,GAAE,CAAC,EAAE,CAAE,GAAE,IAAI,CAAC,MAAM,EAAE,CAAE,GAAE,CAAC,EAAE,CAAC,EAAE,EAAE;UAC3C,IAAK,GAAE,IAAI,CAAC,CAAC,EAAA;AACb,UAAA,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE;AAChB;YACA,IAAI,SAAS,EAAE;cACb,IAAI,CAAC,EAAE,CAAC,KAAM,GAAE,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAA;AACpD,aAAA;;AAEA;AACA,YAAA;AACE,cAAA,IAAI,CAAC,EAAE,CAAC,SAAS;cACjB,IAAI,CAAC,EAAE,CAAC,QAAQ,UAAS;cACzB,IAAI,CAAC,EAAE,CAAC,KAAM,IAAG,QAAO;cACxB;AACA,cAAA,IAAI,CAAC,SAAS,CAAC,IAAI,EAAA;AACrB,aAAA;AACF,WAAA;AACF,SAAA;AACF,OAAA;;AAEA,MAAA,MAAM,WAAY,GAAE,UAAS,GAAI,IAAG,GAAI,IAAI,GAAG,GAAC;;MAEhD,IAAI,IAAI,EAAE,KAAG;AACb,MAAA,IAAI,EAAA;AACJ,MAAA,KAAK,IAAI,CAAA,GAAI,UAAU,EAAE,CAAA,GAAI,QAAQ,EAAE,CAAC,EAAE,EAAE;QAC1C,IAAG,GAAI,KAAK,CAAC,CAAC,EAAA;AACd,QAAA,MAAM,GAAE,GAAI,QAAS,GAAE,IAAI,CAAC,QAAQ,CAAA,GAAI,KAAG;QAC3C,IAAI,GAAE,IAAK,IAAI,EAAE;UACf,MAAM,IAAI,KAAK,CAAC,CAAC,OAAO,EAAE,GAAG,CAAE,uBAAsB,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAA;AACrE,SAAA;AACA,QAAA,IAAG,GAAI,KAAK,CAAC,GAAG,CAAC,GAAG,EAAA;;QAEpB,IAAI,CAAC,QAAO,IAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;UAC/B,IAAI,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,EAAA;AAC7B,UAAA,QAAO;AACT,SAAA;;AAEA,QAAA,IAAG,GAAI,IAAI,CAAC,SAAS,EAAA;;AAErB,QAAA,IAAI,UAAW,GAAE,WAAW,CAAC,GAAG,CAAC,IAAI,EAAA;AACrC,QAAA,IAAI,aAAY,GAAI,MAAI;;AAExB;AACA,QAAA,IAAI,CAAC,IAAI,EAAE;AACT,UAAA,IAAI,UAAU,EAAE;AACd;AACA,YAAA,IAAI,UAAS,IAAK,UAAU,CAAC,MAAM,EAAE;AACnC,cAAA,IAAG,GAAI,UAAU,CAAC,GAAG,GAAC;aACtB,MAAK;AACL,cAAA,IAAG,GAAI,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAA;AAC9C,aAAA;WACA,MAAK;AACL;AACA;AACA;YACA,CAAE,GAAE,WAAW,CAAC,GAAG,CAAC,IAAI,CAAE,IAAG,EAAA;;AAE7B,YAAA,IAAI,CAAC,UAAW,IAAG,CAAE,IAAG,UAAU,CAAC,MAAM,EAAE;AACzC,cAAA,IAAG,GAAI,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAA;cAC5C,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAA;AACzB,cAAA,UAAW,GAAE,WAAW,CAAC,GAAG,CAAC,IAAI,EAAA;AACnC,aAAA;;AAEA,YAAA,IAAK,GAAE,UAAU,CAAC,CAAC,EAAA;YACnB,WAAW,CAAC,GAAG,CAAC,IAAI,EAAE,CAAE,GAAE,CAAC,EAAA;AAC7B,WAAA;;AAEA;UACA,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAA;AACxB,UAAA,IAAI,CAAC,EAAE,CAAC,IAAG,GAAI,KAAG;AAClB,UAAA,IAAI,CAAC,EAAE,CAAC,KAAI,GAAI,EAAA;AAChB,UAAA,IAAI,CAAC,EAAE,CAAC,GAAE,GAAI,IAAE;AAChB,UAAA,IAAI,CAAC,EAAE,CAAC,IAAG,GAAI,KAAG;AAClB,UAAA,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,EAAA;;AAEnB,UAAA,aAAY,GAAI,KAAG;SACnB,MAAK;;AAEL,UAAA,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE;AACjB,YAAA,IAAI,CAAC,EAAE,CAAC,IAAG,GAAI,KAAG;AAClB,YAAA,aAAY,GAAI,KAAG;AACnB,YAAA,IAAI,UAAU,EAAE;AACd,cAAA,MAAM,KAAI,GAAI,UAAU,CAAC,OAAO,CAAC,IAAI,EAAA;AACrC,cAAA,IAAI,KAAM,KAAI,CAAC,CAAC,EAAE,UAAU,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAA;AAC9C,aAAA;AACF,WAAA;AACF,SAAA;;;QAGA,IAAI,CAAC,IAAK,GAAE,KAAG;;AAEf,QAAA,IAAI,aAAa,EAAE;AACjB,UAAA,IAAI,CAAA,KAAM,KAAK,CAAC,MAAK,GAAI,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY,EAAA;AACnD,UAAA,IAAI,CAAE,KAAI,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,cAAc,EAAA;AACxC,SAAA;;AAEA;AACA,QAAA,IAAI,QAAO,KAAM,IAAI,EAAE;AACrB,UAAA,IAAI,CAAC,QAAS,GAAE,KAAK,CAAC,CAAA,GAAI,CAAC,CAAC,CAAC,YAAU;UACvC,IAAI,CAAC,MAAK,GAAI,EAAA;SACd,MAAK;AACL,UAAA,IAAI,CAAC,QAAO,GAAI,IAAI,CAAC,KAAK,CAAC,IAAI,SAAS,CAAA,GAAI,SAAO;AACnD,UAAA,IAAI,CAAC,MAAO,GAAE,CAAC,CAAE,GAAE,SAAS,IAAI,kBAAgB;AAClD,SAAA;AACF,OAAA;;MAEA,IAAI,CAAC,YAAa,GAAE,WAAS;MAC7B,IAAI,CAAC,aAAa,SAAO;;AAEzB,MAAA,IAAI,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,iBAAiB,EAAE,eAAe,EAAA;;AAElG;AACA;MACA,YAAY,CAAC,IAAI,CAAC,WAAW,EAAA;AAC7B,MAAA,IAAI,CAAC,WAAU,GAAI,UAAU,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,cAAa,GAAI,GAAG,EAAA;;AAEvE,MAAA,OAAO;QACL,UAAU;AACZ,OAAA;KACD;;AAED,IAAA,iBAAgB,CAAE,GAAG;AACnB,MAAA,IAAI,MAAO,GAAE,eAAe,CAAC,IAAI,CAAC,GAAG,EAAA;AACrC;MACA,IAAI,MAAM,CAAC,aAAa,WAAW,MAAM,CAAC,QAAQ,CAAC,eAAgB,IAAG,WAAW,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;QACtG,MAAK,GAAI,OAAK;AAChB,OAAA;MACA,OAAO,MAAK;KACb;;IAED,SAAU,CAAA,GAAG;MACX,MAAM,EAAE,GAAG,EAAE,EAAE,EAAE,SAAQ,EAAI,GAAE,KAAG;AAClC,MAAA,MAAM,UAAS,GAAI,SAAQ,KAAM,WAAS;MAC1C,IAAI,YAAU;;AAEd,MAAA,IAAI,IAAI,CAAC,QAAQ,EAAE;AACjB,QAAA,MAAM,SAAS,EAAE,CAAC,qBAAqB,GAAC;QACxC,MAAM,UAAS,GAAI,UAAS,GAAI,MAAM,CAAC,SAAS,MAAM,CAAC,MAAI;AAC3D,QAAA,IAAI,QAAQ,EAAE,UAAW,GAAE,MAAM,CAAC,GAAI,GAAE,MAAM,CAAC,IAAI,EAAA;QACnD,IAAI,OAAO,UAAS,GAAI,MAAM,CAAC,WAAU,GAAI,MAAM,CAAC,WAAS;QAC7D,IAAI,KAAI,GAAI,CAAC,EAAE;UACb,IAAK,IAAG,MAAI;AACZ,UAAA,KAAI,GAAI,EAAA;AACV,SAAA;QACA,IAAI,KAAI,GAAI,OAAO,UAAU,EAAE;AAC7B,UAAA,IAAG,GAAI,UAAS,GAAI,MAAI;AAC1B,SAAA;QACA,WAAU,GAAI;UACZ,KAAK;AACL,UAAA,GAAG,EAAE,KAAI,GAAI,IAAI;AACnB,UAAA;AACF,OAAA,MAAO,IAAI,UAAU,EAAE;QACrB,WAAU,GAAI;AACZ,UAAA,KAAK,EAAE,EAAE,CAAC,SAAS;AACnB,UAAA,GAAG,EAAE,EAAE,CAAC,SAAQ,GAAI,EAAE,CAAC,YAAY;AACrC,UAAA;OACA,MAAK;QACL,WAAU,GAAI;AACZ,UAAA,KAAK,EAAE,EAAE,CAAC,UAAU;AACpB,UAAA,GAAG,EAAE,EAAE,CAAC,UAAW,GAAE,EAAE,CAAC,WAAW;AACrC,UAAA;AACF,OAAA;;AAEA,MAAA,OAAO,WAAU;KAClB;;AAED,IAAA,aAAY,CAAE,GAAG;AACf,MAAA,IAAI,IAAI,CAAC,QAAQ,EAAE;AACjB,QAAA,IAAI,CAAC,YAAY,GAAC;OAClB,MAAK;AACL,QAAA,IAAI,CAAC,eAAe,GAAC;AACvB,OAAA;KACD;;AAED,IAAA,YAAa,CAAA,GAAG;AACd,MAAA,IAAI,CAAC,iBAAiB,IAAI,CAAC,iBAAiB,GAAC;AAC7C,MAAA,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,EAAE,eAAc;UAC5E;YACE,OAAO,EAAE,IAAI;AACf,WAAA;AACF,UAAE,KAAK,EAAA;AACT,MAAA,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,EAAA;KACjE;;AAED,IAAA,eAAc,CAAE,GAAG;MACjB,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;QACxB,MAAK;AACP,OAAA;;AAEA,MAAA,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,EAAA;AACnE,MAAA,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,EAAA;;MAEnE,IAAI,CAAC,cAAe,GAAE,KAAG;KAC1B;;AAED,IAAA,aAAa,CAAC,KAAK,EAAE;AACnB,MAAA,IAAI,OAAK;AACT,MAAA,MAAM,SAAU,GAAE,IAAI,CAAC,SAAQ,IAAK,EAAA;MACpC,IAAI,IAAI,CAAC,aAAa,IAAI,EAAE;QAC1B,SAAS,QAAQ,CAAA,GAAI,IAAI,CAAC,KAAK,CAAC,KAAM,GAAE,CAAC,CAAC,CAAC,WAAU,GAAI,EAAA;OACzD,MAAK;QACL,SAAS,IAAI,CAAC,KAAK,CAAC,KAAI,GAAI,SAAS,CAAE,GAAE,IAAI,CAAC,SAAO;AACvD,OAAA;MACA,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAA;KAC7B;;IAED,gBAAe,CAAE,CAAC,QAAQ,EAAE;AAC1B,MAAA,MAAM,SAAQ,GAAI,IAAI,CAAC,cAAc,UAAS;AAC5C,UAAE,EAAE,MAAM,EAAE,WAAW,EAAE,KAAK,EAAE,KAAM,EAAA;AACtC,UAAE,EAAE,MAAM,EAAE,YAAY,EAAE,KAAK,EAAE,MAAO,GAAA;;MAE1C,IAAI,SAAO;AACX,MAAA,IAAI,gBAAc;AAClB,MAAA,IAAI,eAAa;;AAEjB,MAAA,IAAI,IAAI,CAAC,QAAQ,EAAE;AACjB,QAAA,MAAM,aAAa,eAAe,CAAC,IAAI,CAAC,GAAG,EAAA;AAC3C;AACA,QAAA,MAAM,SAAQ,GAAI,UAAU,CAAC,OAAM,KAAM,MAAK,GAAI,CAAE,GAAE,UAAU,CAAC,SAAS,CAAC,MAAM,EAAA;AACjF,QAAA,MAAM,SAAS,UAAU,CAAC,qBAAqB,GAAC;;AAEhD,QAAA,MAAM,QAAO,GAAI,IAAI,CAAC,GAAG,CAAC,qBAAqB,GAAC;AAChD,QAAA,MAAM,gBAAe,GAAI,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAE,GAAE,MAAM,CAAC,SAAS,CAAC,KAAK,EAAA;;AAE3E,QAAA,QAAS,GAAE,WAAS;AACpB,QAAA,eAAc,GAAI,SAAS,CAAC,OAAK;QACjC,cAAa,GAAI,QAAS,GAAE,SAAQ,GAAI,iBAAe;OACvD,MAAK;AACL,QAAA,QAAO,GAAI,IAAI,CAAC,IAAE;AAClB,QAAA,eAAc,GAAI,SAAS,CAAC,OAAK;QACjC,cAAa,GAAI,SAAO;AAC1B,OAAA;;AAEA,MAAA,QAAQ,CAAC,eAAe,CAAE,GAAE,eAAa;KAC1C;;AAED,IAAA,eAAc,CAAE,GAAG;AACjB,MAAA,UAAU,CAAC,MAAM;QACf,OAAO,CAAC,GAAG,CAAC,8FAA8F,EAAE,WAAW,EAAE,IAAI,CAAC,GAAG,EAAA;AACjI,QAAA,OAAO,CAAC,GAAG,CAAC,kMAAkM,EAAA;OAC/M,EAAA;AACD,MAAA,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAA;KAC/C;;IAED,SAAU,CAAA,GAAG;MACX,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,KAAK,KAAK,KAAK,CAAC,EAAE,CAAC,KAAI,GAAI,KAAK,CAAC,EAAE,CAAC,KAAK,EAAA;KACjE;GACF;AACH;;;;AC7uBM,EAAA,GAAG,EAAC,QAAO;AACX,EAAA,KAAK,EAAC,4BAA2B;;;;AAiDjC,EAAA,GAAG,EAAC,OAAM;AACV,EAAA,KAAK,EAAC,4BAA2B;;;;;;;sCA/DrCC,kBAuEK,CAAA,KAAA,EAAA;AArEH,IAAA,KAAK,kBAAC,sBAAqB,EAAA;aACnB,KAAA,CAAA,KAAA;mBAAA,MAAA,CAAA,QAAA;oBAAA,IAAA,CAAA,SAAA,CAAA,CAAA,GAAA,IAAA;;6DAKS,QAAY,CAAA,YAAA,IAAA,QAAA,CAAA,YAAA,CAAA,GAAA,IAAA,CAAA,CAAA,CAAA;;AAGrB,IAAA,CAAA,IAAA,CAAA,MAAM,CAAC,MAAM;AADrB,SAAAC,SAAA,EAAA,EAAAD,kBAAA,CAQK,OARL,UAQK,EAAA;UAHHE,UAEC,CAAA,IAAA,CAAA,MAAA,EAAA,QAAA,CAAA;;;AAGH,KAAAD,SAAA,EAAA,EAAAE,WAAA,CAsCWC,wBArCJ,MAAO,CAAA,OAAA,CAAA,EAAA;AACZ,MAAA,GAAG,EAAC,SAAQ;MACX,KAAK,EAAAC,cAAA,CAAA,EAAA,CAAK,IAAQ,CAAA,SAAA,KAAA,UAAA,GAAA,WAAA,GAAA,UAAA,GAA8C;MACjE,KAAK,EAAAC,cAAA,CAAA,CAAC,oCAAmC,EACjC,MAAS,CAAA,SAAA,CAAA,CAAA;;uBAIf,MAAmB;0BAFrBN,kBA0BW,CAAAO,QAAA,EAAA,IAAA,EAAAC,UAAA,CAxBM,KAAI,CAAA,IAAA,EAAA,CAAZ;+BAFTL,WA0BW,CAAAC,uBAAA,CAzBJ,MAAO,CAAA,OAAA,CAAA,EADdK,UA0BW,CAAA;AAvBR,YAAA,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE;AACf,YAAA,KAAK,EAAE,KAAI,CAAA,KAAA,GAAA;iCAAI,IAAA,CAAA,SAAA,KAAA,UAAA,GAAA,GAAA,GAAA,GAAA,CAAA,CAAA,EAAA,IAAA,CAAA,QAAA,gBAAA,IAAA,CAAA,SAAA,KAAA,UAAA,GAAA,GAAA,GAAA,GAAA,CAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,GAAA,CAAA;iBAAA,MAAA,CAAA,SAAA,GAAA,CAAA,EAAA,cAAA,KAAA,UAAA,GAAA,MAAA,CAAA,iBAAA,IAAA,MAAA,CAAA,QAAA,GAAA,MAAA,CAAA,QAAA,CAAA,EAAA,CAAA,GAAA,SAAA;kBAAA,MAAA,CAAA,SAAA,GAAA,CAAA,EAAA,cAAA,KAAA,YAAA,GAAA,MAAA,CAAA,iBAAA,IAAA,MAAA,CAAA,QAAA,GAAA,MAAA,CAAA,QAAA,CAAA,EAAA,CAAA,GAAA,SAAA;;AAKhB,YAAA,KAAK,GAAC,iCAAgC,EAAA;UAC9B,MAAA,CAAA,SAAA;;AAAA,YAAA,KAAA,EAAA,CAAA,MAAA,CAAA,SAAA,IAAA,KAAA,CAAA,QAAA,KAAA,IAAA,CAAA,EAAA,CAAA,GAAA;;;AAMR,WAAA,EAAAC,UAAA,CAAM;AAAiB,UAAA,UAAA,EAAA,MAAA,EAAA,KAAA,CAAA,QAAA,GAAA,IAAA,CAAA,EAAA,CAAA,IAAA,EAAA;8BAAA,KAAA,CAAA,QAAA,GAAA,KAAA,EAAA;;6BAKvB,MAIC;cAJDR,UAIC,CAAA,IAAA,CAAA,MAAA,EAAA,SAAA,EAAA;gBAHE,IAAI,EAAE,IAAI,CAAC,IAAI;AACf,gBAAA,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK;AACpB,gBAAA,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI;;;;;;QAIzBA,UAEC,CAAA,IAAA,CAAA,MAAA,EAAA,OAAA,CAAA;;;;AAIK,IAAA,CAAA,IAAA,CAAA,MAAM,CAAC,KAAK;AADpB,SAAAD,SAAA,EAAA,EAAAD,kBAAA,CAQK,OARL,UAQK,EAAA;UAHHE,UAEC,CAAA,IAAA,CAAA,MAAA,EAAA,OAAA,CAAA;;;IAGHS,WAAwC,CAAA,yBAAA,EAAA,EAAvB,QAAM,EAAE,QAAY,CAAA,YAAA,EAAA,EAAA,IAAA,EAAA,CAAA,cAAA,CAAA,UAAA,CAAA,CAAA;;oCArEf,QAAsB,CAAA,sBAAA,CAAA;;;;;;;ACsChD,eAAe;EACb,IAAI,EAAE,iBAAiB;;EAEvB,UAAU,EAAE;AACV,qBAAAC,QAAe;GAChB;;AAED,EAAA,OAAM,CAAE,GAAG;AACT,IAAA,IAAI,OAAO,cAAe,KAAI,WAAW,EAAE;MACzC,IAAI,CAAC,gBAAiB,GAAE,IAAI,cAAc,CAAC,OAAQ,IAAG;QACpD,qBAAqB,CAAC,MAAM;UAC1B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAC3B,MAAK;AACP,WAAA;UACA,KAAK,MAAM,KAAM,IAAG,OAAO,EAAE;AAC3B,YAAA,IAAI,KAAK,CAAC,MAAO,IAAG,KAAK,CAAC,MAAM,CAAC,aAAa,EAAE;AAC9C,cAAA,IAAI,KAAK,EAAE,OAAK;cAChB,IAAI,KAAK,CAAC,aAAa,EAAE;AACvB,gBAAA,MAAM,qBAAqB,KAAK,CAAC,aAAa,CAAC,CAAC,EAAA;AAChD,gBAAA,KAAI,GAAI,kBAAkB,CAAC,WAAS;AACpC,gBAAA,SAAS,kBAAkB,CAAC,UAAQ;eACpC,MAAK;AACL;gBACA,KAAM,GAAE,KAAK,CAAC,WAAW,CAAC,MAAI;AAC9B,gBAAA,MAAO,GAAE,KAAK,CAAC,WAAW,CAAC,OAAK;AAClC,eAAA;cACA,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,EAAE,MAAM,EAAA;AAChE,aAAA;AACF,WAAA;SACD,EAAA;OACF,EAAA;AACH,KAAA;;AAEA,IAAA,OAAO;MACL,WAAW,EAAE,IAAI,CAAC,WAAW;AAC7B,MAAA,aAAa,EAAE,IAAI;AACnB,MAAA,qBAAqB,EAAE,IAAI,CAAC,gBAAgB;AAC9C,KAAA;GACD;;AAED,EAAA,YAAY,EAAE,KAAK;;AAEnB,EAAA,KAAK,EAAE;AACL,IAAA,GAAG,KAAK;;IAER,WAAW,EAAE;AACX,MAAA,IAAI,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;MACtB,QAAQ,EAAE,IAAI;KACf;GACF;;AAED,EAAA,KAAK,EAAE;AACL,IAAA,QAAQ;AACR,IAAA,SAAS;GACV;;AAED,EAAA,IAAK,CAAA,GAAG;AACN,IAAA,OAAO;MACL,WAAW,EAAE;QACX,MAAM,EAAE,IAAI;AACZ,QAAA,KAAK,EAAE,EAAE;QACT,QAAQ,EAAE,IAAI,CAAC,QAAQ;AACvB,QAAA,WAAW,EAAE,KAAK;OACnB;AACH,KAAA;GACD;;AAED,EAAA,QAAQ,EAAE;IACR,WAAW;;AAEX,IAAA,aAAY,CAAE,GAAG;MACf,MAAM,MAAO,GAAE,GAAC;AAChB,MAAA,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,WAAY,EAAA,GAAI,KAAG;AAC5C,MAAA,MAAM,KAAM,GAAE,IAAI,CAAC,WAAW,CAAC,MAAI;AACnC,MAAA,MAAM,CAAA,GAAI,KAAK,CAAC,OAAK;AACrB,MAAA,KAAK,IAAI,CAAE,GAAE,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;AAC1B,QAAA,MAAM,IAAK,GAAE,KAAK,CAAC,CAAC,EAAA;AACpB,QAAA,MAAM,EAAG,GAAE,WAAU,GAAI,CAAA,GAAI,IAAI,CAAC,QAAQ,EAAA;AAC1C,QAAA,IAAI,IAAK,GAAE,KAAK,CAAC,EAAE,EAAA;QACnB,IAAI,OAAO,IAAG,KAAM,WAAU,IAAK,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,EAAE;UAC3D,IAAG,GAAI,EAAA;AACT,SAAA;QACA,MAAM,CAAC,IAAI,CAAC;UACV,IAAI;AACJ,UAAA,EAAE;UACF,IAAI;SACL,EAAA;AACH,OAAA;MACA,OAAO,MAAK;KACb;GACF;;AAED,EAAA,KAAK,EAAE;AACL,IAAA,KAAI,CAAE,GAAG;AACP,MAAA,IAAI,CAAC,WAAW,GAAC;KAClB;;IAED,WAAW,EAAE;AACX,MAAA,OAAM,CAAE,CAAC,KAAK,EAAE;AACd,QAAA,IAAI,CAAC,WAAW,CAAC,WAAY,GAAE,MAAI;OACpC;AACD,MAAA,SAAS,EAAE,IAAI;KAChB;;AAED,IAAA,SAAU,CAAA,CAAC,KAAK,EAAE;AAChB,MAAA,IAAI,CAAC,WAAW,CAAC,IAAI,EAAA;KACtB;;IAED,cAAc,CAAC,IAAI,EAAE,IAAI,EAAE;AACzB,MAAA,MAAM,YAAY,IAAI,CAAC,GAAG,CAAC,UAAQ;;AAEnC;AACA;AACA;AACA,MAAA,IAAI,aAAY,GAAI,CAAC,CAAE,CAAA,IAAI,YAAY,EAAA;AACvC,MAAA,MAAM,SAAS,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAA;MAChD,KAAK,IAAI,CAAA,GAAI,CAAC,EAAE,CAAA,GAAI,MAAM,EAAE,CAAC,EAAE,EAAE;QAC/B,IAAI,aAAc,IAAG,SAAS,EAAE;UAC9B,KAAI;AACN,SAAA;AACA,QAAA,aAAY,IAAK,IAAI,CAAC,CAAC,CAAC,CAAC,IAAG,IAAK,IAAI,CAAC,YAAU;AAChD,QAAA,SAAQ,IAAK,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,CAAC,YAAU;AAC9C,OAAA;AACA,MAAA,MAAM,MAAO,GAAE,SAAQ,GAAI,cAAY;;AAEvC,MAAA,IAAI,MAAK,KAAM,CAAC,EAAE;QAChB,MAAK;AACP,OAAA;;MAEA,IAAI,CAAC,GAAG,CAAC,SAAU,IAAG,OAAK;KAC5B;GACF;;AAED,EAAA,YAAa,CAAA,GAAG;AACd,IAAA,IAAI,CAAC,SAAQ,GAAI,GAAC;IAClB,IAAI,CAAC,mBAAmB,EAAA;AACxB,IAAA,IAAI,CAAC,cAAa,GAAI,GAAC;AACvB,IAAA,IAAI,CAAC,QAAS,GAAE,IAAI,GAAC;GACtB;;EAED,SAAU,CAAA,GAAG;IACX,IAAI,CAAC,WAAW,CAAC,MAAO,GAAE,KAAG;GAC9B;;EAED,WAAY,CAAA,GAAG;IACb,IAAI,CAAC,WAAW,CAAC,MAAK,GAAI,MAAI;GAC/B;;EAED,SAAU,CAAA,GAAG;IACX,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,GAAC;GACzB;;AAED,EAAA,OAAO,EAAE;AACP,IAAA,gBAAe,CAAE,GAAG;AAClB,MAAA,MAAM,QAAO,GAAI,IAAI,CAAC,KAAK,CAAC,SAAO;MACnC,IAAI,QAAQ,EAAE;AACZ,QAAA,IAAI,CAAC,WAAW,GAAC;AACnB,OAAA;AACA,MAAA,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAA;KACpB;;AAED,IAAA,iBAAgB,CAAE,GAAG;MACnB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,EAAE,EAAE,KAAK,EAAE,KAAI,EAAG,EAAA;AACrD,MAAA,IAAI,CAAC,KAAK,CAAC,SAAS,EAAA;KACrB;;IAED,WAAY,CAAA,CAAC,KAAM,GAAE,KAAK,EAAE;MAC1B,IAAI,KAAM,IAAG,IAAI,CAAC,WAAW,EAAE;QAC7B,IAAI,CAAC,WAAW,CAAC,KAAM,GAAE,GAAC;AAC5B,OAAA;MACA,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,EAAE,EAAE,KAAK,EAAE,IAAG,EAAG,EAAA;KACrD;;AAED,IAAA,aAAa,CAAC,KAAK,EAAE;AACnB,MAAA,MAAM,QAAO,GAAI,IAAI,CAAC,KAAK,CAAC,SAAO;AACnC,MAAA,IAAI,QAAQ,EAAE,QAAQ,CAAC,YAAY,CAAC,KAAK,EAAA;KAC1C;;AAED,IAAA,WAAU,CAAE,CAAC,IAAI,EAAE,KAAI,GAAI,SAAS,EAAE;AACpC,MAAA,MAAM,EAAC,GAAI,IAAI,CAAC,eAAe,KAAM,IAAG,IAAK,GAAE,KAAM,GAAE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAA;AACrG,MAAA,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,CAAA,IAAK,CAAA;KACtC;;AAED,IAAA,cAAa,CAAE,GAAG;AAChB,MAAA,IAAI,IAAI,CAAC,mBAAmB,EAAE,MAAK;MACnC,IAAI,CAAC,mBAAoB,GAAE,KAAG;AAC9B,MAAA,MAAM,EAAC,GAAI,IAAI,CAAC,IAAE;;AAElB,MAAA,IAAI,CAAC,SAAS,CAAC,MAAM;AACnB,QAAA,EAAE,CAAC,SAAU,GAAE,EAAE,CAAC,YAAW,GAAI,KAAG;AACpC;QACA,MAAM,KAAK,MAAM;AACf,UAAA,EAAE,CAAC,SAAU,GAAE,EAAE,CAAC,YAAW,GAAI,KAAG;UACpC,qBAAqB,CAAC,MAAM;AAC1B,YAAA,EAAE,CAAC,SAAU,GAAE,EAAE,CAAC,YAAW,GAAI,KAAG;YACpC,IAAI,IAAI,CAAC,gBAAe,KAAM,CAAC,EAAE;cAC/B,IAAI,CAAC,mBAAkB,GAAI,MAAI;aAC/B,MAAK;cACL,qBAAqB,CAAC,EAAE,EAAA;AAC1B,aAAA;WACD,EAAA;AACH,UAAA;QACA,qBAAqB,CAAC,EAAE,EAAA;OACzB,EAAA;KACF;GACF;AACH;;;;;ACrPE,EAAA,QAAAX,SAAA,EAAA,EAAAE,WAAA,CA+BiB,4BA/BjBM,UA+BiB,CAAA;AA9Bf,IAAA,GAAG,EAAC,UAAS;AACZ,IAAA,KAAK,EAAE,QAAa,CAAA,aAAA;AACpB,IAAA,eAAa,EAAE,MAAW,CAAA,WAAA;AAC1B,IAAA,SAAS,EAAE,IAAS,CAAA,SAAA;AACrB,IAAA,WAAS,EAAC,IAAG;AACZ,IAAA,UAAQ,EAAE,IAAO,CAAA,OAAA;AACjB,IAAA,UAAQ,EAAE,IAAO,CAAA,OAAA;KACV,IAAM,CAAA,MAAA,EAAA;AACb,IAAA,QAAM,EAAE,QAAgB,CAAA,gBAAA;AACxB,IAAA,SAAO,EAAE,QAAiB,CAAA,iBAAA;;AAEhB,IAAA,OAAO,UAChB,CAOC,EAAA,IAAA,EARyB,YAAY,EAAE,KAAK,EAAE,MAAO,EAAA,KAAA;MACtDP,UAOC,CAAA,IAAA,CAAA,MAAA,EAAA,SAAA,EAAAW,cAAA,CAAAC,kBAAA,CAAA;AANS,UAAA,IAAA,EAAA,YAAA,CAAA,IAAA;UAAA,KAAA;UAAA,MAAA;UAAA,YAAA;;;AAQD,IAAA,MAAM,UACf,MAAqB;MAArBZ,UAAqB,CAAA,IAAA,CAAA,MAAA,EAAA,QAAA,CAAA;;AAEZ,IAAA,KAAK,UACd,MAAoB;MAApBA,UAAoB,CAAA,IAAA,CAAA,MAAA,EAAA,OAAA,CAAA;;AAEX,IAAA,KAAK,UACd,MAAoB;MAApBA,UAAoB,CAAA,IAAA,CAAA,MAAA,EAAA,OAAA,CAAA;;;;;;;;;AC3B1B,aAAe;EACb,IAAI,EAAE,qBAAqB;;AAE3B,EAAA,MAAM,EAAE;IACN,aAAa;AACb,IAAA,eAAe;IACf,uBAAuB;GACxB;;AAED,EAAA,KAAK,EAAE;;IAEL,IAAI,EAAE;MACJ,QAAQ,EAAE,IAAI;KACf;;IAED,SAAS,EAAE;MACT,IAAI,EAAE,OAAO;MACb,OAAO,EAAE,KAAK;KACf;;AAED;;;AAGA,IAAA,MAAM,EAAE;MACN,IAAI,EAAE,OAAO;MACb,QAAQ,EAAE,IAAI;KACf;;AAED,IAAA,KAAK,EAAE;MACL,IAAI,EAAE,MAAM;AACZ,MAAA,OAAO,EAAE,SAAS;KACnB;;AAED,IAAA,gBAAgB,EAAE;AAChB,MAAA,IAAI,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC;MACrB,OAAO,EAAE,IAAI;KACd;;IAED,UAAU,EAAE;MACV,IAAI,EAAE,OAAO;MACb,OAAO,EAAE,KAAK;KACf;;IAED,GAAG,EAAE;MACH,IAAI,EAAE,MAAM;MACZ,OAAO,EAAE,KAAK;KACf;GACF;;AAED,EAAA,KAAK,EAAE;AACL,IAAA,QAAQ;GACT;;AAED,EAAA,QAAQ,EAAE;IACR,EAAC,CAAE,GAAG;MACJ,IAAI,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,OAAO,IAAI,CAAC,KAAI;;AAElD,MAAA,IAAI,IAAI,CAAC,WAAW,CAAC,QAAS,IAAG,IAAI,CAAC,IAAI,EAAE,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAA;MACtF,MAAM,IAAI,KAAK,CAAC,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,+EAA+E,CAAC,CAAA;KACxI;;AAED,IAAA,IAAK,CAAA,GAAG;AACN,MAAA,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAA,IAAK,CAAA;KAC3C;;IAED,WAAY,CAAA,GAAG;AACb,MAAA,OAAO,IAAI,CAAC,MAAK,IAAK,IAAI,CAAC,WAAW,CAAC,MAAK;KAC7C;GACF;;AAED,EAAA,KAAK,EAAE;IACL,SAAS,EAAE,iBAAiB;;AAE5B,IAAA,GAAG,CAAC,KAAK,EAAE,QAAQ,EAAE;MACnB,IAAI,CAAC,GAAG,CAAC,OAAQ,GAAE,IAAI,CAAC,GAAC;AACzB,MAAA,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;AACd,QAAA,IAAI,CAAC,YAAY,GAAC;AACpB,OAAA;;MAEA,IAAI,IAAI,CAAC,cAAc,EAAE;AACvB;AACA;AACA,QAAA,MAAM,OAAQ,GAAE,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,EAAA;AAC/C,QAAA,MAAM,IAAG,GAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,EAAA;AACzC,QAAA,IAAI,OAAQ,IAAG,IAAG,IAAK,OAAM,KAAM,IAAI,EAAE;UACvC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAA;AACxB,SAAA;AACF,OAAA;KACD;;AAED,IAAA,WAAU,CAAE,CAAC,KAAK,EAAE;AAClB,MAAA,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;AACd,QAAA,IAAI,KAAK,EAAE;UACT,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;AAC/C,YAAA,IAAI,CAAC,aAAa,CAAC,gBAAgB,GAAC;YACpC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,IAAI,KAAG;AAClD,WAAA;SACA,MAAK;UACL,IAAI,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;AAC9C,YAAA,IAAI,CAAC,aAAa,CAAC,gBAAgB,GAAC;YACpC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,IAAI,MAAI;AACnD,WAAA;AACF,SAAA;AACF,OAAA;;AAEA,MAAA,IAAI,IAAI,CAAC,qBAAqB,EAAE;AAC9B,QAAA,IAAI,KAAK,EAAE;AACT,UAAA,IAAI,CAAC,WAAW,GAAC;SACjB,MAAK;AACL,UAAA,IAAI,CAAC,aAAa,GAAC;AACrB,SAAA;OACA,MAAK,IAAI,SAAS,IAAI,CAAC,sBAAuB,KAAI,IAAI,CAAC,EAAE,EAAE;AAC3D,QAAA,IAAI,CAAC,UAAU,GAAC;AAClB,OAAA;KACD;GACF;;AAED,EAAA,OAAM,CAAE,GAAG;IACT,IAAI,IAAI,CAAC,SAAS,EAAE,MAAK;;AAEzB,IAAA,IAAI,CAAC,wBAAuB,GAAI,KAAG;AACnC,IAAA,IAAI,CAAC,eAAe,GAAC;;AAErB,IAAA,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE;AAC/B,MAAA,KAAK,MAAM,CAAA,IAAK,IAAI,CAAC,gBAAgB,EAAE;QACrC,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,YAAY,EAAA;AAC/D,OAAA;;AAEA,MAAA,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,CAAC,gBAAgB,EAAE,IAAI,CAAC,eAAe,EAAA;AACvE,KAAA;GACD;;AAED,EAAA,OAAM,CAAE,GAAG;AACT,IAAA,IAAI,IAAI,CAAC,WAAW,EAAE;AACpB,MAAA,IAAI,CAAC,UAAU,GAAC;AAChB,MAAA,IAAI,CAAC,WAAW,GAAC;AACnB,KAAA;GACD;;AAED,EAAA,aAAY,CAAE,GAAG;AACf,IAAA,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAAC,eAAe,EAAA;AACtE,IAAA,IAAI,CAAC,aAAa,GAAC;GACpB;;AAED,EAAA,OAAO,EAAE;IACP,UAAW,CAAA,GAAG;AACZ,MAAA,IAAI,IAAI,CAAC,WAAW,EAAE;AACpB,QAAA,IAAI,IAAI,CAAC,wBAAwB,IAAI,CAAC,EAAE,EAAE;AACxC,UAAA,IAAI,CAAC,mBAAoB,GAAE,IAAI,CAAC,GAAC;AACjC,UAAA,IAAI,CAAC,wBAAuB,GAAI,KAAG;AACnC,UAAA,IAAI,CAAC,sBAAqB,GAAI,KAAG;UACjC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,EAAA;AAC1B,SAAA;OACA,MAAK;AACL,QAAA,IAAI,CAAC,wBAAuB,GAAI,IAAI,CAAC,GAAC;AACxC,OAAA;KACD;;AAED,IAAA,eAAc,CAAE,GAAG;MACjB,IAAI,IAAI,CAAC,SAAQ,IAAK,CAAC,IAAI,CAAC,qBAAqB,EAAE;AACjD,QAAA,IAAI,CAAC,WAAY,GAAE,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM;AAC3C,UAAA,IAAI,CAAC,YAAY,GAAC;AACpB,SAAC,EAAE;AACD,UAAA,IAAI,EAAE,IAAI;SACX,EAAA;OACD,MAAK,IAAI,IAAI,CAAC,WAAW,EAAE;AAC3B,QAAA,IAAI,CAAC,WAAW,GAAC;AACjB,QAAA,IAAI,CAAC,cAAc,KAAG;AACxB,OAAA;KACD;;IAED,eAAc,CAAE,CAAC,EAAE,KAAM,EAAC,EAAE;;MAE1B,IAAI,CAAC,IAAI,CAAC,WAAY,IAAG,KAAK,EAAE;AAC9B,QAAA,IAAI,CAAC,sBAAuB,GAAE,IAAI,CAAC,GAAC;AACtC,OAAA;;AAEA,MAAA,IAAI,IAAI,CAAC,wBAAyB,KAAI,IAAI,CAAC,EAAG,IAAG,KAAI,IAAK,CAAC,IAAI,CAAC,IAAI,EAAE;AACpE,QAAA,IAAI,CAAC,UAAU,GAAC;AAClB,OAAA;KACD;;AAED,IAAA,YAAa,CAAA,GAAG;AACd,MAAA,IAAI,CAAC,UAAU,GAAC;KACjB;;AAED,IAAA,WAAU,CAAE,CAAC,EAAE,EAAE;AACf,MAAA,IAAI,CAAC,SAAS,CAAC,MAAM;AACnB,QAAA,IAAI,IAAI,CAAC,EAAC,KAAM,EAAE,EAAE;AAClB,UAAA,MAAM,KAAM,GAAE,IAAI,CAAC,GAAG,CAAC,YAAU;AACjC,UAAA,MAAM,MAAK,GAAI,IAAI,CAAC,GAAG,CAAC,aAAW;AACnC,UAAA,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,MAAM,EAAA;AACrC,SAAA;QACA,IAAI,CAAC,mBAAoB,GAAE,KAAG;OAC/B,EAAA;KACF;;AAED,IAAA,gBAAiB,CAAA,CAAC,KAAK,EAAE,MAAM,EAAE;AAC/B,MAAA,MAAM,IAAG,GAAI,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,SAAQ,KAAM,UAAS,GAAI,MAAK,GAAI,KAAK,EAAA;MAC5E,IAAI,QAAQ,IAAI,CAAC,IAAG,KAAM,IAAI,EAAE;AAC9B,QAAA,IAAI,CAAC,SAAS,CAAC,IAAI,EAAA;AACrB,OAAA;KACD;;AAED,IAAA,SAAQ,CAAE,CAAC,IAAI,EAAE;MACf,IAAI,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;AAC9C,QAAA,IAAI,CAAC,aAAa,CAAC,gBAAgB,GAAC;QACpC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAE,GAAE,UAAQ;AACvD,OAAA;AACA,MAAA,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAA,GAAI,KAAG;MACrC,IAAI,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAA;KAClD;;IAED,WAAY,CAAA,GAAG;AACb,MAAA,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,MAAK;MACtC,IAAI,IAAI,CAAC,cAAc,EAAE,MAAK;AAC9B,MAAA,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAA;MAC3C,IAAI,CAAC,GAAG,CAAC,OAAQ,GAAE,IAAI,CAAC,GAAC;AACzB,MAAA,IAAI,CAAC,GAAG,CAAC,aAAc,GAAE,IAAI,CAAC,SAAO;MACrC,IAAI,CAAC,cAAe,GAAE,KAAG;KAC1B;;AAED,IAAA,aAAY,CAAE,GAAG;AACf,MAAA,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,MAAK;MACtC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,MAAK;AAC/B,MAAA,IAAI,CAAC,qBAAqB,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAA;AAC7C,MAAA,IAAI,CAAC,GAAG,CAAC,aAAc,GAAE,UAAQ;MACjC,IAAI,CAAC,iBAAiB,MAAI;KAC3B;;IAED,QAAO,CAAE,CAAC,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE;AAC3B,MAAA,IAAI,IAAI,CAAC,EAAC,KAAM,EAAE,EAAE;AAClB,QAAA,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,MAAM,EAAA;AACrC,OAAA;KACD;GACF;;AAED,EAAA,MAAK,CAAE,GAAG;AACR,IAAA,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAA;GACzC;AACH;;;;ACjPe,gBAEP,IAAA;AAAA,EAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAE;AAAA,IAAA,WAAA,GAAA,IAAA,CADJa,MAAM;IAANA,MAAM,GAAA,WAAA,KAAA,KAAA,CAAA,GAAG,UAAAC,EAAE,EAAA;AAAA,MAAA,OAAIA,EAAE,CAACC,IAAI,CAACC,EAAE,CAAA;AAAA,KAAA,GAAA,WAAA,CAAA;AAEzB,EAAA,IAAMC,KAAK,GAAGC,QAAQ,CAAC,EAAE,CAAC,CAAA;;AAE1B;EACA,OAAO;AACLC,IAAAA,IAAI,EAAI,SAAA,IAAA,GAAA;MACN,OAAO;AACLC,QAAAA,OAAO,EAAE,IAAA;OACV,CAAA;KACF;AAEDC,IAAAA,OAAO,EAAI,SAAA,OAAA,GAAA;AAAA,MAAA,IAAA,KAAA,GAAA,IAAA,CAAA;MACT,IAAI,CAACC,IAAI,GAAG,IAAI,CAAA;AAChB,MAAA,IAAI,OAAOT,MAAM,KAAK,UAAU,EAAE;QAChC,IAAI,CAACU,OAAO,GAAG,YAAA;AAAA,UAAA,OAAMV,MAAM,CAACW,IAAI,CAAC,KAAI,EAAE,KAAI,CAAC,CAAA;AAAA,SAAA,CAAA;AAC9C,OAAC,MAAM;QACL,IAAI,CAACD,OAAO,GAAG,YAAA;UAAA,OAAM,KAAI,CAACV,MAAM,CAAC,CAAA;AAAA,SAAA,CAAA;AACnC,OAAA;AACA,MAAA,IAAI,CAACY,MAAM,CAAC,IAAI,CAACF,OAAO,EAAE;QACxBG,OAAO,EAAA,SAAA,OAAA,CAAE1C,KAAK,EAAE;AAAA,UAAA,IAAA,MAAA,GAAA,IAAA,CAAA;UACd,IAAI,CAAC2C,SAAS,CAAC,YAAM;YACnB,MAAI,CAACL,IAAI,GAAGtC,KAAK,CAAA;AACnB,WAAC,CAAC,CAAA;SACH;AACD4C,QAAAA,SAAS,EAAE,IAAA;AACb,OAAC,CAAC,CAAA;MACF,IAAI,CAACC,eAAe,EAAE,CAAA;KACvB;AAEDC,IAAAA,YAAY,EAAI,SAAA,YAAA,GAAA;MACd,IAAI,CAACD,eAAe,EAAE,CAAA;KACvB;AAEDE,IAAAA,OAAO,EAAE;AACP;AACN;AACA;AACA,SACMC,aAAa,EAAEhB,SAAAA,aAAAA,CAAAA,EAAE,EAAE;AACjB,QAAA,IAAMiB,OAAO,GAAG,IAAI,CAACC,QAAQ,CAACd,OAAO,CAAA;AACrC,QAAA,IAAI,OAAOa,OAAO,KAAK,UAAU,EAAE;UACjC,IAAMd,IAAI,GAAGc,OAAO,CAACT,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;AACrCP,UAAAA,KAAK,CAACD,EAAE,CAAC,GAAGG,IAAI,CAAA;UAChB,IAAI,CAACG,IAAI,GAAGN,EAAE,CAAA;AACd,UAAA,OAAOG,IAAI,CAAA;AACb,SAAC,MAAM;AACL,UAAA,MAAM,IAAIgB,KAAK,CAAC,qEAAqE,CAAC,CAAA;AACxF,SAAA;OACD;AAED;AACN;AACA,SACMN,eAAe,EAAI,SAAA,eAAA,GAAA;AACjB,QAAA,IAAMb,EAAE,GAAG,IAAI,CAACO,OAAO,EAAE,CAAA;QACzB,IAAIP,EAAE,IAAI,IAAI,EAAE;AACdoB,UAAAA,OAAO,CAACC,IAAI,CAA0CxB,wCAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAK,IAAA,CAAA,CAAA,CAAA;AACnE,SAAA;AACA,QAAA,IAAIG,EAAE,KAAK,IAAI,CAACM,IAAI,EAAE;AACpB,UAAA,IAAI,CAACL,KAAK,CAACD,EAAE,CAAC,EAAE;AACd,YAAA,IAAI,CAACgB,aAAa,CAAChB,EAAE,CAAC,CAAA;AACxB,WAAA;AACA,UAAA,IAAI,CAACI,OAAO,GAAGH,KAAK,CAACD,EAAE,CAAC,CAAA;AAC1B,SAAA;AACF,OAAA;AACF,KAAA;GACD,CAAA;AACH;;ACzDA,SAASsB,kBAAkB,CAAEC,GAAG,EAAEC,MAAM,EAAE;AACxCD,EAAAA,GAAG,CAACE,SAAS,CAAA,EAAA,CAAA,MAAA,CAAID,MAAM,EAAA,kBAAA,CAAA,EAAoB9B,QAAe,CAAC,CAAA;AAC3D6B,EAAAA,GAAG,CAACE,SAAS,CAAA,EAAA,CAAA,MAAA,CAAID,MAAM,EAAA,iBAAA,CAAA,EAAmB9B,QAAe,CAAC,CAAA;AAC1D6B,EAAAA,GAAG,CAACE,SAAS,CAAA,EAAA,CAAA,MAAA,CAAID,MAAM,EAAA,kBAAA,CAAA,EAAoBE,QAAe,CAAC,CAAA;AAC3DH,EAAAA,GAAG,CAACE,SAAS,CAAA,EAAA,CAAA,MAAA,CAAID,MAAM,EAAA,iBAAA,CAAA,EAAmBE,QAAe,CAAC,CAAA;AAC1DH,EAAAA,GAAG,CAACE,SAAS,CAAA,EAAA,CAAA,MAAA,CAAID,MAAM,EAAA,uBAAA,CAAA,EAAyBG,MAAmB,CAAC,CAAA;AACpEJ,EAAAA,GAAG,CAACE,SAAS,CAAA,EAAA,CAAA,MAAA,CAAID,MAAM,EAAA,qBAAA,CAAA,EAAuBG,MAAmB,CAAC,CAAA;AACpE,CAAA;AAEA,IAAMC,MAAM,GAAG;AACb;AACAC,EAAAA,OAAO,EAAEC,cAAO;AAChBC,EAAAA,OAAO,EAAER,SAAAA,OAAAA,CAAAA,GAAG,EAAES,OAAO,EAAE;IACrB,IAAMC,YAAY,GAAGzD,MAAM,CAAC0D,MAAM,CAAC,EAAE,EAAE;AACrCC,MAAAA,iBAAiB,EAAE,IAAI;AACvBC,MAAAA,gBAAgB,EAAE,EAAA;KACnB,EAAEJ,OAAO,CAAC,CAAA;AAEX,IAAA,KAAK,IAAMK,GAAG,IAAIJ,YAAY,EAAE;AAC9B,MAAA,IAAI,OAAOA,YAAY,CAACI,GAAG,CAAC,KAAK,WAAW,EAAE;AAC5CC,QAAAA,MAAM,CAACD,GAAG,CAAC,GAAGJ,YAAY,CAACI,GAAG,CAAC,CAAA;AACjC,OAAA;AACF,KAAA;IAEA,IAAIJ,YAAY,CAACE,iBAAiB,EAAE;AAClCb,MAAAA,kBAAkB,CAACC,GAAG,EAAEU,YAAY,CAACG,gBAAgB,CAAC,CAAA;AACxD,KAAA;AACF,GAAA;AACF;;;;"}