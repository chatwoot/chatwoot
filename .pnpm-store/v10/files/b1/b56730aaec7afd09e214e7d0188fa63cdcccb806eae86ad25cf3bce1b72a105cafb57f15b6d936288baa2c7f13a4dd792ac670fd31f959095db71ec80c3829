{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  warningHandler,\n  errorHandler,\n  FormKitHandlerPayload,\n  FormKitNode,\n  FormKitMiddleware,\n} from '@formkit/core'\n\n/**\n * Catalog of the error message codes in FormKit.\n * @public\n */\nconst errors: Record<\n  string | number,\n  string | ((error: FormKitHandlerPayload) => string)\n> = {\n  /**\n   * FormKit errors:\n   */\n  100: ({ data: node }: { data: FormKitNode }) =>\n    `Only groups, lists, and forms can have children (${node.name}).`,\n  101: ({ data: node }: { data: FormKitNode }) =>\n    `You cannot directly modify the store (${node.name}). See: https://formkit.com/advanced/core#message-store`,\n  102: ({\n    data: [node, property],\n  }: {\n    data: [node: FormKitNode, property: string]\n  }) => `You cannot directly assign node.${property} (${node.name})`,\n  103: ({ data: [operator] }) =>\n    `Schema expressions cannot start with an operator (${operator})`,\n  104: ({ data: [operator, expression] }) =>\n    `Schema expressions cannot end with an operator (${operator} in \"${expression}\")`,\n  105: ({ data: expression }) => `Invalid schema expression: ${expression}`,\n  106: ({ data: name }) => `Cannot submit because (${name}) is not in a form.`,\n  107: ({ data: [node, value] }: { data: [FormKitNode, unknown] }) =>\n    `Cannot set ${node.name} to non object value: ${value}`,\n  108: ({ data: [node, value] }: { data: [FormKitNode, unknown] }) =>\n    `Cannot set ${node.name} to non array value: ${value}`,\n  /**\n   * Input specific errors:\n   */\n  300: ({ data: [node] }: { data: [FormKitNode, unknown] }) =>\n    `Cannot set behavior prop to overscroll (on ${node.name} input) when options prop is a function.`,\n  /**\n   * FormKit vue errors:\n   */\n  600: ({ data: node }: { data: FormKitNode }) =>\n    `Unknown input type${\n      typeof node.props.type === 'string' ? ' \"' + node.props.type + '\"' : ''\n    } (\"${node.name}\")`,\n  601: ({ data: node }: { data: FormKitNode }) =>\n    `Input definition${\n      typeof node.props.type === 'string' ? ' \"' + node.props.type + '\"' : ''\n    } is missing a schema or component property (${node.name}).`,\n}\n\n/**\n * Catalog of the warning message codes in FormKit.\n * @public\n */\nconst warnings: Record<\n  string | number,\n  string | ((error: FormKitHandlerPayload) => string)\n> = {\n  /**\n   * Core warnings:\n   */\n  150: ({ data: fn }: { data: string }) =>\n    `Schema function \"${fn}()\" is not a valid function.`,\n  151: ({ data: id }: { data: string }) => `No form element with id: ${id}`,\n  152: ({ data: id }: { data: string }) => `No input element with id: ${id}`,\n  /**\n   * Input specific warnings:\n   */\n  350: ({\n    data: { node, inputType },\n  }: {\n    data: {\n      node: FormKitNode\n      inputType: string\n    }\n  }) =>\n    `Invalid options prop for ${node.name} input (${inputType}). See https://formkit.com/inputs/${inputType}`,\n  /**\n   * Vue warnings:\n   */\n  650: 'Schema \"$get()\" must use the id of an input to access.',\n  651: ({ data: id }: { data: string }) =>\n    `Cannot setErrors() on \"${id}\" because no such id exists.`,\n  652: ({ data: id }: { data: string }) =>\n    `Cannot clearErrors() on \"${id}\" because no such id exists.`,\n  /**\n   * Deprecation warnings:\n   */\n  800: ({ data: name }: { data: string }) => `${name} is deprecated.`,\n}\n\n/**\n * Decodes an error that is being emitted and console logs it.\n * @param error - The error currently being handled\n * @param next - Call additional handlers\n * @returns\n */\nconst decodeErrors: FormKitMiddleware<FormKitHandlerPayload> = (\n  error: FormKitHandlerPayload,\n  next\n) => {\n  if (error.code in errors) {\n    const err = errors[error.code]\n    error.message = typeof err === 'function' ? err(error) : err\n  }\n  return next(error)\n}\n\nlet registered = false\n\n/**\n * Register the dev handler (idempotent).\n *\n * @public\n */\nfunction register() {\n  if (!registered) {\n    errorHandler(decodeErrors)\n    warningHandler(decodeWarnings)\n    registered = true\n  }\n}\n\n/**\n * Decodes an error that is being emitted and console logs it.\n * @param error - The error currently being handled\n * @param next - Call additional handlers\n * @returns\n */\nconst decodeWarnings: FormKitMiddleware<FormKitHandlerPayload> = (\n  warning: FormKitHandlerPayload,\n  next\n) => {\n  if (warning.code in warnings) {\n    const warn = warnings[warning.code]\n    warning.message = typeof warn === 'function' ? warn(warning) : warn\n  }\n  return next(warning)\n}\n\n// Some bundlers need to see an export:\nexport { errors, warnings, register }\n"]}