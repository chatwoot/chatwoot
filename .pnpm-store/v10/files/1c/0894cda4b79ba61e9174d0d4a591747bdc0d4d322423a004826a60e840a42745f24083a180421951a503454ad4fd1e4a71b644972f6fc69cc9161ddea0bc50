{"version":3,"file":"exports-default.js","sources":["../../../src/metrics/exports-default.ts"],"sourcesContent":["import type {\n  Client,\n  DurationUnit,\n  MetricData,\n  Metrics,\n  MetricsAggregator as MetricsAggregatorInterface,\n} from '@sentry/types';\nimport { MetricsAggregator } from './aggregator';\nimport { metrics as metricsCore } from './exports';\n\n/**\n * Adds a value to a counter metric\n *\n * @experimental This API is experimental and might have breaking changes in the future.\n */\nfunction increment(name: string, value: number = 1, data?: MetricData): void {\n  metricsCore.increment(MetricsAggregator, name, value, data);\n}\n\n/**\n * Adds a value to a distribution metric\n *\n * @experimental This API is experimental and might have breaking changes in the future.\n */\nfunction distribution(name: string, value: number, data?: MetricData): void {\n  metricsCore.distribution(MetricsAggregator, name, value, data);\n}\n\n/**\n * Adds a value to a set metric. Value must be a string or integer.\n *\n * @experimental This API is experimental and might have breaking changes in the future.\n */\nfunction set(name: string, value: number | string, data?: MetricData): void {\n  metricsCore.set(MetricsAggregator, name, value, data);\n}\n\n/**\n * Adds a value to a gauge metric\n *\n * @experimental This API is experimental and might have breaking changes in the future.\n */\nfunction gauge(name: string, value: number, data?: MetricData): void {\n  metricsCore.gauge(MetricsAggregator, name, value, data);\n}\n\n/**\n * Adds a timing metric.\n * The metric is added as a distribution metric.\n *\n * You can either directly capture a numeric `value`, or wrap a callback function in `timing`.\n * In the latter case, the duration of the callback execution will be captured as a span & a metric.\n *\n * @experimental This API is experimental and might have breaking changes in the future.\n */\nfunction timing(name: string, value: number, unit?: DurationUnit, data?: Omit<MetricData, 'unit'>): void;\nfunction timing<T>(name: string, callback: () => T, unit?: DurationUnit, data?: Omit<MetricData, 'unit'>): T;\nfunction timing<T = void>(\n  name: string,\n  value: number | (() => T),\n  unit: DurationUnit = 'second',\n  data?: Omit<MetricData, 'unit'>,\n): T | void {\n  return metricsCore.timing(MetricsAggregator, name, value, unit, data);\n}\n\n/**\n * Returns the metrics aggregator for a given client.\n */\nfunction getMetricsAggregatorForClient(client: Client): MetricsAggregatorInterface {\n  return metricsCore.getMetricsAggregatorForClient(client, MetricsAggregator);\n}\n\nexport const metricsDefault: Metrics & {\n  getMetricsAggregatorForClient: typeof getMetricsAggregatorForClient;\n} = {\n  increment,\n  distribution,\n  set,\n  gauge,\n  timing,\n  /**\n   * @ignore This is for internal use only.\n   */\n  getMetricsAggregatorForClient,\n};\n"],"names":["metricsCore"],"mappings":";;;AAUA;AACA;AACA;AACA;AACA;AACA,SAAS,SAAS,CAAC,IAAI,EAAU,KAAK,GAAW,CAAC,EAAE,IAAI,EAAqB;AAC7E,EAAEA,OAAW,CAAC,SAAS,CAAC,iBAAiB,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,CAAA;AAC7D,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,YAAY,CAAC,IAAI,EAAU,KAAK,EAAU,IAAI,EAAqB;AAC5E,EAAEA,OAAW,CAAC,YAAY,CAAC,iBAAiB,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,CAAA;AAChE,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,GAAG,CAAC,IAAI,EAAU,KAAK,EAAmB,IAAI,EAAqB;AAC5E,EAAEA,OAAW,CAAC,GAAG,CAAC,iBAAiB,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,CAAA;AACvD,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,KAAK,CAAC,IAAI,EAAU,KAAK,EAAU,IAAI,EAAqB;AACrE,EAAEA,OAAW,CAAC,KAAK,CAAC,iBAAiB,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,CAAA;AACzD,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAAS,MAAM;AACf,EAAE,IAAI;AACN,EAAE,KAAK;AACP,EAAE,IAAI,GAAiB,QAAQ;AAC/B,EAAE,IAAI;AACN,EAAY;AACZ,EAAE,OAAOA,OAAW,CAAC,MAAM,CAAC,iBAAiB,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;AACvE,CAAA;AACA;AACA;AACA;AACA;AACA,SAAS,6BAA6B,CAAC,MAAM,EAAsC;AACnF,EAAE,OAAOA,OAAW,CAAC,6BAA6B,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAA;AAC7E,CAAA;AACA;MACa,cAAc;AACzB;AACF,GAAI;AACJ,EAAE,SAAS;AACX,EAAE,YAAY;AACd,EAAE,GAAG;AACL,EAAE,KAAK;AACP,EAAE,MAAM;AACR;AACA;AACA;AACA,EAAE,6BAA6B;AAC/B;;;;"}