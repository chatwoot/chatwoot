{"version":3,"file":"index.js","sources":["../src/util/location.ts","../src/parse-error/module-errors.ts","../src/parse-error/to-node-description.ts","../src/parse-error/standard-errors.ts","../src/parse-error/strict-mode-errors.ts","../src/parse-error/pipeline-operator-errors.ts","../src/parse-error.ts","../src/plugins/estree.ts","../src/tokenizer/context.ts","../src/tokenizer/types.ts","../../babel-helper-validator-identifier/src/identifier.ts","../../babel-helper-validator-identifier/src/keyword.ts","../src/util/identifier.ts","../src/util/scope.ts","../src/plugins/flow/scope.ts","../src/parser/base.ts","../src/parser/comments.ts","../src/util/whitespace.ts","../src/tokenizer/state.ts","../../babel-helper-string-parser/src/index.ts","../src/tokenizer/index.ts","../src/util/class-scope.ts","../src/util/expression-scope.ts","../src/util/production-parameter.ts","../src/parser/util.ts","../src/parser/node.ts","../src/plugins/flow/index.ts","../src/plugins/jsx/xhtml.ts","../src/plugins/jsx/index.ts","../src/plugins/typescript/scope.ts","../src/parser/lval.ts","../src/plugins/typescript/index.ts","../src/plugins/placeholders.ts","../src/plugins/v8intrinsic.ts","../src/plugin-utils.ts","../src/options.ts","../src/parser/expression.ts","../src/parser/statement.ts","../src/parser/index.ts","../src/index.ts"],"sourcesContent":["export type Pos = {\n  start: number;\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: string | undefined | null;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n","import type { ParseErrorTemplates } from \"../parse-error.ts\";\n\nconst code = \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\";\n\nexport default {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with 'sourceType: \"module\"'`,\n    code,\n  },\n  ImportOutsideModule: {\n    message: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    code,\n  },\n} satisfies ParseErrorTemplates;\n","const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = keyof Omit<\n  typeof NodeDescriptions,\n  \"UpdateExpression\"\n>;\n\ntype NodeWithDescription =\n  | {\n      type: \"UpdateExpression\";\n      prefix: boolean;\n    }\n  | {\n      type: NodeTypesWithDescriptions;\n    };\n\nconst toNodeDescription = (node: NodeWithDescription) =>\n  node.type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[`${node.prefix}`]\n    : NodeDescriptions[node.type];\n\nexport default toNodeDescription;\n","import type { ParseErrorTemplates } from \"../parse-error.ts\";\nimport toNodeDescription from \"./to-node-description.ts\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\"; prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"ImportSpecifier\"\n        | \"ImportNamespaceSpecifier\"\n        | \"ImportDefaultSpecifier\"\n        | \"ParenthesizedExpression\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\";\n    };\n\nexport default {\n  AccessorIsGenerator: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `A ${kind}ter cannot be a generator.`,\n  ArgumentsInClass:\n    \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock:\n    \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter:\n    \"'await' is not allowed in async function parameters.\",\n  AwaitUsingNotInAsyncContext:\n    \"'await using' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncContext:\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accessor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accessor must have exactly one formal parameter.\",\n  BadSetterRestParameter:\n    \"A 'set' accessor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: ({\n    kind,\n  }: {\n    kind: \"await using\" | \"const\" | \"destructuring\" | \"using\";\n  }) => `Missing initializer in ${kind} declaration.`,\n  DecoratorArgumentsOutsideParentheses:\n    \"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.\",\n  DecoratorsBeforeAfterExport:\n    \"Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeferImportRequiresNamespace:\n    'Only `import defer * as x from \"./module\"` is valid.',\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: ({ exportName }: { exportName: string }) =>\n    `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  DynamicImportPhaseRequiresImportExpressions: ({ phase }: { phase: string }) =>\n    `'import.${phase}(...)' can only be parsed when using the 'createImportExpressions' option.`,\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: ({\n    localName,\n    exportName,\n  }: {\n    localName: string;\n    exportName: string;\n  }) =>\n    `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ExportDefaultFromAsIdentifier:\n    \"'from' is not allowed as an identifier after 'export default'.\",\n\n  ForInOfLoopInitializer: ({\n    type,\n  }: {\n    type: \"ForInStatement\" | \"ForOfStatement\";\n  }) =>\n    `'${\n      type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n    }' loop variable declaration may not have an initializer.`,\n  ForInUsing: \"For-in loop may not start with 'using' declaration.\",\n\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block.\",\n\n  IllegalBreakContinue: ({\n    type,\n  }: {\n    type: \"BreakStatement\" | \"ContinueStatement\";\n  }) => `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportAttributesUseAssert:\n    \"The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedImportAssert` parser plugin to suppress this error.\",\n  ImportBindingIsString: ({ importName }: { importName: string }) =>\n    `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ImportCallArity: `\\`import()\\` requires exactly one or two arguments.`,\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault:\n    \"A JSON module can only be imported with `default`.\",\n  ImportReflectionHasAssertion: \"`import module x` cannot have assertions.\",\n  ImportReflectionNotBinding:\n    'Only `import module x from \"./module\"` is valid.',\n  IncompatibleRegExpUVFlags:\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: ({ radix }: { radix: number }) =>\n    `Expected number in radix ${radix}.`,\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Escape sequence in keyword ${reservedWord}.`,\n  InvalidIdentifier: ({ identifierName }: { identifierName: string }) =>\n    `Invalid identifier ${identifierName}.`,\n  InvalidLhs: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsBinding: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsOptionalChaining: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid optional chaining in the left-hand side of ${toNodeDescription(\n      ancestor,\n    )}.`,\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent:\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: ({ unexpected }: { unexpected: string }) =>\n    `Unexpected character '${unexpected}'.`,\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: ({\n    identifierName,\n  }: {\n    identifierName: string;\n  }) => `Private name #${identifierName} is not defined.`,\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty:\n    \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: ({ labelName }: { labelName: string }) =>\n    `Label '${labelName}' is already declared.`,\n  LetInLexicalBinding: \"'let' is disallowed as a lexically bound name.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: ({ missingPlugin }: { missingPlugin: [string] }) =>\n    `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also, seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: ({ missingPlugin }: { missingPlugin: string[] }) =>\n    `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType:\n    \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue:\n    \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: ({ key }: { key: string }) =>\n    `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ModuleExportNameHasLoneSurrogate: ({\n    surrogateCharCode,\n  }: {\n    surrogateCharCode: number;\n  }) =>\n    `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n      16,\n    )}'.`,\n  ModuleExportUndefined: ({ localName }: { localName: string }) =>\n    `Export '${localName}' is not defined.`,\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar:\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor:\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: ({ identifierName }: { identifierName: string }) =>\n    `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  PrivateNameRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Duplicate private name #${identifierName}.`,\n  RecordExpressionBarIncorrectEndSyntaxType:\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType:\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType:\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level or inside a block.\",\n  SloppyFunctionAnnexB:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  SourcePhaseImportRequiresDefault:\n    'Only `import source x from \"./module\"` is valid.',\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed:\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType:\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: ({ keyword }: { keyword: string }) =>\n    `Unexpected keyword '${keyword}'.`,\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget:\n    \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Unexpected reserved word '${reservedWord}'.`,\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: ({\n    expected,\n    unexpected,\n  }: {\n    expected?: string | null;\n    unexpected?: string | null;\n  }) =>\n    `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n      expected ? `, expected \"${expected}\"` : \"\"\n    }`,\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnexpectedUsingDeclaration:\n    \"Using declaration cannot appear in the top level when source type is `script`.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport:\n    \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport:\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: ({\n    target,\n    onlyValidPropertyName,\n  }: {\n    target: string;\n    onlyValidPropertyName: string;\n  }) =>\n    `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  UnsupportedParameterDecorator:\n    \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator:\n    \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper:\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  UsingDeclarationExport: \"Using declaration cannot be exported.\",\n  UsingDeclarationHasBindingPattern:\n    \"Using declaration cannot have destructuring patterns.\",\n  VarRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Identifier '${identifierName}' has already been declared.`,\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0.\",\n} satisfies ParseErrorTemplates;\n","import type { ParseErrorTemplates } from \"../parse-error\";\n\nexport default {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: ({ referenceName }: { referenceName: string }) =>\n    `Assigning to '${referenceName}' in strict mode.`,\n\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: ({ bindingName }: { bindingName: string }) =>\n    `Binding '${bindingName}' in strict mode.`,\n\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n\n  StrictWith: \"'with' in strict mode.\",\n} satisfies ParseErrorTemplates;\n","import type { ParseErrorTemplates } from \"../parse-error.ts\";\nimport toNodeDescription from \"./to-node-description.ts\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n] as const);\n\ntype GetSetMemberType<T extends Set<any>> =\n  T extends Set<infer M> ? M : unknown;\n\nexport type UnparenthesizedPipeBodyTypes = GetSetMemberType<\n  typeof UnparenthesizedPipeBodyDescriptions\n>;\n\nexport default {\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter:\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound:\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: ({ token }: { token: string }) =>\n    `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  PipeTopicUnused:\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: ({ type }: { type: UnparenthesizedPipeBodyTypes }) =>\n    `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n      type,\n    })}; please wrap it in parentheses.`,\n\n  // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n  // are retained for backwards compatibility\n  // with the deprecated smart-mix pipe operator proposal plugin.\n  // They are subject to removal in a future major version.\n  PipelineBodyNoArrow:\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression:\n    \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression:\n    \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused:\n    \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed:\n    \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n} satisfies ParseErrorTemplates;\n","import { Position } from \"./util/location.ts\";\n\ntype SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\ntype ParseErrorCode =\n  | \"BABEL_PARSER_SYNTAX_ERROR\"\n  | \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  missingPlugin?: string | string[];\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = (\n  loc: Position,\n  details: ErrorDetails,\n) => ParseError<ErrorDetails>;\n\ntype ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\ntype ParseErrorCredentials<ErrorDetails> = {\n  code: string;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  toMessage: ToMessage<ErrorDetails>;\n};\n\nfunction defineHidden(obj: object, key: string, value: unknown) {\n  Object.defineProperty(obj, key, {\n    enumerable: false,\n    configurable: true,\n    value,\n  });\n}\n\nfunction toParseErrorConstructor<ErrorDetails extends object>({\n  toMessage,\n  code,\n  reasonCode,\n  syntaxPlugin,\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  const hasMissingPlugin =\n    reasonCode === \"MissingPlugin\" || reasonCode === \"MissingOneOfPlugins\";\n\n  if (!process.env.BABEL_8_BREAKING) {\n    const oldReasonCodes: Record<string, string> = {\n      AccessorCannotDeclareThisParameter: \"AccesorCannotDeclareThisParameter\",\n      AccessorCannotHaveTypeParameters: \"AccesorCannotHaveTypeParameters\",\n      ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n        \"ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference\",\n      SetAccessorCannotHaveOptionalParameter:\n        \"SetAccesorCannotHaveOptionalParameter\",\n      SetAccessorCannotHaveRestParameter: \"SetAccesorCannotHaveRestParameter\",\n      SetAccessorCannotHaveReturnType: \"SetAccesorCannotHaveReturnType\",\n    };\n    if (oldReasonCodes[reasonCode]) {\n      reasonCode = oldReasonCodes[reasonCode];\n    }\n  }\n\n  return function constructor(loc: Position, details: ErrorDetails) {\n    const error: ParseError<ErrorDetails> = new SyntaxError() as any;\n\n    error.code = code as ParseErrorCode;\n    error.reasonCode = reasonCode;\n    error.loc = loc;\n    error.pos = loc.index;\n\n    error.syntaxPlugin = syntaxPlugin;\n    if (hasMissingPlugin) {\n      error.missingPlugin = (details as any).missingPlugin;\n    }\n\n    type Overrides = {\n      loc?: Position;\n      details?: ErrorDetails;\n    };\n    defineHidden(error, \"clone\", function clone(overrides: Overrides = {}) {\n      const { line, column, index } = overrides.loc ?? loc;\n      return constructor(new Position(line, column, index), {\n        ...details,\n        ...overrides.details,\n      });\n    });\n\n    defineHidden(error, \"details\", details);\n\n    Object.defineProperty(error, \"message\", {\n      configurable: true,\n      get(this: ParseError<ErrorDetails>): string {\n        const message = `${toMessage(details)} (${loc.line}:${loc.column})`;\n        this.message = message;\n        return message;\n      },\n      set(value: string) {\n        Object.defineProperty(this, \"message\", { value, writable: true });\n      },\n    });\n\n    return error;\n  };\n}\n\ntype ParseErrorTemplate =\n  | string\n  | ToMessage<any>\n  | { message: string | ToMessage<any>; code?: ParseErrorCode };\n\nexport type ParseErrorTemplates = { [reasonCode: string]: ParseErrorTemplate };\n\n// This is the templated form of `ParseErrorEnum`.\n//\n// Note: We could factor out the return type calculation into something like\n// `ParseErrorConstructor<T extends ParseErrorTemplates>`, and then we could\n// reuse it in the non-templated form of `ParseErrorEnum`, but TypeScript\n// doesn't seem to drill down that far when showing you the computed type of\n// an object in an editor, so we'll leave it inlined for now.\nexport function ParseErrorEnum(a: TemplateStringsArray): <\n  T extends ParseErrorTemplates,\n>(\n  parseErrorTemplates: T,\n) => {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : object\n      : T[K] extends ToMessage<any>\n        ? Parameters<T[K]>[0]\n        : object\n  >;\n};\n\nexport function ParseErrorEnum<T extends ParseErrorTemplates>(\n  parseErrorTemplates: T,\n  syntaxPlugin?: SyntaxPlugin,\n): {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : object\n      : T[K] extends ToMessage<any>\n        ? Parameters<T[K]>[0]\n        : object\n  >;\n};\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either:\n//\n// 1. a static error message,\n// 2. `toMessage` functions that define additional necessary `details` needed by\n//    the `ParseError`, or\n// 3. Objects that contain a `message` of one of the above and overridden `code`\n//    and/or `reasonCode`:\n//\n// ParseErrorEnum `optionalSyntaxPlugin` ({\n//   ErrorWithStaticMessage: \"message\",\n//   ErrorWithDynamicMessage: ({ type } : { type: string }) => `${type}`),\n//   ErrorWithOverriddenCodeAndOrReasonCode: {\n//     message: ({ type }: { type: string }) => `${type}`),\n//     code: \"AN_ERROR_CODE\",\n//     ...(BABEL_8_BREAKING ? { } : { reasonCode: \"CustomErrorReasonCode\" })\n//   }\n// });\n//\nexport function ParseErrorEnum(\n  argument: TemplateStringsArray | ParseErrorTemplates,\n  syntaxPlugin?: SyntaxPlugin,\n) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return (parseErrorTemplates: ParseErrorTemplates) =>\n      ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n\n  const ParseErrorConstructors = {} as Record<\n    string,\n    ParseErrorConstructor<unknown>\n  >;\n\n  for (const reasonCode of Object.keys(argument)) {\n    const template = (argument as ParseErrorTemplates)[reasonCode];\n    const { message, ...rest } =\n      typeof template === \"string\"\n        ? { message: () => template }\n        : typeof template === \"function\"\n          ? { message: template }\n          : template;\n    const toMessage = typeof message === \"string\" ? () => message : message;\n\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: \"BABEL_PARSER_SYNTAX_ERROR\",\n      reasonCode,\n      toMessage,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...rest,\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nimport ModuleErrors from \"./parse-error/module-errors.ts\";\nimport StandardErrors from \"./parse-error/standard-errors.ts\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors.ts\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors.ts\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors.ts\";\n","import type { TokenType } from \"../tokenizer/types.ts\";\nimport type Parser from \"../parser/index.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\nimport type * as N from \"../types.ts\";\nimport type { Node as NodeType, NodeBase, File } from \"../types.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { BindingFlag } from \"../util/scopeflags.ts\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object: any, key: string) => {\n  if (object) {\n    defineProperty(object, key, { enumerable: false, value: object[key] });\n  }\n};\n\nfunction toESTreeLocation(node: any) {\n  toUnenumerable(node.loc.start, \"index\");\n  toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: typeof Parser) =>\n  class ESTreeParserMixin extends superClass implements Parser {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.options.tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseRegExpLiteral({ pattern, flags }): N.EstreeRegExpLiteral {\n      let regex: RegExp | null = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (_) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt: bigint | null;\n      try {\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal: null = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T extends N.EstreeLiteral>(value: any) {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.estreeParseLiteral(value);\n    }\n\n    // Cast a Directive to an ExpressionStatement. Mutates the input Directive.\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const expression = directive.value as any as N.EstreeLiteral;\n      delete directive.value;\n\n      expression.type = \"Literal\";\n      // @ts-expect-error N.EstreeLiteral.raw is not defined.\n      expression.raw = expression.extra.raw;\n      expression.value = expression.extra.expressionValue;\n\n      const stmt = directive as any as N.ExpressionStatement;\n      stmt.type = \"ExpressionStatement\";\n      stmt.expression = expression;\n      // @ts-expect-error N.ExpressionStatement.directive is not defined\n      stmt.directive = expression.extra.rawValue;\n\n      delete expression.extra;\n\n      return stmt;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        // @ts-expect-error plugin typings\n        this.checkDeclaration((node as unknown as N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return (method as unknown as N.EstreeMethodDefinition).value.params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: boolean | undefined | null,\n      topLevel: boolean,\n      end: TokenType,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): void {\n      super.parseBlockBody(\n        node,\n        allowDirectives,\n        topLevel,\n        end,\n        afterBlockParse,\n      );\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      // @ts-expect-error estree plugin typings\n      node.body = directiveStatements.concat(node.body);\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // @ts-expect-error mutate AST types\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = node as any;\n      delete node.id;\n      // @ts-expect-error mutate AST types\n      node.name = name;\n      // @ts-expect-error mutate AST types\n      node.type = \"PrivateIdentifier\";\n      return node as unknown as N.EstreePrivateIdentifier;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isPrivateName(node: N.Node): node is N.EstreePrivateIdentifier {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    getPrivateNameSV(node: N.EstreePrivateIdentifier): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node as unknown as N.PrivateName);\n        }\n      }\n      return node.name;\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseLiteral<T extends N.Literal>(value: any, type: T[\"type\"]): T {\n      const node = super.parseLiteral<T>(value, type);\n      // @ts-expect-error mutating AST types\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseMethod<\n      T extends N.ClassPrivateMethod | N.ObjectMethod | N.ClassMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope: boolean = false,\n    ): N.EstreeMethodDefinition {\n      let funcNode = this.startNode<N.MethodLike>();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        // @ts-expect-error todo(flow->ts)\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error mutate AST types\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // @ts-expect-error mutate AST types\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        node.computed = false;\n      }\n      return this.finishNode(\n        // @ts-expect-error cast methods to estree types\n        node as Undone<N.EstreeMethodDefinition>,\n        \"MethodDefinition\",\n      );\n    }\n\n    nameIsConstructor(key: N.Expression | N.PrivateName): boolean {\n      if (key.type === \"Literal\") return key.value === \"constructor\";\n      return super.nameIsConstructor(key);\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = super.parseClassProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = super.parseClassPrivateProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): N.ObjectMethod | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) as any;\n\n      if (node) {\n        node.type = \"Property\";\n        if ((node as any as N.ClassMethod).kind === \"method\") {\n          node.kind = \"init\";\n        }\n        node.shorthand = false;\n      }\n\n      return node as any;\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startLoc: Position | undefined | null,\n      isPattern: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectProperty | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectProperty(\n        prop,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ) as any;\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return node as any;\n    }\n\n    isValidLVal(\n      type: string,\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingFlag,\n    ) {\n      return type === \"Property\"\n        ? \"value\"\n        : super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableObjectExpressionProp(\n      prop: N.Node,\n      isLast: boolean,\n      isLHS: boolean,\n    ) {\n      if (\n        prop.type === \"Property\" &&\n        (prop.kind === \"get\" || prop.kind === \"set\")\n      ) {\n        this.raise(Errors.PatternHasAccessor, prop.key);\n      } else if (prop.type === \"Property\" && prop.method) {\n        this.raise(Errors.PatternHasMethod, prop.key);\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n      }\n    }\n\n    finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n      unfinished: Undone<T>,\n      optional: boolean,\n    ): T {\n      const node = super.finishCallExpression(unfinished, optional);\n\n      if (node.callee.type === \"Import\") {\n        (node as N.Node as N.EstreeImportExpression).type = \"ImportExpression\";\n        (node as N.Node as N.EstreeImportExpression).source = node\n          .arguments[0] as N.Expression;\n        (node as N.Node as N.EstreeImportExpression).options =\n          (node.arguments[1] as N.Expression) ?? null;\n        // compatibility with previous ESTree AST\n        // TODO(Babel 8): Remove this\n        (node as N.Node as N.EstreeImportExpression).attributes =\n          (node.arguments[1] as N.Expression) ?? null;\n        // arguments isn't optional in the type definition\n        delete node.arguments;\n        // callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(\n      unfinished: Undone<N.AnyExport>,\n      decorators: N.Decorator[] | null,\n    ) {\n      const exportStartLoc = this.state.lastTokStartLoc;\n      const node = super.parseExport(unfinished, decorators);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          // @ts-expect-error mutating AST types\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            // @ts-expect-error mutating AST types\n            node.type = \"ExportAllDeclaration\";\n            // @ts-expect-error mutating AST types\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n        // fallthrough\n        case \"ExportDefaultDeclaration\":\n          {\n            const { declaration } = node;\n            if (\n              declaration?.type === \"ClassDeclaration\" &&\n              declaration.decorators?.length > 0 &&\n              // decorator comes before export\n              declaration.start === node.start\n            ) {\n              this.resetStartLocation(\n                node,\n                // For compatibility with ESLint's keyword-spacing rule, which assumes that an\n                // export declaration must start with export.\n                // https://github.com/babel/babel/issues/15085\n                // Here we reset export declaration's start to be the start of the export token\n                exportStartLoc,\n              );\n            }\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      const node = super.parseSubscript(base, startLoc, noCalls, state);\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          // strip Optional prefix\n          (node as unknown as N.CallExpression | N.MemberExpression).type =\n            node.type.substring(8) as \"CallExpression\" | \"MemberExpression\";\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode<N.EstreeChainExpression>(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        // @ts-expect-error not in the type definitions\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    isOptionalMemberExpression(node: N.Node) {\n      if (node.type === \"ChainExpression\") {\n        return node.expression.type === \"MemberExpression\";\n      }\n      return super.isOptionalMemberExpression(node);\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isObjectProperty(node: N.Node): node is N.EstreeProperty {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isObjectMethod(node: N.Node): node is N.EstreeProperty {\n      return (\n        node.type === \"Property\" &&\n        (node.method || node.kind === \"get\" || node.kind === \"set\")\n      );\n    }\n\n    finishNodeAt<T extends NodeType>(\n      node: Undone<T>,\n      type: T[\"type\"],\n      endLoc: Position,\n    ): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetStartLocation(node: N.Node, startLoc: Position) {\n      super.resetStartLocation(node, startLoc);\n      toESTreeLocation(node);\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n","// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext;\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX opening tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n","import { types as tc, type TokContext } from \"./context.ts\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string;\n  beforeExpr?: boolean;\n  startsExpr?: boolean;\n  rightAssociative?: boolean;\n  isLoop?: boolean;\n  isAssign?: boolean;\n  prefix?: boolean;\n  postfix?: boolean;\n  binop?: number | null;\n};\n\n// Internally the tokenizer stores token as a number\nexport type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: string | undefined | null;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: number | undefined | null;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext:\n    | ((context: Array<TokContext>) => void)\n    | undefined\n    | null;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport type InternalTokenTypes = typeof tt;\n\nexport const tt = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _defer: createKeywordLike(\"defer\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _source: createKeywordLike(\"source\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _using: createKeywordLike(\"using\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  _satisfies: createKeywordLike(\"satisfies\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  // TODO: Remove this in Babel 8\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n} as const;\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.placeholder;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.placeholder;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsBinaryOperator(token: TokenType): boolean {\n  return tokenBinops[token] !== -1;\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.cjs`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c8a\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7cd\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7dc\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0897-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\u30fb\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\\uff65\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.cjs`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,4,51,13,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,39,27,10,22,251,41,7,1,17,2,60,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,31,9,2,0,3,0,2,37,2,0,26,0,2,0,45,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,200,32,32,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,26,3994,6,582,6842,29,1763,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,433,44,212,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,42,9,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,229,29,3,0,496,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,16,621,2467,541,1507,4938,6,4191];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,7,9,32,4,318,1,80,3,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,68,8,2,0,3,0,2,3,2,4,2,0,15,1,83,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,7,19,58,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,343,9,54,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,10,5350,0,7,14,11465,27,2343,9,87,9,39,4,60,6,26,9,535,9,470,0,2,54,8,3,82,0,12,1,19628,1,4178,9,519,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,245,1,2,9,726,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","import * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","import { ScopeFlag, BindingFlag } from \"./scopeflags.ts\";\nimport type { Position } from \"./location.ts\";\nimport type * as N from \"../types.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\nexport const enum NameType {\n  // var-declared names in the current lexical scope\n  Var = 1 << 0,\n  // lexically-declared names in the current lexical scope\n  Lexical = 1 << 1,\n  // lexically-declared FunctionDeclaration names in the current lexical scope\n  Function = 1 << 2,\n}\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  flags: ScopeFlag = 0;\n  names: Map<string, NameType> = new Map();\n  firstLexicalName = \"\";\n\n  constructor(flags: ScopeFlag) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope extends Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inTopLevel() {\n    return (this.currentScope().flags & ScopeFlag.PROGRAM) > 0;\n  }\n  get inFunction() {\n    return (this.currentVarScopeFlags() & ScopeFlag.FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & ScopeFlag.SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & ScopeFlag.DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & ScopeFlag.CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & ScopeFlag.CLASS) > 0 && (flags & ScopeFlag.FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & ScopeFlag.STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (ScopeFlag.VAR | ScopeFlag.CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & ScopeFlag.FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlag): Scope {\n    return new Scope(flags);\n  }\n\n  enter(flags: ScopeFlag) {\n    /*:: +createScope: (flags:ScopeFlag) => IScope; */\n    // @ts-expect-error This method will be overwritten by subclasses\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit(): ScopeFlag {\n    const scope = this.scopeStack.pop();\n    return scope.flags;\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (ScopeFlag.FUNCTION | ScopeFlag.STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & ScopeFlag.PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    let scope = this.currentScope();\n    if (\n      bindingType & BindingFlag.SCOPE_LEXICAL ||\n      bindingType & BindingFlag.SCOPE_FUNCTION\n    ) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      let type = scope.names.get(name) || 0;\n\n      if (bindingType & BindingFlag.SCOPE_FUNCTION) {\n        type = type | NameType.Function;\n      } else {\n        if (!scope.firstLexicalName) {\n          scope.firstLexicalName = name;\n        }\n        type = type | NameType.Lexical;\n      }\n\n      scope.names.set(name, type);\n\n      if (bindingType & BindingFlag.SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BindingFlag.SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.names.set(name, (scope.names.get(name) || 0) | NameType.Var);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & ScopeFlag.VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & ScopeFlag.PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & ScopeFlag.PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingFlag,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, loc, {\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    if (!(bindingType & BindingFlag.KIND_VALUE)) return false;\n\n    if (bindingType & BindingFlag.SCOPE_LEXICAL) {\n      return scope.names.has(name);\n    }\n\n    const type = scope.names.get(name);\n\n    if (bindingType & BindingFlag.SCOPE_FUNCTION) {\n      return (\n        (type & NameType.Lexical) > 0 ||\n        (!this.treatFunctionsAsVarInScope(scope) && (type & NameType.Var) > 0)\n      );\n    }\n\n    return (\n      ((type & NameType.Lexical) > 0 &&\n        // Annex B.3.4\n        // https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks\n        !(\n          scope.flags & ScopeFlag.SIMPLE_CATCH &&\n          scope.firstLexicalName === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) &&\n        (type & NameType.Function) > 0)\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (!topLevelScope.names.has(name)) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags(): ScopeFlag {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & ScopeFlag.VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  currentThisScopeFlags(): ScopeFlag {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (\n        flags & (ScopeFlag.VAR | ScopeFlag.CLASS) &&\n        !(flags & ScopeFlag.ARROW)\n      ) {\n        return flags;\n      }\n    }\n  }\n}\n","import type { Position } from \"../../util/location.ts\";\nimport ScopeHandler, { NameType, Scope } from \"../../util/scope.ts\";\nimport { BindingFlag, type ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type * as N from \"../../types.ts\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlag): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BindingFlag.FLAG_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n\n    if (\n      bindingType & BindingFlag.FLAG_FLOW_DECLARE_FN &&\n      !scope.declareFunctions.has(name)\n    ) {\n      const type = scope.names.get(name);\n      return (type & NameType.Function) > 0 || (type & NameType.Lexical) > 0;\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","import type { Options } from \"../options.ts\";\nimport type State from \"../tokenizer/state.ts\";\nimport type { PluginsMap } from \"./index.ts\";\nimport type ScopeHandler from \"../util/scope.ts\";\nimport type ExpressionScopeHandler from \"../util/expression-scope.ts\";\nimport type ClassScopeHandler from \"../util/class-scope.ts\";\nimport type ProductionParameterHandler from \"../util/production-parameter.ts\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"../typings.ts\";\nimport type * as N from \"../types.ts\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<any>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: string | undefined | null;\n  declare startIndex: number;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n  // Comment store for Program.comments\n  declare comments: Array<N.Comment>;\n\n  sourceToOffsetPos(sourcePos: number) {\n    return sourcePos + this.startIndex;\n  }\n\n  offsetToSourcePos(offsetPos: number) {\n    return offsetPos - this.startIndex;\n  }\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(\n        pluginOptions,\n      ) as (keyof typeof pluginOptions)[]) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption<\n    PluginName extends ParserPluginWithOptions[0],\n    OptionName extends keyof PluginOptions<PluginName>,\n  >(plugin: PluginName, name: OptionName) {\n    return (this.plugins.get(plugin) as null | PluginOptions<PluginName>)?.[\n      name\n    ];\n  }\n}\n","/*:: declare var invariant; */\n\nimport BaseParser from \"./base.ts\";\nimport type { Comment, Node, Identifier } from \"../types.ts\";\nimport * as charCodes from \"charcodes\";\nimport type { Undone } from \"./node.ts\";\n\n/**\n * A whitespace token containing comments\n */\nexport type CommentWhitespace = {\n  /**\n   * the start of the whitespace token.\n   */\n  start: number;\n  /**\n   * the end of the whitespace token.\n   */\n  end: number;\n  /**\n   * the containing comments\n   */\n  comments: Array<Comment>;\n  /**\n   * the immediately preceding AST node of the whitespace token\n   */\n  leadingNode: Node | null;\n  /**\n   * the immediately following AST node of the whitespace token\n   */\n  trailingNode: Node | null;\n  /**\n   * the innermost AST node containing the whitespace with minimal size (|end - start|)\n   */\n  containingNode: Node | null;\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setTrailingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setLeadingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nexport function setInnerComments(\n  node: Undone<Node>,\n  comments?: Array<Comment>,\n) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n */\nfunction adjustInnerComments(\n  node: Undone<Node>,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    const { commentsLen } = this.state;\n    if (this.comments.length !== commentsLen) {\n      this.comments.length = commentsLen;\n    }\n    this.comments.push(comment);\n    this.state.commentsLen++;\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (\n        this.input.charCodeAt(this.offsetToSourcePos(commentStart) - 1) ===\n        charCodes.comma\n      ) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaining commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterpret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * async /* 1 *​/ function f() {}\n   * ```\n   * the comment whitespace `/* 1 *​/` has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark `/* 1 *​/` as\n   * inner comments. So `/* 1 *​/` should be detached from the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node leading comments, assuming that `node` is a\n   * single-token node. Used in import phase modifiers parsing. We parse\n   * `module` in `import module foo from ...` as an identifier but may\n   * reinterpret it into a phase modifier later. In this case the identifier is\n   * not part of the AST and we should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * import /* 1 *​/ module a from \"a\";\n   * ```\n   * the comment whitespace `/* 1 *​/` has trailing node Identifier(module). When\n   * we see that `module` is not a default import binding, we mark `/* 1 *​/` as\n   * inner comments of the ImportDeclaration. So `/* 1 *​/` should be detached from\n   * the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousIdentifierLeadingComments(node: Identifier) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n\n    if (commentStack[length - 1].trailingNode === node) {\n      commentStack[length - 1].trailingNode = null;\n    } else if (length >= 2 && commentStack[length - 2].trailingNode === node) {\n      commentStack[length - 2].trailingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n","import * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n|[\\r\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport function hasNewLine(input: string, start: number, end: number): boolean {\n  for (let i = start; i < end; i++) {\n    if (isNewLine(input.charCodeAt(i))) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/g;\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","import type { Options } from \"../options.ts\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location.ts\";\n\nimport { types as ct, type TokContext } from \"./context.ts\";\nimport { tt, type TokenType } from \"./types.ts\";\nimport type { Errors } from \"../parse-error.ts\";\nimport type { ParseError } from \"../parse-error.ts\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number;\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0;\n};\n\nexport const enum LoopLabelKind {\n  Loop = 1,\n  Switch = 2,\n}\n\ndeclare const bit: import(\"../../../../scripts/babel-plugin-bit-decorator/types.d.ts\").BitDecorator<State>;\n\nexport default class State {\n  @bit.storage flags: number;\n\n  @bit accessor strict = false;\n\n  startIndex: number;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({\n    strictMode,\n    sourceType,\n    startIndex,\n    startLine,\n    startColumn,\n  }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n          ? true\n          : sourceType === \"module\";\n\n    this.startIndex = startIndex;\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(\n      startLine,\n      startColumn,\n      startIndex,\n    );\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  @bit accessor maybeInArrowParameters = false;\n  @bit accessor inType = false;\n  @bit accessor noAnonFunctionType = false;\n  @bit accessor hasFlowComment = false;\n  @bit accessor isAmbientContext = false;\n  @bit accessor inAbstractClass = false;\n  @bit accessor inDisallowConditionalTypesContext = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  @bit accessor soloAwait = false;\n  @bit accessor inFSharpPipelineDirectBody = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: LoopLabelKind;\n    name?: string | null;\n    statementStart?: number;\n  }> = [];\n\n  commentsLen = 0;\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n\n  // Used to track whether a JSX element is allowed to form\n  @bit accessor canStartJSXElement = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  @bit accessor containsEsc = false;\n\n  // Used to track invalid escape sequences in template literals,\n  // that must be reported if the template is not tagged.\n  firstInvalidTemplateEscapePos: null | Position = null;\n\n  @bit accessor hasTopLevelAwait = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  /**\n   * When we add a new property, we must manually update the `clone` method\n   * @see State#clone\n   */\n\n  curPosition(): Position {\n    return new Position(\n      this.curLine,\n      this.pos - this.lineStart,\n      this.pos + this.startIndex,\n    );\n  }\n\n  clone(): State {\n    const state = new State();\n    state.flags = this.flags;\n    state.startIndex = this.startIndex;\n    state.curLine = this.curLine;\n    state.lineStart = this.lineStart;\n    state.startLoc = this.startLoc;\n    state.endLoc = this.endLoc;\n    state.errors = this.errors.slice();\n    state.potentialArrowAt = this.potentialArrowAt;\n    state.noArrowAt = this.noArrowAt.slice();\n    state.noArrowParamsConversionAt = this.noArrowParamsConversionAt.slice();\n    state.topicContext = this.topicContext;\n    state.labels = this.labels.slice();\n    state.commentsLen = this.commentsLen;\n    state.commentStack = this.commentStack.slice();\n    state.pos = this.pos;\n    state.type = this.type;\n    state.value = this.value;\n    state.start = this.start;\n    state.end = this.end;\n    state.lastTokEndLoc = this.lastTokEndLoc;\n    state.lastTokStartLoc = this.lastTokStartLoc;\n    state.context = this.context.slice();\n    state.firstInvalidTemplateEscapePos = this.firstInvalidTemplateEscapePos;\n    state.strictErrors = this.strictErrors;\n    state.tokensLength = this.tokensLength;\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number;\n  value: any;\n  type: TokenType;\n  start: number;\n  end: number;\n  context: TokContext[];\n  startLoc: Position;\n  lastTokEndLoc: Position;\n  curLine: number;\n  lineStart: number;\n  curPosition: State[\"curPosition\"];\n  /* Used only in readToken_mult_modulo */\n  inType: boolean;\n  // These boolean properties are not initialized in createLookaheadState()\n  // instead they will only be set by the tokenizer\n  containsEsc?: boolean;\n};\n","// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: (ch: number) => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: (ch: number) =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\nexport type StringContentsErrorHandlers = EscapedCharErrorHandlers & {\n  unterminated(\n    initialPos: number,\n    initialLineStart: number,\n    initialCurLine: number,\n  ): void;\n};\n\nexport function readStringContents(\n  type: \"single\" | \"double\" | \"template\",\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  errors: StringContentsErrorHandlers,\n) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const { length } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === charCodes.backslash) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        type === \"template\",\n        errors,\n      );\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = { pos, lineStart, curLine };\n      } else {\n        out += res.ch;\n      }\n      ({ pos, lineStart, curLine } = res);\n      chunkStart = pos;\n    } else if (\n      ch === charCodes.lineSeparator ||\n      ch === charCodes.paragraphSeparator\n    ) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === charCodes.lineFeed || ch === charCodes.carriageReturn) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (\n          ch === charCodes.carriageReturn &&\n          input.charCodeAt(pos) === charCodes.lineFeed\n        ) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return process.env.BABEL_8_BREAKING\n    ? { pos, str: out, firstInvalidLoc, lineStart, curLine }\n    : {\n        pos,\n        str: out,\n        firstInvalidLoc,\n        lineStart,\n        curLine,\n        containsInvalid: !!firstInvalidLoc,\n      };\n}\n\nfunction isStringEnd(\n  type: \"single\" | \"double\" | \"template\",\n  ch: number,\n  input: string,\n  pos: number,\n) {\n  if (type === \"template\") {\n    return (\n      ch === charCodes.graveAccent ||\n      (ch === charCodes.dollarSign &&\n        input.charCodeAt(pos + 1) === charCodes.leftCurlyBrace)\n    );\n  }\n  return (\n    ch === (type === \"double\" ? charCodes.quotationMark : charCodes.apostrophe)\n  );\n}\n\ntype EscapedCharErrorHandlers = HexCharErrorHandlers &\n  CodePointErrorHandlers & {\n    strictNumericEscape(pos: number, lineStart: number, curLine: number): void;\n  };\n\nfunction readEscapedChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  inTemplate: boolean,\n  errors: EscapedCharErrorHandlers,\n) {\n  const throwOnInvalid = !inTemplate;\n  pos++; // skip '\\'\n\n  const res = (ch: string | null) => ({ pos, ch, lineStart, curLine });\n\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case charCodes.lowercaseN:\n      return res(\"\\n\");\n    case charCodes.lowercaseR:\n      return res(\"\\r\");\n    case charCodes.lowercaseX: {\n      let code;\n      ({ code, pos } = readHexChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        2,\n        false,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCharCode(code));\n    }\n    case charCodes.lowercaseU: {\n      let code;\n      ({ code, pos } = readCodePoint(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCodePoint(code));\n    }\n    case charCodes.lowercaseT:\n      return res(\"\\t\");\n    case charCodes.lowercaseB:\n      return res(\"\\b\");\n    case charCodes.lowercaseV:\n      return res(\"\\u000b\");\n    case charCodes.lowercaseF:\n      return res(\"\\f\");\n    case charCodes.carriageReturn:\n      if (input.charCodeAt(pos) === charCodes.lineFeed) {\n        ++pos;\n      }\n    // fall through\n    case charCodes.lineFeed:\n      lineStart = pos;\n      ++curLine;\n    // fall through\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return res(\"\");\n    case charCodes.digit8:\n    case charCodes.digit9:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    // fall through\n    default:\n      if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n        const startPos = pos - 1;\n        const match = /^[0-7]+/.exec(input.slice(startPos, pos + 2));\n\n        let octalStr = match[0];\n\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (\n          octalStr !== \"0\" ||\n          next === charCodes.digit8 ||\n          next === charCodes.digit9\n        ) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\ntype HexCharErrorHandlers = IntErrorHandlers & {\n  invalidEscapeSequence(pos: number, lineStart: number, curLine: number): void;\n};\n\n// Used to read character escape sequences ('\\x', '\\u').\nfunction readHexChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  len: number,\n  forceLen: boolean,\n  throwOnInvalid: boolean,\n  errors: HexCharErrorHandlers,\n) {\n  const initialPos = pos;\n  let n;\n  ({ n, pos } = readInt(\n    input,\n    pos,\n    lineStart,\n    curLine,\n    16,\n    len,\n    forceLen,\n    false,\n    errors,\n    /* bailOnError */ !throwOnInvalid,\n  ));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return { code: n, pos };\n}\n\nexport type IntErrorHandlers = {\n  numericSeparatorInEscapeSequence(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  unexpectedNumericSeparator(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  // It can return \"true\" to indicate that the error was handled\n  // and the int parsing should continue.\n  invalidDigit(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n    radix: number,\n  ): boolean;\n};\n\nexport function readInt(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  radix: number,\n  len: number | undefined,\n  forceLen: boolean,\n  allowNumSeparator: boolean | \"bail\",\n  errors: IntErrorHandlers,\n  bailOnError: boolean,\n) {\n  const start = pos;\n  const forbiddenSiblings =\n    radix === 16\n      ? forbiddenNumericSeparatorSiblings.hex\n      : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling =\n    radix === 16\n      ? isAllowedNumericSeparatorSibling.hex\n      : radix === 10\n        ? isAllowedNumericSeparatorSibling.dec\n        : radix === 8\n          ? isAllowedNumericSeparatorSibling.oct\n          : isAllowedNumericSeparatorSibling.bin;\n\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        if (bailOnError) return { n: null, pos };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (\n        Number.isNaN(next) ||\n        !isAllowedSibling(next) ||\n        forbiddenSiblings.has(prev) ||\n        forbiddenSiblings.has(next)\n      ) {\n        if (bailOnError) return { n: null, pos };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      // Ignore this _ character\n      ++pos;\n      continue;\n    }\n\n    if (code >= charCodes.lowercaseA) {\n      val = code - charCodes.lowercaseA + charCodes.lineFeed;\n    } else if (code >= charCodes.uppercaseA) {\n      val = code - charCodes.uppercaseA + charCodes.lineFeed;\n    } else if (charCodes.isDigit(code)) {\n      val = code - charCodes.digit0; // 0-9\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      // If we found a digit which is too big, errors.invalidDigit can return true to avoid\n      // breaking the loop (this is used for error recovery).\n      if (val <= 9 && bailOnError) {\n        return { n: null, pos };\n      } else if (\n        val <= 9 &&\n        errors.invalidDigit(pos, lineStart, curLine, radix)\n      ) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || (len != null && pos - start !== len) || invalid) {\n    return { n: null, pos };\n  }\n\n  return { n: total, pos };\n}\n\nexport type CodePointErrorHandlers = HexCharErrorHandlers & {\n  invalidCodePoint(pos: number, lineStart: number, curLine: number): void;\n};\n\nexport function readCodePoint(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  throwOnInvalid: boolean,\n  errors: CodePointErrorHandlers,\n) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === charCodes.leftCurlyBrace) {\n    ++pos;\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      input.indexOf(\"}\", pos) - pos,\n      true,\n      throwOnInvalid,\n      errors,\n    ));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return { code: null, pos };\n      }\n    }\n  } else {\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      4,\n      false,\n      throwOnInvalid,\n      errors,\n    ));\n  }\n  return { code, pos };\n}\n","/*:: declare var invariant; */\n\nimport type { Options } from \"../options.ts\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location.ts\";\nimport CommentsParser, { type CommentWhitespace } from \"../parser/comments.ts\";\nimport type * as N from \"../types.ts\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier.ts\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types.ts\";\nimport type { TokContext } from \"./context.ts\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error.ts\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n  skipWhiteSpaceInLine,\n} from \"../util/whitespace.ts\";\nimport State from \"./state.ts\";\nimport type { LookaheadState, DeferredStrictError } from \"./state.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { Node } from \"../types.ts\";\n\nimport {\n  readInt,\n  readCodePoint,\n  readStringContents,\n  type IntErrorHandlers,\n  type CodePointErrorHandlers,\n  type StringContentsErrorHandlers,\n} from \"@babel/helper-string-parser\";\n\nimport type { Plugin } from \"../typings.ts\";\n\nfunction buildPosition(pos: number, lineStart: number, curLine: number) {\n  return new Position(curLine, pos - lineStart, pos);\n}\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  charCodes.lowercaseV,\n]);\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    const startIndex = state.startIndex || 0;\n    this.type = state.type;\n    this.value = state.value;\n    this.start = startIndex + state.start;\n    this.end = startIndex + state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default abstract class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.comments = [];\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // @ts-expect-error For performance we use a simplified tokenizer state structure\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  /**\n   * Similar to nextToken, but it will stop at line break when it is seen before the next token\n   *\n   * @returns {number} position of the next token start or line break, whichever is seen first.\n   * @memberof Tokenizer\n   */\n  nextTokenInLineStart(): number {\n    return this.nextTokenInLineStartSince(this.state.pos);\n  }\n\n  nextTokenInLineStartSince(pos: number): number {\n    skipWhiteSpaceInLine.lastIndex = pos;\n    return skipWhiteSpaceInLine.test(this.input)\n      ? skipWhiteSpaceInLine.lastIndex\n      : pos;\n  }\n\n  /**\n   * Similar to lookaheadCharCode, but it will return the char code of line break if it is\n   * seen before the next token\n   *\n   * @returns {number} char code of the next token start or line break, whichever is seen first.\n   * @memberof Tokenizer\n   */\n  lookaheadInLineCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenInLineStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, at),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related properties.\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  // Skips a block comment, whose end is marked by commentEnd.\n  // *-/ is used by the Flow plugin, when parsing block comments nested\n  // inside Flow comments.\n  skipBlockComment(commentEnd: \"*/\" | \"*-/\"): N.CommentBlock | undefined {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(commentEnd, start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n    }\n\n    this.state.pos = end + commentEnd.length;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment: N.CommentBlock = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start: this.sourceToOffsetPos(start),\n      end: this.sourceToOffsetPos(end + commentEnd.length),\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | undefined {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment: N.CommentLine = {\n      type: \"CommentLine\",\n      value,\n      start: this.sourceToOffsetPos(start),\n      end: this.sourceToOffsetPos(end),\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment(\"*/\");\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (\n            ch === charCodes.dash &&\n            !this.inModule &&\n            this.options.annexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (\n            ch === charCodes.lessThan &&\n            !this.inModule &&\n            this.options.annexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const commentWhitespace: CommentWhitespace = {\n        start: this.sourceToOffsetPos(spaceStart),\n        end: this.sourceToOffsetPos(end),\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val?: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // @ts-expect-error the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(\n        Errors.UnexpectedDigitAfterHash,\n        this.state.curPosition(),\n      );\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.getPluginOption(\"recordAndTuple\", \"syntaxType\") === \"bar\"\n      ) {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          this.state.curPosition(),\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            Errors.RecordExpressionBarIncorrectEndSyntaxType,\n            this.state.curPosition(),\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            Errors.TupleExpressionBarIncorrectEndSyntaxType,\n            this.state.curPosition(),\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              this.state.curPosition(),\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              this.state.curPosition(),\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(\n      Errors.InvalidOrUnexpectedToken,\n      this.state.curPosition(),\n      {\n        unexpected: String.fromCodePoint(code),\n      },\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(\n          Errors.UnterminatedRegExp,\n          createPositionWithColumnOffset(startLoc, 1),\n        );\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(\n          Errors.UnterminatedRegExp,\n          createPositionWithColumnOffset(startLoc, 1),\n        );\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      // @ts-expect-error VALID_REGEX_FLAGS.has should accept expanded type: number\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, nextPos());\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, nextPos());\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen: boolean = false,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const { n, pos } = readInt(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      radix,\n      len,\n      forceLen,\n      allowNumSeparator,\n      this.errorHandlers_readInt,\n      /* bailOnError */ false,\n    );\n    this.state.pos = pos;\n    return n;\n  }\n\n  readRadixNumber(radix: number): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(\n        Errors.InvalidDigit,\n        // Numeric literals can't have newlines, so this is safe to do.\n        createPositionWithColumnOffset(startLoc, 2),\n        {\n          radix,\n        },\n      );\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, startLoc);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, this.state.curPosition());\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, startLoc);\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(\n            Errors.ZeroDigitNumericSeparator,\n            createPositionWithColumnOffset(startLoc, underscorePos),\n          );\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, startLoc);\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, startLoc);\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (!process.env.BABEL_8_BREAKING && next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, startLoc);\n      }\n      ++this.state.pos;\n      // eslint-disable-next-line no-var\n      var isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (!process.env.BABEL_8_BREAKING && isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const { code, pos } = readCodePoint(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      throwOnInvalid,\n      this.errorHandlers_readCodePoint,\n    );\n    this.state.pos = pos;\n    return code;\n  }\n\n  readString(quote: number): void {\n    const { str, pos, curLine, lineStart } = readStringContents(\n      quote === charCodes.quotationMark ? \"double\" : \"single\",\n      this.input,\n      this.state.pos + 1, // skip the quote\n      this.state.lineStart,\n      this.state.curLine,\n      this.errorHandlers_readStringContents_string,\n    );\n    this.state.pos = pos + 1; // skip the quote\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(tt.string, str);\n  }\n\n  // Reads template continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    const opening = this.input[this.state.pos];\n    const { str, firstInvalidLoc, pos, curLine, lineStart } =\n      readStringContents(\n        \"template\",\n        this.input,\n        this.state.pos + 1, // skip '`' or `}`\n        this.state.lineStart,\n        this.state.curLine,\n        this.errorHandlers_readStringContents_template,\n      );\n    this.state.pos = pos + 1; // skip '`' or `$`\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n\n    if (firstInvalidLoc) {\n      this.state.firstInvalidTemplateEscapePos = new Position(\n        firstInvalidLoc.curLine,\n        firstInvalidLoc.pos - firstInvalidLoc.lineStart,\n        this.sourceToOffsetPos(firstInvalidLoc.pos),\n      );\n    }\n\n    if (this.input.codePointAt(pos) === charCodes.graveAccent) {\n      this.finishToken(\n        tt.templateTail,\n        firstInvalidLoc ? null : opening + str + \"`\",\n      );\n    } else {\n      this.state.pos++; // skip '{'\n      this.finishToken(\n        tt.templateNonTail,\n        firstInvalidLoc ? null : opening + str + \"${\",\n      );\n    }\n  }\n\n  recordStrictModeErrors(toParseError: DeferredStrictError, at: Position) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, at);\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode?: number): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, this.state.curPosition());\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, escStart);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode?: number): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, this.state.startLoc, {\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   *\n   * The return type is marked as `never` for simplicity, as error recovery\n   * will create types in an invalid AST shape.\n   */\n  raise<ErrorDetails = object>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    at: Position | Undone<Node>,\n    details: ErrorDetails = {} as ErrorDetails,\n  ): ParseError<ErrorDetails> {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const error = toParseError(loc, details);\n\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    at: Position | Undone<Node>,\n    details: ErrorDetails = {} as ErrorDetails,\n  ): ParseError<ErrorDetails> | never {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        return (errors[i] = toParseError(loc, details));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, at, details);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): void {\n    throw this.raise(\n      Errors.UnexpectedToken,\n      loc != null ? loc : this.state.startLoc,\n      {\n        expected: type ? tokenLabelName(type) : null,\n      },\n    );\n  }\n\n  expectPlugin(pluginName: Plugin, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(\n      Errors.MissingPlugin,\n      loc != null ? loc : this.state.startLoc,\n      {\n        missingPlugin: [pluginName],\n      },\n    );\n  }\n\n  expectOnePlugin(pluginNames: Plugin[]): void {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, this.state.startLoc, {\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n\n  errorBuilder(error: ParseErrorConstructor<object>) {\n    return (pos: number, lineStart: number, curLine: number) => {\n      this.raise(error, buildPosition(pos, lineStart, curLine));\n    };\n  }\n\n  errorHandlers_readInt: IntErrorHandlers = {\n    invalidDigit: (pos, lineStart, curLine, radix) => {\n      if (!this.options.errorRecovery) return false;\n\n      this.raise(Errors.InvalidDigit, buildPosition(pos, lineStart, curLine), {\n        radix,\n      });\n      // Continue parsing the number as if there was no invalid digit.\n      return true;\n    },\n    numericSeparatorInEscapeSequence: this.errorBuilder(\n      Errors.NumericSeparatorInEscapeSequence,\n    ),\n    unexpectedNumericSeparator: this.errorBuilder(\n      Errors.UnexpectedNumericSeparator,\n    ),\n  };\n\n  errorHandlers_readCodePoint: CodePointErrorHandlers = {\n    ...this.errorHandlers_readInt,\n    invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n    invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint),\n  };\n\n  errorHandlers_readStringContents_string: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: (pos, lineStart, curLine) => {\n      this.recordStrictModeErrors(\n        Errors.StrictNumericEscape,\n        buildPosition(pos, lineStart, curLine),\n      );\n    },\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(\n        Errors.UnterminatedString, // Report the error at the string quote\n        buildPosition(pos - 1, lineStart, curLine),\n      );\n    },\n  };\n\n  errorHandlers_readStringContents_template: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(\n        Errors.UnterminatedTemplate,\n        buildPosition(pos, lineStart, curLine),\n      );\n    },\n  };\n}\n","import { ClassElementType } from \"./scopeflags.ts\";\nimport type { Position } from \"./location.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementType> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementType,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & ClassElementType.KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & ClassElementType.FLAG_STATIC;\n        const newStatic = elementType & ClassElementType.FLAG_STATIC;\n\n        const oldKind = accessor & ClassElementType.KIND_ACCESSOR;\n        const newKind = elementType & ClassElementType.KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, loc, {\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n        identifierName: name,\n      });\n    }\n  }\n}\n","import { Errors, type ParseErrorConstructor } from \"../parse-error.ts\";\nimport type { Position } from \"./location.ts\";\nimport type { Node } from \"../types.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n  e.g. we don't know if `async({ x })` is a call expression or an async arrow\n  function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambiguous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst enum ExpressionScopeType {\n  kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3,\n}\n\nclass ExpressionScope {\n  declare type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = ExpressionScopeType.kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration(): this is ArrowHeadParsingScope {\n    return (\n      this.type === ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration ||\n      this.type === ExpressionScopeType.kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === ExpressionScopeType.kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ParseErrorConstructor<object>, Position]> =\n    new Map();\n  constructor(\n    type:\n      | ExpressionScopeType.kMaybeArrowParameterDeclaration\n      | ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration,\n  ) {\n    super(type);\n  }\n  recordDeclarationError(\n    ParsingErrorClass: ParseErrorConstructor<object>,\n    at: Position,\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: (a: [ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    node: Node,\n  ): void {\n    const origin = node.loc.start;\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == ExpressionScopeType.kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record errors that must be thrown if the current pattern ends up being an arrow\n   * function parameter. This is used to record parenthesized identifiers, and to record\n   * \"a as T\" and \"<T> a\" type assertions when parsing typescript.\n   *\n   * A parenthesized identifier (or type assertion) in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   */\n  recordArrowParameterBindingError(\n    error: ParseErrorConstructor<object>,\n    node: Node,\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = node.loc.start;\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   */\n  recordAsyncArrowParametersError(at: Position): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (\n        scope.type === ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration\n      ) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, at);\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, loc);\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(ExpressionScopeType.kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(\n    ExpressionScopeType.kMaybeArrowParameterDeclaration,\n  );\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(\n    ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration,\n  );\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport const enum ParamKind {\n  // Initial Parameter flags\n  PARAM = 0b0000,\n  // track [Yield] production parameter\n  PARAM_YIELD = 0b0001,\n  // track [Await] production parameter\n  PARAM_AWAIT = 0b0010,\n  // track [Return] production parameter\n  PARAM_RETURN = 0b0100,\n  // track [In] production parameter\n  PARAM_IN = 0b1000,\n}\n\n// todo(flow->ts) - check if more granular type can be used,\n//  type below is not good because things like PARAM_AWAIT|PARAM_YIELD are not included\n// export type ParamKind =\n//   | typeof PARAM\n//   | typeof PARAM_AWAIT\n//   | typeof PARAM_IN\n//   | typeof PARAM_RETURN\n//   | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (\n    (isAsync ? ParamKind.PARAM_AWAIT : 0) |\n    (isGenerator ? ParamKind.PARAM_YIELD : 0)\n  );\n}\n","import type { Position } from \"../util/location.ts\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types.ts\";\nimport Tokenizer from \"../tokenizer/index.ts\";\nimport type State from \"../tokenizer/state.ts\";\nimport type {\n  EstreePropertyDefinition,\n  Node,\n  ObjectMethod,\n  ObjectProperty,\n  PrivateName,\n} from \"../types.d.ts\";\nimport { hasNewLine } from \"../util/whitespace.ts\";\nimport { isIdentifierChar } from \"../util/identifier.ts\";\nimport ClassScopeHandler from \"../util/class-scope.ts\";\nimport ExpressionScopeHandler from \"../util/expression-scope.ts\";\nimport { ScopeFlag } from \"../util/scopeflags.ts\";\nimport ProductionParameterHandler, {\n  ParamKind,\n} from \"../util/production-parameter.ts\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error.ts\";\nimport type Parser from \"./index.ts\";\n\nimport type ScopeHandler from \"../util/scope.ts\";\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node;\n  error: Error;\n  thrown: Thrown;\n  aborted: Aborted;\n  failState: FailState;\n};\n\n// ## Parser utilities\n\nexport default abstract class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  abstract getScopeHandler(): new (...args: any) => ScopeHandler;\n\n  addExtra(\n    node: Partial<Node>,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    let { extra } = node;\n    if (extra == null) {\n      extra = {};\n      node.extra = extra;\n    }\n\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, this.state.startLoc);\n      }\n      this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return hasNewLine(\n      this.input,\n      this.offsetToSourcePos(this.state.lastTokEndLoc.index),\n      this.state.start,\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    return hasNewLine(this.input, this.state.end, this.nextTokenStart());\n  }\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, this.state.lastTokEndLoc);\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: Position | null): void {\n    if (!this.eat(type)) {\n      this.unexpected(loc, type);\n    }\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T extends Node | ReadonlyArray<Node>>(\n    fn: (abort: (node?: T) => never) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: {\n      node: T | null;\n    } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        // eslint-disable-next-line @typescript-eslint/only-throw-error\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        // @ts-expect-error casting general syntax error to parse error\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ExpressionErrors | undefined | null,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, doubleProtoLoc);\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /**\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): node is PrivateName {\n    return node.type === \"PrivateName\";\n  }\n\n  /**\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: PrivateName): string {\n    return node.id.name;\n  }\n\n  /**\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isObjectProperty(\n    node: Node,\n  ): node is ObjectProperty | EstreePropertyDefinition {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): node is ObjectMethod {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    this: Parser,\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = ParamKind.PARAM;\n    if (this.inModule) {\n      paramFlags |= ParamKind.PARAM_AWAIT;\n    }\n    this.scope.enter(ScopeFlag.PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKey**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional parameter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: Position | undefined | null = null;\n  doubleProtoLoc: Position | undefined | null = null;\n  privateKeyLoc: Position | undefined | null = null;\n  optionalParametersLoc: Position | undefined | null = null;\n}\n","import UtilParser from \"./util.ts\";\nimport { SourceLocation, type Position } from \"../util/location.ts\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types.ts\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: UtilParser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: {\n    [key: string]: any;\n  };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-expect-error __clone is not defined in Node prototype\n  NodePrototype.__clone = function (): Node {\n    const newNode = new Node(undefined, this.start, this.loc.start);\n    const keys = Object.keys(this) as (keyof Node)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // @ts-expect-error cloning this to newNode\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport type Undone<T extends NodeType> = Omit<T, \"type\">;\n\nexport abstract class NodeUtils extends UtilParser {\n  startNode<T extends NodeType = never>(): Undone<T> {\n    const loc = this.state.startLoc;\n    return new Node(this, loc.index, loc) as unknown as Undone<T>;\n  }\n\n  startNodeAt<T extends NodeType = never>(loc: Position): Undone<T> {\n    return new Node(this, loc.index, loc) as unknown as Undone<T>;\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T extends NodeType = never>(\n    type: Undone<NodeType>,\n  ): Undone<T> {\n    return this.startNodeAt(type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T extends NodeType>(node: Undone<T>, type: T[\"type\"]): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T extends NodeType>(\n    node: Omit<T, \"type\">,\n    type: T[\"type\"],\n    endLoc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    (node as T).type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node as T);\n    return node as T;\n  }\n\n  resetStartLocation(node: NodeBase, startLoc: Position): void {\n    node.start = startLoc.index;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = startLoc.index;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.loc.start);\n  }\n}\n","/*:: declare var invariant; */\n\nimport type Parser from \"../../parser/index.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types.ts\";\nimport type * as N from \"../../types.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier.ts\";\nimport FlowScopeHandler from \"./scope.ts\";\nimport { BindingFlag, ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport type { ParseStatementFlag } from \"../../parser/statement.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node.ts\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Cannot overwrite reserved type ${reservedType}.`,\n  DeclareClassElement:\n    \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer:\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports:\n    \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  EnumDuplicateMemberName: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  EnumInconsistentMemberValues: ({ enumName }: { enumName: string }) =>\n    `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  EnumInvalidExplicitType: ({\n    invalidEnumType,\n    enumName,\n  }: {\n    invalidEnumType: string;\n    enumName: string;\n  }) =>\n    `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidExplicitTypeUnknownSupplied: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: ({\n    enumName,\n    memberName,\n    explicitType,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  EnumInvalidMemberInitializerSymbolType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerUnknownType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberName: ({\n    enumName,\n    memberName,\n    suggestion,\n  }: {\n    enumName: string;\n    memberName: string;\n    suggestion: string;\n  }) =>\n    `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  EnumNumberMemberNotInitialized: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n  }) =>\n    `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  EnumStringMemberInconsistentlyInitialized: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` or `typeof` keyword.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: {\n    message:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    ...(!process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {}),\n  },\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired:\n    \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor:\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst:\n    \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Unexpected reserved type ${reservedType}.`,\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction:\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: ({\n    unsupportedExportKind,\n    suggestion,\n  }: {\n    unsupportedExportKind: string;\n    suggestion: string;\n  }) =>\n    `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(\n  node: Undone<N.ImportSpecifier | N.ImportDeclaration>,\n): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (c: T, b: number, a: T[]) => boolean | undefined | null,\n): [T[], T[]] {\n  const list1: T[] = [];\n  const list2: T[] = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\n\ntype EnumContext = {\n  enumName: string;\n  explicitType: EnumExplicitType;\n  memberName: string;\n};\n\ntype EnumMemberInit =\n  | {\n      type: \"number\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"string\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"boolean\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"invalid\";\n      loc: Position;\n    }\n  | {\n      type: \"none\";\n      loc: Position;\n    };\n\nexport default (superClass: typeof Parser) =>\n  class FlowParserMixin extends superClass implements Parser {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): new (...args: any) => FlowScopeHandler {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowPredicate {\n      const node = this.startNode<N.FlowPredicate>();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStartLoc.index > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, moduloLoc);\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = super.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [\n      N.FlowType | undefined | null,\n      N.FlowPredicate | undefined | null,\n    ] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(\n      node: Undone<N.FlowDeclareClass>,\n    ): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: Undone<N.FlowDeclareFunction>,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode<N.FlowFunctionTypeAnnotation>();\n      const typeContainer = this.startNode<N.TypeAnnotation>();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [typeNode.returnType, node.predicate] =\n        this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: Undone<N.FlowDeclare>,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(\n              FlowErrors.NestedDeclareModule,\n              this.state.lastTokStartLoc,\n            );\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: Undone<N.FlowDeclareVariable>,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_VAR,\n        node.id.loc.start,\n      );\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(\n      node: Undone<N.FlowDeclareModule>,\n    ): N.FlowDeclareModule {\n      this.scope.enter(ScopeFlag.OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = super.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode<N.BlockStatement>());\n      // @ts-expect-error refine typings\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode<N.ImportDeclaration>();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(\n              FlowErrors.InvalidNonTypeImportInDeclareModule,\n              this.state.lastTokStartLoc,\n            );\n          }\n          super.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n          // @ts-expect-error refine typings\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind: \"CommonJS\" | \"ES\" | null = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, bodyElement);\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: Undone<N.FlowDeclareExportDeclaration>,\n      insideModule?: boolean | null,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value as\n            | \"const\"\n            | \"let\"\n            | \"type\"\n            | \"interface\";\n          throw this.raise(\n            FlowErrors.UnsupportedDeclareExportKind,\n            this.state.startLoc,\n            {\n              unsupportedExportKind: label,\n              suggestion: exportSuggestions[label],\n            },\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(\n            node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n            /* decorators */ null,\n          );\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.type = \"ExportDeclaration\";\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          node.type = \"Declare\" + node.type;\n\n          return node as N.FlowDeclareExportDeclaration;\n        }\n      }\n\n      this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: Undone<N.FlowDeclareModuleExports>,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: Undone<N.FlowDeclareTypeAlias>,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      const finished = this.flowParseTypeAlias(\n        node,\n      ) as unknown as N.FlowDeclareTypeAlias;\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareTypeAlias\";\n      return finished;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: Undone<N.FlowDeclareOpaqueType>,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      const finished = this.flowParseOpaqueType(\n        node,\n        true,\n      ) as unknown as N.FlowDeclareOpaqueType;\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareOpaqueType\";\n      return finished;\n    }\n\n    flowParseDeclareInterface(\n      node: Undone<N.FlowDeclareInterface>,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node, /* isClass */ false);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(node: Undone<N.FlowDeclare>, isClass: boolean): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BindingFlag.TYPE_FUNCTION : BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (isClass) {\n        node.implements = [];\n        node.mixins = [];\n\n        if (this.eatContextual(tt._mixins)) {\n          do {\n            node.mixins.push(this.flowParseInterfaceExtends());\n          } while (this.eat(tt.comma));\n        }\n\n        if (this.eatContextual(tt._implements)) {\n          do {\n            node.implements.push(this.flowParseInterfaceExtends());\n          } while (this.eat(tt.comma));\n        }\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode<N.FlowInterfaceExtends>();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: Undone<N.FlowInterface>): N.FlowInterface {\n      this.flowParseInterfaceish(node, /* isClass */ false);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(\n          FlowErrors.UnexpectedReservedUnderscore,\n          this.state.startLoc,\n        );\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        startLoc,\n        {\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: Undone<N.FlowTypeAlias>): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: Undone<N.FlowOpaqueType>,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode<N.TypeParameter>();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      // @ts-expect-error migrate to Babel types\n      node.variance = variance;\n      // @ts-expect-error migrate to Babel types\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        // @ts-expect-error migrate to Babel types\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, nodeStartLoc);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode<N.TypeParameterDeclaration>();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode<N.FlowInterfaceType>();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? super.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: Undone<N.FlowObjectTypeIndexer>,\n      isStatic: boolean,\n      variance?: N.FlowVariance | null,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: Undone<N.FlowObjectTypeInternalSlot>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: Undone<N.FlowFunctionTypeAnnotation>,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: Undone<N.FlowObjectTypeCallProperty>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean;\n      allowExact: boolean;\n      allowSpread: boolean;\n      allowProto: boolean;\n      allowInexact: boolean;\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode<N.FlowObjectTypeAnnotation>();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: Position | undefined | null = null;\n        let inexactStartLoc: Position | undefined | null = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(\n            FlowErrors.UnexpectedExplicitInexactInObject,\n            inexactStartLoc,\n          );\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: Undone<N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty>,\n      isStatic: boolean,\n      protoStartLoc: Position | undefined | null,\n      variance: N.FlowVariance | undefined | null,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(\n              FlowErrors.InexactInsideNonObject,\n              this.state.lastTokStartLoc,\n            );\n          } else if (!allowInexact) {\n            this.raise(\n              FlowErrors.InexactInsideExact,\n              this.state.lastTokStartLoc,\n            );\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, variance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(\n            FlowErrors.UnexpectedSpreadType,\n            this.state.lastTokStartLoc,\n          );\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, variance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(\n              FlowErrors.ThisParamBannedInConstructor,\n              node.value.this,\n            );\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: Undone<\n        N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty\n      >,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          property.value.this,\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          property,\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, property);\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier | N.Identifier {\n      startLoc ??= this.state.startLoc;\n      let node: N.Identifier | N.FlowQualifiedTypeIdentifier =\n        id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt<N.FlowQualifiedTypeIdentifier>(startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt<N.FlowGenericTypeAnnotation>(startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode<N.FlowTypeofTypeAnnotation>();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode<N.FlowTupleTypeAnnotation>();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode<N.FlowFunctionTypeParam>();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, node);\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, node);\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt<N.FlowFunctionTypeParam>(type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[];\n      rest: N.FlowFunctionTypeParam | undefined | null;\n      _this: N.FlowFunctionTypeParam | undefined | null;\n    } {\n      let rest: N.FlowFunctionTypeParam | undefined | null = null;\n      let _this: N.FlowFunctionTypeParam | undefined | null = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startLoc: Position,\n      node: Undone<N.FlowType>,\n      id: N.Identifier,\n    ): N.FlowType {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowType {\n      const startLoc = this.state.startLoc;\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt: {\n          const node = this.startNode<N.FlowFunctionTypeAnnotation>();\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        case tt.parenL: {\n          const node = this.startNode<N.FlowFunctionTypeAnnotation>();\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(\n            node as Undone<N.BooleanLiteralTypeAnnotation>,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(\n              FlowErrors.UnexpectedSubtractionOperand,\n              this.state.startLoc,\n            );\n          }\n          this.unexpected();\n          return;\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node as Undone<N.Identifier>, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowType {\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt<N.FlowOtherTypeAnnotation>(startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowType {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt<N.FlowFunctionTypeAnnotation>(\n          param.loc.start,\n        );\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowType {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.TypeAnnotation {\n      const node = this.startNode<N.TypeAnnotation>();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.TypeCastExpression): N.Expression {\n      (node.expression as N.Identifier).typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): N.FlowVariance | undefined | null {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode<N.FlowVariance>();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        return this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n        return;\n      }\n\n      super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode<N.TypeAnnotation>();\n\n        [\n          typeNode.typeAnnotation,\n          // @ts-expect-error predicate may not exist\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatementLike(flags: ParseStatementFlag): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode<N.FlowInterface>();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatementLike(flags);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            // @ts-expect-error: refine typings\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (type === tt._enum || tokenIsFlowInterfaceOrTypeOrOpaque(type)) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (type === tt._enum || tokenIsFlowInterfaceOrTypeOrOpaque(type)) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression() {\n      if (this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt<N.ConditionalExpression>(startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, state.startLoc);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression;\n      failed: boolean;\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (\n          node.type === \"ArrowFunctionExpression\" &&\n          node.body.type !== \"BlockStatement\"\n        ) {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        node.params as any as N.Expression[],\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(ScopeFlag.FUNCTION | ScopeFlag.ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(\n      node: Undone<N.Node>,\n      parse: () => T,\n    ): T {\n      let result: T;\n      if (\n        this.state.noArrowParamsConversionAt.includes(\n          this.offsetToSourcePos(node.start),\n        )\n      ) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n      node: T,\n      startLoc: Position,\n    ): T | N.TypeCastExpression | N.TsTypeCastExpression {\n      const newNode = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        (newNode as N.Identifier).optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TypeCastExpression>(startLoc);\n        typeCastNode.expression = newNode as N.Expression;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return newNode;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          super.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          // @ts-expect-error: refine typings\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        // @ts-expect-error: refine typings\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseInterface(declarationNode);\n      } else if (this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(\n      node: Undone<N.Node>,\n    ): node is Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration> {\n      if (super.eatExportStar(node)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        (\n          node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>\n        ).exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(\n      node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n    ): node is Undone<N.ExportNamedDeclaration> {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n    ) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (super.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, startLoc);\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, member.value);\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, this.state.curPosition(), {\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          this.finishOp(tt.questionDot, 2);\n        } else {\n          // allow double nullable types in Flow: ??string\n          this.finishOp(tt.question, 1);\n        }\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        this.readIterator();\n      } else {\n        super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (\n        !isLHS &&\n        node.type === \"AssignmentExpression\" &&\n        node.left.type === \"TypeCastExpression\"\n      ) {\n        node.left = this.typeCastToParameter(node.left) as N.Assignable;\n      }\n      super.toAssignable(node, isLHS);\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList:\n        | ReadonlyArray<N.Expression | N.SpreadElement>\n        | ReadonlyArray<N.Expression | N.RestElement>,\n      isParenthesizedExpr?: boolean,\n    ):\n      | ReadonlyArray<N.Expression | N.SpreadElement>\n      | ReadonlyArray<N.Expression | N.RestElement> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, expr.typeAnnotation);\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingFlag) {\n      return (\n        type === \"TypeCastExpression\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n        }\n        // estree support\n      } else if (\n        // @ts-expect-error TS does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        // @ts-expect-error estree\n        method.value.params\n      ) {\n        // @ts-expect-error estree\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode<N.FlowClassImplements>();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, param);\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, param);\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue<T extends N.ObjectMember>(\n      prop: Undone<T>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): T {\n      if ((prop as any).variance) {\n        this.unexpected((prop as any).variance.loc.start);\n      }\n      delete (prop as any).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      const result = super.parseObjPropValue(\n        prop,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        // @ts-expect-error: refine typings\n        (result.value || result).typeParameters = typeParameters;\n      }\n      return result;\n    }\n\n    parseFunctionParamType(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, param);\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, param);\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, param);\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, param);\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: N.Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, node.typeAnnotation);\n      }\n\n      return node;\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(\n          FlowErrors.ImportReflectionHasImportType,\n          node.specifiers[0].loc.start,\n        );\n      }\n    }\n\n    parseImportSpecifierLocal<\n      T extends\n        | N.ImportSpecifier\n        | N.ImportDefaultSpecifier\n        | N.ImportNamespaceSpecifier,\n    >(node: N.ImportDeclaration, specifier: Undone<T>, type: T[\"type\"]): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    isPotentialImportPhase(isExport: boolean): boolean {\n      if (super.isPotentialImportPhase(isExport)) return true;\n      if (this.isContextual(tt._type)) {\n        if (!isExport) return true;\n        const ch = this.lookaheadCharCode();\n        return ch === charCodes.leftCurlyBrace || ch === charCodes.asterisk;\n      }\n      return !isExport && this.isContextual(tt._typeof);\n    }\n\n    applyImportPhase(\n      node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n      isExport: boolean,\n      phase: string | null,\n      loc?: Position,\n    ): void {\n      super.applyImportPhase(node, isExport, phase, loc);\n      if (isExport) {\n        if (!phase && this.match(tt._default)) {\n          // TODO: Align with our TS AST and always add .exportKind\n          return;\n        }\n        (node as N.ExportNamedDeclaration).exportKind =\n          phase === \"type\" ? phase : \"value\";\n      } else {\n        if (phase === \"type\" && this.match(tt.star)) this.unexpected();\n        (node as N.ImportDeclaration).importKind =\n          phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n      }\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingFlag | undefined,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, specifier, {\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, specifier);\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(\n      node: Undone<N.Function>,\n      isConstructor: boolean,\n    ): void {\n      // @ts-expect-error kind may not index node\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters: N.TypeParameterDeclaration;\n\n        const arrow = this.tryParse((abort: () => never) => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression:\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n          | undefined\n          | null = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            // @ts-expect-error: refine tryParse typings\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                typeParameters,\n              );\n            }\n            return arrow.node;\n          }\n\n          // @ts-expect-error: refine typings\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(\n          FlowErrors.UnexpectedTokenAfterTypeParameter,\n          typeParameters,\n        );\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error todo(flow->ts)\n        const result = this.tryParse<N.TypeAnnotation>(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode<N.TypeAnnotation>();\n\n          [\n            typeNode.typeAnnotation,\n            // @ts-expect-error (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        // @ts-expect-error todo(flow->ts)\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: Undone<N.ArrowFunctionExpression>,\n      params:\n        | Array<N.Expression | N.SpreadElement>\n        | Array<N.Expression | N.RestElement>,\n    ): void {\n      if (\n        this.state.noArrowParamsConversionAt.includes(\n          this.offsetToSourcePos(node.start),\n        )\n      ) {\n        node.params = params as N.ArrowFunctionExpression[\"params\"];\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction?: boolean | null,\n      strictModeChanged: boolean = true,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.includes(\n          this.offsetToSourcePos(node.start),\n        )\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, node.params[i]);\n        }\n      }\n\n      super.checkParams(\n        node,\n        allowDuplicates,\n        isArrowFunction,\n        strictModeChanged,\n      );\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow &&\n          !this.state.noArrowAt.includes(\n            this.sourceToOffsetPos(this.state.start),\n          ),\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls?: boolean | null,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.includes(startLoc.index)\n      ) {\n        this.next();\n\n        const node = this.startNodeAt<N.CallExpression>(startLoc);\n        node.callee = base;\n        node.arguments = super.parseCallExpressionArguments(tt.parenR);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        // @ts-expect-error: refine tryParse typings\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          // @ts-expect-error: refine tryParse typings\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node = this.startNodeAt<N.OptionalCallExpression>(startLoc);\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        node.arguments = this.parseCallExpressionArguments(tt.parenR);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt<\n          N.OptionalCallExpression | N.CallExpression\n        >(startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = super.parseCallExpressionArguments(tt.parenR);\n          if (subscriptState.optionalChainMember) {\n            (node as Undone<N.OptionalCallExpression>).optional = false;\n          }\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n      this.parseFunctionParams(node, false);\n      if (!this.parseArrow(node)) return;\n      return super.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(\n          FlowErrors.UnterminatedFlowComment,\n          this.state.curPosition(),\n        );\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | undefined {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, this.state.startLoc);\n        }\n        this.hasFlowCommentCompletion();\n        const commentSkip = this.skipFlowComment();\n        if (commentSkip) {\n          this.state.pos += commentSkip;\n          this.state.hasFlowComment = true;\n        }\n        return;\n      }\n\n      return super.skipBlockComment(this.state.hasFlowComment ? \"*-/\" : \"*/\");\n    }\n\n    skipFlowComment(): number | false {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          // @ts-expect-error testing whether a number is included\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, loc, {\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n            ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n            : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        loc,\n        enumContext,\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      details: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, loc, details);\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitialized(\n      node: N.Node,\n      details: {\n        enumName: string;\n      },\n    ): void {\n      this.raise(\n        FlowErrors.EnumStringMemberInconsistentlyInitialized,\n        node,\n        details,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): {\n      id: N.Identifier;\n      init: EnumMemberInit;\n    } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\" as const, loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string;\n      explicitType: EnumExplicitType;\n    }): {\n      members: {\n        booleanMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumBooleanMember\" }\n        >[];\n        numberMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumNumberMember\" }\n        >[];\n        stringMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumStringMember\" }\n        >[];\n        defaultedMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumDefaultedMember\" }\n        >[];\n      };\n      hasUnknownMembers: boolean;\n    } {\n      const seenNames = new Set();\n      const members = {\n        // @ts-expect-error: migrate to Babel types\n        booleanMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        numberMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        stringMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode<N.FlowEnumMember>();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, id, {\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, id, {\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string;\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(\n          FlowErrors.EnumInvalidExplicitTypeUnknownSupplied,\n          this.state.startLoc,\n          {\n            enumName,\n          },\n        );\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, this.state.startLoc, {\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: Undone<N.FlowEnumBody>, id: N.Identifier): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, nameLoc, {\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(\n      node: Undone<N.FlowEnumDeclaration>,\n    ): N.FlowEnumDeclaration {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","const entities: {\n  __proto__: null;\n  [name: string]: string;\n} = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n} as const;\nexport default entities;\n","import * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml.ts\";\nimport type Parser from \"../../parser/index.ts\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types.ts\";\nimport type { TokContext } from \"../../tokenizer/context.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport type * as N from \"../../types.ts\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { isNewLine } from \"../../util/whitespace.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport type { Undone } from \"../../parser/node.ts\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: ({ openingTagName }: { openingTagName: string }) =>\n    `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression:\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: ({\n    unexpected,\n    HTMLEntity,\n  }: {\n    unexpected: string;\n    HTMLEntity: string;\n  }) =>\n    `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object?: N.JSXTag | null): object is N.JSXFragmentTag {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  // @ts-expect-error - object is 'never'\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport interface IJSXParserMixin {\n  jsxParseOpeningElementAfterName(\n    node: N.JSXOpeningElement,\n  ): N.JSXOpeningElement;\n}\n\nexport default (superClass: typeof Parser) =>\n  class JSXParserMixin extends superClass implements Parser, IJSXParserMixin {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(\n            JsxErrors.UnterminatedJsxContent,\n            this.state.startLoc,\n          );\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                this.finishToken(tt.jsxTagStart);\n              } else {\n                super.getTokenFromCode(ch);\n              }\n              return;\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            this.finishToken(tt.jsxText, out);\n            return;\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, this.state.curPosition(), {\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, this.state.startLoc);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) === charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      this.finishToken(tt.jsxName, this.input.slice(start, this.state.pos));\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode<N.JSXIdentifier>();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName | N.JSXIdentifier {\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt<N.JSXNamespacedName>(startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startLoc = this.state.startLoc;\n      let node: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression =\n        this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt<N.JSXMemberExpression>(startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue():\n      | N.JSXExpressionContainer\n      | N.JSXElement\n      | N.StringLiteral {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, node);\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom() as N.JSXElement | N.StringLiteral;\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, this.state.startLoc);\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(this.state.lastTokEndLoc);\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: Undone<N.JSXSpreadChild>): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_expr);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: Undone<N.JSXExpressionContainer>,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(\n              JsxErrors.UnexpectedSequenceExpression,\n              expression.expressions[1],\n            );\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute | N.JSXSpreadAttribute {\n      const node = this.startNode<N.JSXAttribute | N.JSXSpreadAttribute>();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.state.canStartJSXElement = true;\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startLoc: Position,\n    ): N.JSXOpeningElement | N.JSXOpeningFragment {\n      const node = this.startNodeAt<N.JSXOpeningElement | N.JSXOpeningFragment>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(\n        node as Undone<N.JSXOpeningElement>,\n      );\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: Undone<N.JSXOpeningElement>,\n    ): N.JSXOpeningElement {\n      const attributes: (N.JSXAttribute | N.JSXSpreadAttribute)[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startLoc: Position,\n    ): N.JSXClosingElement | N.JSXClosingFragment {\n      const node = this.startNodeAt<N.JSXClosingFragment | N.JSXClosingElement>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startLoc: Position): N.JSXElement | N.JSXFragment {\n      const node = this.startNodeAt<N.JSXElement | N.JSXFragment>(startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(startLoc);\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseLiteral(this.state.value, \"JSXText\"));\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode<\n                N.JSXSpreadChild | N.JSXExpressionContainer\n              >();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, closingElement);\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(\n          JsxErrors.UnwrappedAdjacentJSXElements,\n          this.state.startLoc,\n        );\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement | N.JSXFragment {\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        this.jsxReadToken();\n        return;\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          this.jsxReadWord();\n          return;\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          this.finishToken(tt.jsxTagEnd);\n          return;\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          this.jsxReadString(code);\n          return;\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        this.finishToken(tt.jsxTagStart);\n        return;\n      }\n\n      super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","import type { Position } from \"../../util/location.ts\";\nimport ScopeHandler, { NameType, Scope } from \"../../util/scope.ts\";\nimport { BindingFlag, ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type * as N from \"../../types.ts\";\nimport { Errors } from \"../../parse-error.ts\";\n\nconst enum TsNameType {\n  Types = 1 << 0,\n  // enums (which are also in .types)\n  Enums = 1 << 1,\n  // const enums (which are also in .enums and .types)\n  ConstEnums = 1 << 2,\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  Classes = 1 << 3,\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  ExportOnlyBindings = 1 << 4,\n}\n\nclass TypeScriptScope extends Scope {\n  tsNames: Map<string, TsNameType> = new Map();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  importsStack: Set<string>[] = [];\n\n  createScope(flags: ScopeFlag): TypeScriptScope {\n    this.importsStack.push(new Set()); // Always keep the top-level scope for export checks.\n\n    return new TypeScriptScope(flags);\n  }\n\n  enter(flags: ScopeFlag): void {\n    if (flags === ScopeFlag.TS_MODULE) {\n      this.importsStack.push(new Set());\n    }\n\n    super.enter(flags);\n  }\n\n  exit() {\n    const flags = super.exit();\n\n    if (flags === ScopeFlag.TS_MODULE) {\n      this.importsStack.pop();\n    }\n\n    return flags;\n  }\n\n  hasImport(name: string, allowShadow?: boolean) {\n    const len = this.importsStack.length;\n    if (this.importsStack[len - 1].has(name)) {\n      return true;\n    }\n    if (!allowShadow && len > 1) {\n      for (let i = 0; i < len - 1; i++) {\n        if (this.importsStack[i].has(name)) return true;\n      }\n    }\n    return false;\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    if (bindingType & BindingFlag.FLAG_TS_IMPORT) {\n      if (this.hasImport(name, true)) {\n        this.parser.raise(Errors.VarRedeclaration, loc, {\n          identifierName: name,\n        });\n      }\n      this.importsStack[this.importsStack.length - 1].add(name);\n      return;\n    }\n\n    const scope = this.currentScope();\n    let type = scope.tsNames.get(name) || 0;\n\n    if (bindingType & BindingFlag.FLAG_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.tsNames.set(name, type | TsNameType.ExportOnlyBindings);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n\n    if (bindingType & BindingFlag.KIND_TYPE) {\n      if (!(bindingType & BindingFlag.KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      type = type | TsNameType.Types;\n    }\n    if (bindingType & BindingFlag.FLAG_TS_ENUM) {\n      type = type | TsNameType.Enums;\n    }\n    if (bindingType & BindingFlag.FLAG_TS_CONST_ENUM) {\n      type = type | TsNameType.ConstEnums;\n    }\n    if (bindingType & BindingFlag.FLAG_CLASS) {\n      type = type | TsNameType.Classes;\n    }\n    if (type) scope.tsNames.set(name, type);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    const type = scope.tsNames.get(name);\n    if ((type & TsNameType.Enums) > 0) {\n      if (bindingType & BindingFlag.FLAG_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BindingFlag.FLAG_TS_CONST_ENUM);\n        const wasConst = (type & TsNameType.ConstEnums) > 0;\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (\n      bindingType & BindingFlag.FLAG_CLASS &&\n      (type & TsNameType.Classes) > 0\n    ) {\n      if (scope.names.get(name) & NameType.Lexical) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BindingFlag.KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BindingFlag.KIND_TYPE && (type & TsNameType.Types) > 0) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n\n    if (this.hasImport(name)) return;\n\n    const len = this.scopeStack.length;\n    for (let i = len - 1; i >= 0; i--) {\n      const scope = this.scopeStack[i];\n      const type = scope.tsNames.get(name);\n      if (\n        (type & TsNameType.Types) > 0 ||\n        (type & TsNameType.ExportOnlyBindings) > 0\n      ) {\n        return;\n      }\n    }\n\n    super.checkLocalExport(id);\n  }\n}\n","import * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types.ts\";\nimport type {\n  AssignmentPattern,\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  ObjectOrClassMember,\n  ClassMember,\n  ObjectMember,\n  TsNamedTypeElementBase,\n  PrivateName,\n  ObjectExpression,\n  ObjectPattern,\n  ArrayPattern,\n  AssignmentProperty,\n  Assignable,\n} from \"../types.ts\";\nimport type { Pos, Position } from \"../util/location.ts\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier.ts\";\nimport { NodeUtils, type Undone } from \"./node.ts\";\nimport { BindingFlag } from \"../util/scopeflags.ts\";\nimport type { ExpressionErrors } from \"./util.ts\";\nimport { Errors, type LValAncestor } from \"../parse-error.ts\";\nimport type Parser from \"./index.ts\";\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport const enum ParseBindingListFlags {\n  ALLOW_EMPTY = 1 << 0,\n  IS_FUNCTION_PARAMS = 1 << 1,\n  IS_CONSTRUCTOR_PARAMS = 1 << 2,\n}\n\nexport default abstract class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  abstract parseIdentifier(liberal?: boolean): Identifier;\n  abstract parseMaybeAssign(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseMaybeAssignAllowIn(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseObjectLike<T extends ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): T;\n  abstract parseObjPropValue(\n    prop: any,\n    startLoc: Position | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void;\n  abstract parsePropertyName(\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ): void;\n  abstract parsePrivateName(): PrivateName;\n  // Forward-declaration: defined in statement.js\n  abstract parseDecorator(): Decorator;\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n   *\n   * - Parenthesized Destructuring patterns\n   * - RestElement is not the last element\n   * - Missing `=` in assignment pattern\n   *\n   * NOTE: There is a corresponding \"isAssignable\" method.\n   * When this one is updated, please check if also that one needs to be updated.\n   *\n   * @param node The expression atom\n   * @param isLHS Whether we are parsing a LeftHandSideExpression.\n   *              If isLHS is `true`, the following cases are allowed: `[(a)] = [0]`, `[(a.b)] = [0]`\n   *              If isLHS is `false`, we are in an arrow function parameters list.\n   */\n  toAssignable(node: Node, isLHS: boolean = false): asserts node is Assignable {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordArrowParameterBindingError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParameterBindingError(\n            Errors.InvalidParenthesizedAssignment,\n            node,\n          );\n        } else if (\n          parenthesized.type !== \"MemberExpression\" &&\n          !this.isOptionalMemberExpression(parenthesized)\n        ) {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, node);\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, node);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        (node as Node).type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            (prop as Node).type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, node.extra.trailingCommaLoc);\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        throw new Error(\n          \"Internal @babel/parser error (this is a bug, please report it).\" +\n            \" SpreadElement should be converted by .toAssignable's caller.\",\n        );\n      }\n\n      case \"ArrayExpression\":\n        (node as Node).type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, node.left.loc.end);\n        }\n\n        (node as Node).type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        prop.key,\n      );\n    } else if (prop.type === \"SpreadElement\") {\n      (prop as Node).type = \"RestElement\";\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ false);\n      this.toAssignable(arg, isLHS);\n\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, prop);\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: (Expression | SpreadElement | RestElement)[],\n    trailingCommaLoc: Position | undefined | null,\n    isLHS: boolean,\n  ): void {\n    const end = exprList.length - 1;\n\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n\n      if (elt.type === \"SpreadElement\") {\n        (elt as unknown as RestElement).type = \"RestElement\";\n        const arg = elt.argument;\n        this.checkToRestConversion(arg, /* allowPattern */ true);\n        this.toAssignable(arg, isLHS);\n      } else {\n        this.toAssignable(elt, isLHS);\n      }\n\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, elt);\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, trailingCommaLoc);\n        }\n      }\n    }\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return node.properties.every((prop, i) => {\n          return (\n            prop.type !== \"ObjectMethod\" &&\n            (i === last || prop.type !== \"SpreadElement\") &&\n            this.isAssignable(prop)\n          );\n        });\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList:\n      | ReadonlyArray<Expression | SpreadElement>\n      | ReadonlyArray<Expression | RestElement>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isParenthesizedExpr?: boolean,\n  ):\n    | ReadonlyArray<Expression | SpreadElement>\n    | ReadonlyArray<Expression | RestElement> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList:\n      | ReadonlyArray<Expression | SpreadElement>\n      | ReadonlyArray<Expression | RestElement>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): SpreadElement {\n    const node = this.startNode<SpreadElement>();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(this: Parser): RestElement {\n    const node = this.startNode<RestElement>();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(this: Parser): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode<ArrayPattern>();\n        this.next();\n        // @ts-expect-error: Fixme: TSParameterProperty can not be assigned to node.elements\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          ParseBindingListFlags.ALLOW_EMPTY,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    this: Parser,\n    close: TokenType,\n    closeCharCode: (typeof charCodes)[keyof typeof charCodes],\n    flags: ParseBindingListFlags,\n  ): Array<Pattern | TSParameterProperty> {\n    const allowEmpty = flags & ParseBindingListFlags.ALLOW_EMPTY;\n\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        let rest: Pattern = this.parseRestBinding();\n        if (\n          (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"flow\")) ||\n          flags & ParseBindingListFlags.IS_FUNCTION_PARAMS\n        ) {\n          rest = this.parseFunctionParamType(rest);\n        }\n        elts.push(rest);\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, this.state.startLoc);\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(flags, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(\n    this: Parser,\n    prop: Undone<RestElement>,\n  ): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(this: Parser): AssignmentProperty | RestElement {\n    const { type, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(this.startNode());\n    }\n\n    const prop = this.startNode<AssignmentProperty>();\n    if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n    prop.method = false;\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n  }\n\n  parseAssignableListItem(\n    this: Parser,\n    flags: ParseBindingListFlags,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    if (\n      (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"flow\")) ||\n      flags & ParseBindingListFlags.IS_FUNCTION_PARAMS\n    ) {\n      this.parseFunctionParamType(left);\n    }\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseFunctionParamType(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    this: Parser,\n    startLoc?: Position | null,\n    left?: Pattern | null,\n  ): Pattern {\n    startLoc ??= this.state.startLoc;\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt<AssignmentPattern>(startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus its descendants must be subsequently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param type A Node `type` string\n   * @param isUnparenthesizedInAssign\n   *        Whether the node in question is unparenthesized and its parent\n   *        is either an assignment pattern or an assignment expression.\n   * @param binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  isValidLVal(\n    type: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isUnparenthesizedInAssign: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    binding: BindingFlag,\n  ): string | boolean | [string, boolean] {\n    switch (type) {\n      case \"AssignmentPattern\":\n        return \"left\";\n      case \"RestElement\":\n        return \"argument\";\n      case \"ObjectProperty\":\n        return \"value\";\n      case \"ParenthesizedExpression\":\n        return \"expression\";\n      case \"ArrayPattern\":\n        return \"elements\";\n      case \"ObjectPattern\":\n        return \"properties\";\n    }\n    return false;\n  }\n\n  // Overridden by the estree plugin\n  isOptionalMemberExpression(expression: Node): boolean {\n    return expression.type === \"OptionalMemberExpression\";\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param expression The expression in question to check.\n   * @param ancestor\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param binding\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BindingFlag.TYPE_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param checkClashes\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param strictModeChanged\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param hasParenthesizedAncestor\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   */\n\n  checkLVal(\n    expression:\n      | Expression\n      | ObjectMember\n      | RestElement\n      | Pattern\n      | TSParameterProperty,\n    ancestor: LValAncestor,\n    binding: BindingFlag = BindingFlag.TYPE_NONE,\n    checkClashes: Set<string> | false = false,\n    strictModeChanged: boolean = false,\n    hasParenthesizedAncestor: boolean = false,\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    const isOptionalMemberExpression =\n      this.isOptionalMemberExpression(expression);\n\n    if (isOptionalMemberExpression || type === \"MemberExpression\") {\n      if (isOptionalMemberExpression) {\n        this.expectPlugin(\"optionalChainingAssign\", expression.loc.start);\n        if (ancestor.type !== \"AssignmentExpression\") {\n          this.raise(Errors.InvalidLhsOptionalChaining, expression, {\n            ancestor,\n          });\n        }\n      }\n\n      if (binding !== BindingFlag.TYPE_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, expression);\n      }\n      return;\n    }\n\n    if (type === \"Identifier\") {\n      this.checkIdentifier(expression, binding, strictModeChanged);\n\n      const { name } = expression;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, expression);\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(\n      type,\n      !(hasParenthesizedAncestor || expression.extra?.parenthesized) &&\n        ancestor.type === \"AssignmentExpression\",\n      binding,\n    );\n\n    if (validity === true) return;\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BindingFlag.TYPE_NONE\n          ? Errors.InvalidLhs\n          : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, expression, { ancestor });\n      return;\n    }\n\n    let key: string, isParenthesizedExpression: boolean;\n    if (typeof validity === \"string\") {\n      key = validity;\n      isParenthesizedExpression = type === \"ParenthesizedExpression\";\n    } else {\n      [key, isParenthesizedExpression] = validity;\n    }\n\n    const nextAncestor =\n      type === \"ArrayPattern\" || type === \"ObjectPattern\"\n        ? ({ type } as const)\n        : ancestor;\n\n    // @ts-expect-error key may not index expression.\n    const val = expression[key];\n    if (Array.isArray(val)) {\n      for (const child of val) {\n        if (child) {\n          this.checkLVal(\n            child,\n            nextAncestor,\n            binding,\n            checkClashes,\n            strictModeChanged,\n            isParenthesizedExpression,\n          );\n        }\n      }\n    } else if (val) {\n      this.checkLVal(\n        val,\n        nextAncestor,\n        binding,\n        checkClashes,\n        strictModeChanged,\n        isParenthesizedExpression,\n      );\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingFlag,\n    strictModeChanged: boolean = false,\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BindingFlag.TYPE_NONE) {\n        this.raise(Errors.StrictEvalArguments, at, { referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, at, {\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (bindingType & BindingFlag.FLAG_NO_LET_IN_LEXICAL && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, at);\n    }\n\n    if (!(bindingType & BindingFlag.TYPE_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingFlag) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: Node, allowPattern: boolean): void {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      /* falls through */\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, node);\n    }\n  }\n\n  checkCommaAfterRest(\n    close: (typeof charCodes)[keyof typeof charCodes],\n  ): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      this.state.startLoc,\n    );\n\n    return true;\n  }\n}\n","import type State from \"../../tokenizer/state.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n  tokenCanStartExpression,\n} from \"../../tokenizer/types.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport type * as N from \"../../types.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { createPositionWithColumnOffset } from \"../../util/location.ts\";\nimport type Parser from \"../../parser/index.ts\";\nimport { ScopeFlag, BindingFlag } from \"../../util/scopeflags.ts\";\nimport TypeScriptScopeHandler from \"./scope.ts\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport type { ParseStatementFlag } from \"../../parser/statement.ts\";\nimport { ParamKind } from \"../../util/production-parameter.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node.ts\";\nimport type { Pattern } from \"../../types.ts\";\nimport type { Expression } from \"../../types.ts\";\nimport type { IJSXParserMixin } from \"../jsx/index.ts\";\nimport { ParseBindingListFlags } from \"../../parser/lval.ts\";\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | \"const\"\n  | N.Accessibility\n  | N.VarianceAnnotations;\n\nfunction nonNull<T>(x?: T | null): T {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\ntype ModifierBase = {\n  accessibility?: N.Accessibility;\n} & {\n  [key in TsModifier]?: boolean | undefined | null;\n};\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: ({ methodName }: { methodName: string }) =>\n    `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  AbstractPropertyHasInitializer: ({\n    propertyName,\n  }: {\n    propertyName: string;\n  }) =>\n    `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  AccessorCannotBeOptional:\n    \"An 'accessor' property cannot be declared optional.\",\n  AccessorCannotDeclareThisParameter:\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccessorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters:\n    \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `'declare' is not allowed in ${kind}ters.`,\n  DeclareClassFieldHasInitializer:\n    \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation:\n    \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier:\n    // `Accessibility modifier already seen: ${modifier}` would be more helpful.\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ({ modifier }: { modifier: N.Accessibility }) =>\n      `Accessibility modifier already seen.`,\n  DuplicateModifier: ({ modifier }: { modifier: TsModifier }) =>\n    `Duplicate modifier: '${modifier}'.`,\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list cannot be empty.`,\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare:\n    \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` modifier\",\n  IncompatibleModifiers: ({\n    modifiers,\n  }: {\n    modifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  IndexSignatureHasDeclare:\n    \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride:\n    \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic:\n    \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext:\n    \"Initializers are not allowed in ambient contexts.\",\n  InvalidModifierOnTypeMember: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type member.`,\n  InvalidModifierOnTypeParameter: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type parameter.`,\n  InvalidModifierOnTypeParameterPositions: ({\n    modifier,\n  }: {\n    modifier: TsModifier;\n  }) =>\n    `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  InvalidModifiersOrder: ({\n    orderedModifiers,\n  }: {\n    orderedModifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  InvalidPropertyAccessAfterInstantiationExpression:\n    \"Invalid property access after an instantiation expression. \" +\n    \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel:\n    \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName:\n    \"'interface' declarations must be followed by an identifier.\",\n  NonAbstractClassHasAbstractMethod:\n    \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer:\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass:\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ReadonlyForMethodSignature:\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam:\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion:\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  SetAccessorCannotHaveOptionalParameter:\n    \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccessorCannotHaveRestParameter:\n    \"A 'set' accessor cannot have rest parameter.\",\n  SetAccessorCannotHaveReturnType:\n    \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: ({\n    typeParameterName,\n  }: {\n    typeParameterName: string;\n  }) =>\n    `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  StaticBlockCannotHaveModifier:\n    \"Static class blocks cannot have any modifier.\",\n  TupleOptionalAfterType:\n    \"A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed:\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports:\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports:\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier:\n    \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: ({ type }: { type: string }) =>\n    `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n});\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(value: string): N.TsKeywordTypeType | undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): modifier is N.Accessibility {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nfunction tsIsVarianceAnnotations(\n  modifier: string,\n): modifier is N.VarianceAnnotations {\n  return modifier === \"in\" || modifier === \"out\";\n}\n\ntype ClassWithMixin<\n  T extends new (...args: any) => any,\n  M extends object,\n> = T extends new (...args: infer P) => infer I\n  ? new (...args: P) => I & M\n  : never;\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class TypeScriptParserMixin extends superClass implements Parser {\n    getScopeHandler(): new (...args: any) => TypeScriptScopeHandler {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        this.match(tt.bracketL) ||\n        this.match(tt.braceL) ||\n        this.match(tt.star) ||\n        this.match(tt.ellipsis) ||\n        this.match(tt.privateName) ||\n        this.isLiteralPropertyName()\n      );\n    }\n\n    tsNextTokenOnSameLineAndCanFollowModifier() {\n      this.next();\n      if (this.hasPrecedingLineBreak()) {\n        return false;\n      }\n      return this.tsTokenCanFollowModifier();\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      if (this.match(tt._static)) {\n        this.next();\n        return this.tsTokenCanFollowModifier();\n      }\n      return this.tsNextTokenOnSameLineAndCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T extends TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): T | undefined | null {\n      if (\n        !tokenIsIdentifier(this.state.type) &&\n        this.state.type !== tt._in &&\n        this.state.type !== tt._const\n      ) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.includes(modifier)) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers<N extends ModifierBase>(\n      {\n        allowedModifiers,\n        disallowedModifiers,\n        stopOnStartOfClassStaticBlock,\n        errorTemplate = TSErrors.InvalidModifierOnTypeMember,\n      }: {\n        allowedModifiers: readonly TsModifier[];\n        disallowedModifiers?: TsModifier[];\n        stopOnStartOfClassStaticBlock?: boolean;\n        errorTemplate?: typeof TSErrors.InvalidModifierOnTypeMember;\n      },\n      modified: N,\n    ): void {\n      const enforceOrder = (\n        loc: Position,\n        modifier: TsModifier,\n        before: TsModifier,\n        after: TsModifier,\n      ) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, loc, {\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (\n        loc: Position,\n        modifier: TsModifier,\n        mod1: TsModifier,\n        mod2: TsModifier,\n      ) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, loc, {\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: TsModifier | undefined | null = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, startLoc, {\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else if (tsIsVarianceAnnotations(modifier)) {\n          if (modified[modifier]) {\n            this.raise(TSErrors.DuplicateModifier, startLoc, { modifier });\n          }\n          modified[modifier] = true;\n\n          enforceOrder(startLoc, modifier, \"in\", \"out\");\n        } else {\n          if (Object.hasOwn(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, startLoc, { modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(errorTemplate, startLoc, {\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n    }\n\n    tsParseList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T | undefined,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] | undefined {\n      const result: T[] = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStartLoc.index;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node = this.startNode<N.TsImportType>();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, this.state.startLoc);\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = super.parseExprAtom() as N.StringLiteral;\n      if (this.eat(tt.comma) && !this.match(tt.parenR)) {\n        node.options = super.parseMaybeAssignAllowIn();\n        this.eat(tt.comma);\n      } else {\n        node.options = null;\n      }\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName();\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean = true): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier(allowReservedWords);\n      while (this.eat(tt.dot)) {\n        const node: Undone<N.TsQualifiedName> =\n          this.startNodeAtNode<N.TsQualifiedName>(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node = this.startNode<N.TsTypeReference>();\n      node.typeName = this.tsParseEntityName();\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node = this.startNodeAtNode<N.TsTypePredicate>(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node = this.startNode<N.TsThisType>();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node = this.startNode<N.TsTypeQuery>();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName();\n      }\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseInOutModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\"],\n      disallowedModifiers: [\n        \"const\",\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseConstModifier = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"const\"],\n      // for better error recovery\n      disallowedModifiers: [\"in\", \"out\"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n    });\n\n    tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\", \"const\"],\n      disallowedModifiers: [\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseTypeParameter(\n      parseModifiers: (node: Undone<N.TsTypeParameter>) => void,\n    ): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n\n      parseModifiers(node);\n\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(\n      parseModifiers: (node: N.TsTypeParameter) => void,\n    ): N.TsTypeParameterDeclaration | undefined | null {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters(parseModifiers);\n      }\n    }\n\n    tsParseTypeParameters(parseModifiers: (node: N.TsTypeParameter) => void) {\n      const node = this.startNode<N.TsTypeParameterDeclaration>();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this, parseModifiers),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, node);\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: Undone<N.TsSignatureDeclaration>,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): Array<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern\n    > {\n      const list = super.parseBindingList(\n        tt.parenR,\n        charCodes.rightParenthesis,\n        ParseBindingListFlags.IS_FUNCTION_PARAMS,\n      );\n      for (const pattern of list) {\n        const { type } = pattern;\n        if (type === \"AssignmentPattern\" || type === \"TSParameterProperty\") {\n          this.raise(TSErrors.UnsupportedSignatureParameterKind, pattern, {\n            type,\n          });\n        }\n      }\n      return list as Exclude<\n        (typeof list)[0],\n        N.AssignmentPattern | N.TSParameterProperty\n      >[];\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: Undone<\n        N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration\n      >,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(\n      node: Undone<N.TsIndexSignature>,\n    ): N.TsIndexSignature | undefined {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, node);\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(\n            TSErrors.AccessorCannotHaveTypeParameters,\n            this.state.curPosition(),\n          );\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, this.state.curPosition());\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(\n                TSErrors.AccessorCannotDeclareThisParameter,\n                this.state.curPosition(),\n              );\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, this.state.curPosition());\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(\n                TSErrors.AccessorCannotDeclareThisParameter,\n                this.state.curPosition(),\n              );\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(\n                TSErrors.SetAccessorCannotHaveOptionalParameter,\n                this.state.curPosition(),\n              );\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(\n                TSErrors.SetAccessorCannotHaveRestParameter,\n                this.state.curPosition(),\n              );\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(\n              TSErrors.SetAccessorCannotHaveReturnType,\n              method[returnTypeKey],\n            );\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id = this.startNode<N.Identifier>();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\"readonly\"],\n          disallowedModifiers: [\n            \"declare\",\n            \"abstract\",\n            \"private\",\n            \"protected\",\n            \"public\",\n            \"static\",\n            \"override\",\n          ],\n        },\n        node,\n      );\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      super.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        super.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node = this.startNode<N.TsTypeLiteral>();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): Array<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node = this.startNode<N.TsMappedType>();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      if (process.env.BABEL_8_BREAKING) {\n        node.key = this.tsParseTypeParameterName() as N.Identifier;\n        node.constraint = this.tsExpectThenParseType(tt._in);\n      } else {\n        const typeParameter = this.startNode<N.TsTypeParameter>();\n        typeParameter.name = this.tsParseTypeParameterName();\n        typeParameter.constraint = this.tsExpectThenParseType(tt._in);\n        // @ts-expect-error for Babel 7\n        node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      }\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node = this.startNode<N.TsTupleType>();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      node.elementTypes.forEach(elementNode => {\n        const { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, elementNode);\n        }\n\n        seenOptionalElement ||=\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsNamedTupleMember | N.TsType {\n      // parses `...TsType[]`\n\n      const { startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n\n      let labeled: boolean;\n      let label: N.Identifier;\n      let optional: boolean;\n      let type: N.TsNamedTupleMember | N.TsType;\n\n      const isWord = tokenIsKeywordOrIdentifier(this.state.type);\n      const chAfterWord = isWord ? this.lookaheadCharCode() : null;\n      if (chAfterWord === charCodes.colon) {\n        labeled = true;\n        optional = false;\n        label = this.parseIdentifier(true);\n        this.expect(tt.colon);\n        type = this.tsParseType();\n      } else if (chAfterWord === charCodes.questionMark) {\n        optional = true;\n        const startLoc = this.state.startLoc;\n        const wordName = this.state.value;\n        const typeOrLabel = this.tsParseNonArrayType();\n\n        if (this.lookaheadCharCode() === charCodes.colon) {\n          labeled = true;\n          label = this.createIdentifier(\n            this.startNodeAt<N.Identifier>(startLoc),\n            wordName,\n          );\n          this.expect(tt.question);\n          this.expect(tt.colon);\n          type = this.tsParseType();\n        } else {\n          labeled = false;\n          type = typeOrLabel;\n          this.expect(tt.question);\n        }\n      } else {\n        type = this.tsParseType();\n        optional = this.eat(tt.question);\n        // In this case (labeled === true) could be only in invalid label.\n        // E.g. [x.y:type]\n        // An error is raised while processing node.\n        labeled = this.eat(tt.colon);\n      }\n\n      if (labeled) {\n        let labeledNode: Undone<N.TsNamedTupleMember>;\n        if (label) {\n          labeledNode = this.startNodeAtNode<N.TsNamedTupleMember>(label);\n          labeledNode.optional = optional;\n          labeledNode.label = label;\n          labeledNode.elementType = type;\n\n          if (this.eat(tt.question)) {\n            labeledNode.optional = true;\n            this.raise(\n              TSErrors.TupleOptionalAfterType,\n              this.state.lastTokStartLoc,\n            );\n          }\n        } else {\n          labeledNode = this.startNodeAtNode<N.TsNamedTupleMember>(type);\n          labeledNode.optional = optional;\n          this.raise(TSErrors.InvalidTupleMemberLabel, type);\n          // @ts-expect-error This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          labeledNode.label = type;\n          labeledNode.elementType = this.tsParseType();\n        }\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode = this.startNodeAtNode<N.TsOptionalType>(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode = this.startNodeAt<N.TsRestType>(startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode<N.TsParenthesizedType>();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node = this.startNode<\n        N.TsFunctionOrConstructorType | N.TsConstructorType\n      >();\n      if (type === \"TSConstructorType\") {\n        (node as Undone<N.TsConstructorType>).abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsInAllowConditionalTypesContext(() =>\n        this.tsFillSignature(tt.arrow, node),\n      );\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node = this.startNode<N.TsLiteralType>();\n      switch (this.state.type) {\n        case tt.num:\n        case tt.bigint:\n        case tt.string:\n        case tt._true:\n        case tt._false:\n          // For compatibility to estree we cannot call parseLiteral directly here\n          // @ts-expect-error refine typings\n          node.literal = super.parseExprAtom();\n          break;\n        default:\n          this.unexpected();\n      }\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node = this.startNode<N.TsLiteralType>();\n      node.literal = super.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType | N.Expression {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node = this.startNode<N.TsLiteralType>();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              this.unexpected();\n            }\n            // @ts-expect-error: parseMaybeUnary must returns unary expression\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startLoc = this.state.startLoc;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startLoc.index);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                  ? \"TSNullKeyword\"\n                  : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node = this.startNode<N.TsKeywordType>();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node = this.startNodeAtNode<N.TsArrayType>(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node = this.startNodeAtNode<N.TsIndexedAccessType>(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node = this.startNode<N.TsTypeOperator>();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: Undone<N.TsTypeOperator>) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, node);\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode<N.TsInferType>();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode<N.TsTypeParameter>();\n      typeParameter.name = this.tsParseTypeParameterName();\n      typeParameter.constraint = this.tsTryParse(() =>\n        this.tsParseConstraintForInferType(),\n      );\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseConstraintForInferType() {\n      if (this.eat(tt._extends)) {\n        const constraint = this.tsInDisallowConditionalTypesContext(() =>\n          this.tsParseType(),\n        );\n        if (\n          this.state.inDisallowConditionalTypesContext ||\n          !this.match(tt.question)\n        ) {\n          return constraint;\n        }\n      }\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n          ? this.tsParseInferType()\n          : this.tsInAllowConditionalTypesContext(() =>\n              this.tsParseArrayTypeOrHigher(),\n            );\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node = this.startNode<N.TsUnionType | N.TsIntersectionType>();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          super.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            ParseBindingListFlags.ALLOW_EMPTY,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t = this.startNode<N.TsTypeAnnotation>();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = thisTypePredicate;\n            node.asserts = true;\n            (node as N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            thisTypePredicate.asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node as N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): N.TsTypeAnnotation | undefined {\n      if (this.match(tt.colon)) {\n        return this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n    }\n\n    tsTryParseTypeAnnotation(): N.TsTypeAnnotation | undefined {\n      if (this.match(tt.colon)) {\n        return this.tsParseTypeAnnotation();\n      }\n    }\n\n    tsTryParseType(): N.TsType | undefined {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): N.Identifier | undefined {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          Errors.InvalidEscapedReservedWord,\n          this.state.lastTokStartLoc,\n          {\n            reservedWord: \"asserts\",\n          },\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: Undone<N.TsTypeAnnotation> = this.startNode<N.TsTypeAnnotation>(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n\n      if (\n        this.state.inDisallowConditionalTypesContext ||\n        this.hasPrecedingLineBreak() ||\n        !this.eat(tt._extends)\n      ) {\n        return type;\n      }\n      const node = this.startNodeAtNode<N.TsConditionalType>(type);\n      node.checkType = type;\n\n      node.extendsType = this.tsInDisallowConditionalTypesContext(() =>\n        this.tsParseNonConditionalType(),\n      );\n\n      this.expect(tt.question);\n      node.trueType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      this.expect(tt.colon);\n      node.falseType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, this.state.startLoc);\n      }\n\n      const node = this.startNode<N.TsTypeAssertion>();\n      node.typeAnnotation = this.tsInType(() => {\n        this.next(); // \"<\"\n        return this.match(tt._const)\n          ? this.tsParseTypeReference()\n          : this.tsParseType();\n      });\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(token: \"extends\"): Array<N.TSInterfaceHeritage>;\n    tsParseHeritageClause(token: \"implements\"): Array<N.TSClassImplements>;\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): Array<N.TSClassImplements> | Array<N.TSInterfaceHeritage> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        () => {\n          const node = this.startNode<\n            N.TSClassImplements | N.TSInterfaceHeritage\n          >();\n          node.expression = this.tsParseEntityName();\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.tsParseTypeArguments();\n          }\n\n          return this.finishNode(\n            node,\n            // @ts-expect-error Babel 7 vs Babel 8\n            process.env.BABEL_8_BREAKING\n              ? token === \"extends\"\n                ? \"TSInterfaceHeritage\"\n                : \"TSClassImplements\"\n              : \"TSExpressionWithTypeArguments\",\n          );\n        },\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, originalStartLoc, {\n          token,\n        });\n      }\n\n      return delimitedList as\n        | Array<N.TSClassImplements>\n        | Array<N.TSInterfaceHeritage>;\n    }\n\n    tsParseInterfaceDeclaration(\n      node: Undone<N.TsInterfaceDeclaration>,\n      properties: {\n        declare?: true;\n      } = {},\n    ): N.TsInterfaceDeclaration | null {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, this.state.startLoc);\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body = this.startNode<N.TSInterfaceBody>();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BindingFlag.TYPE_TS_TYPE);\n\n      node.typeAnnotation = this.tsInType(() => {\n        node.typeParameters = this.tsTryParseTypeParameters(\n          this.tsParseInOutModifiers,\n        );\n\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node = this.startNode<N.TsKeywordType>();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsInDisallowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsInAllowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = false;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | undefined {\n      if (this.match(token)) {\n        return this.tsNextThenParseType();\n      }\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsInType(() => {\n        this.expect(token);\n        return this.tsParseType();\n      });\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsInType(() => {\n        this.next();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node = this.startNode<N.TsEnumMember>();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? super.parseStringLiteral(this.state.value)\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = super.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: Undone<N.TsEnumDeclaration>,\n      properties: {\n        const?: true;\n        declare?: true;\n      } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BindingFlag.TYPE_TS_CONST_ENUM : BindingFlag.TYPE_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node = this.startNode<N.TsModuleBlock>();\n      this.scope.enter(ScopeFlag.OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      super.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: Undone<N.TsModuleDeclaration>,\n      nested: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_NAMESPACE);\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode<N.TsModuleDeclaration>();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        // @ts-expect-error Fixme: refine typings\n        node.body = inner;\n      } else {\n        this.scope.enter(ScopeFlag.TS_MODULE);\n        this.prodParam.enter(ParamKind.PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.kind = \"global\";\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.kind = \"module\";\n        node.id = super.parseStringLiteral(this.state.value);\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(ScopeFlag.TS_MODULE);\n        this.prodParam.enter(ParamKind.PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: Undone<N.TsImportEqualsDeclaration>,\n      maybeDefaultIdentifier?: N.Identifier | null,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = maybeDefaultIdentifier || this.parseIdentifier();\n      this.checkIdentifier(node.id, BindingFlag.TYPE_TS_VALUE_IMPORT);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, moduleReference);\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node = this.startNode<N.TsExternalModuleReference>();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n      this.sawUnambiguousESM = true;\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T extends N.NodeBase | undefined | null>(\n      f: () => T,\n    ): T | undefined | null {\n      const result = this.tryParse(\n        abort =>\n          // @ts-expect-error todo(flow->ts)\n          f() || abort(),\n      );\n\n      if (result.aborted || !result.node) return;\n      if (result.error) this.state = result.failState;\n      // @ts-expect-error refine typings\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => T | undefined | false): T | undefined {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      }\n      this.state = state;\n    }\n\n    tsTryParseDeclare(nany: any): N.Declaration | undefined {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let startType = this.state.type;\n      let kind: \"let\" | null;\n\n      if (this.isContextual(tt._let)) {\n        startType = tt._var;\n        kind = \"let\";\n      }\n\n      // @ts-expect-error refine typings\n      return this.tsInAmbientContext(() => {\n        switch (startType) {\n          case tt._function:\n            nany.declare = true;\n            return super.parseFunctionStatement(\n              nany,\n              /* async */ false,\n              /* isHangingDeclaration */ false,\n            );\n          case tt._class:\n            // While this is also set by tsParseExpressionStatement, we need to set it\n            // before parsing the class declaration to know how to register it in the scope.\n            nany.declare = true;\n            return this.parseClass(\n              nany,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          case tt._enum:\n            return this.tsParseEnumDeclaration(nany, { declare: true });\n          case tt._global:\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          case tt._const:\n          case tt._var:\n            if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n              nany.declare = true;\n              return this.parseVarStatement(\n                nany,\n                kind || this.state.value,\n                true,\n              );\n            }\n\n            // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n            this.expect(tt._const);\n            return this.tsParseEnumDeclaration(nany, {\n              const: true,\n              declare: true,\n            });\n          case tt._interface: {\n            const result = this.tsParseInterfaceDeclaration(nany, {\n              declare: true,\n            });\n            if (result) return result;\n          }\n          // fallthrough\n          default:\n            if (tokenIsIdentifier(startType)) {\n              return this.tsParseDeclaration(\n                nany,\n                this.state.value,\n                /* next */ true,\n                /* decorators */ null,\n              );\n            }\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): N.Declaration | undefined {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n        /* decorators */ null,\n      );\n    }\n\n    tsParseExpressionStatement(\n      node: Undone<N.TsModuleDeclaration>,\n      expr: N.Identifier,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n          }\n          return declaration;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(ScopeFlag.TS_MODULE);\n            this.prodParam.enter(ParamKind.PARAM);\n            const mod = node;\n            mod.kind = \"global\";\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(\n            node,\n            expr.name,\n            /* next */ false,\n            decorators,\n          );\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined | null {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node, decorators);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              node.kind = \"module\";\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            node.kind = \"namespace\";\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined {\n      if (!this.match(tt.lt)) return;\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: Undone<N.ArrowFunctionExpression> | undefined =\n        this.tsTryParseAndCatch(() => {\n          const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n          node.typeParameters = this.tsParseTypeParameters(\n            this.tsParseConstModifier,\n          );\n          // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n          super.parseFunctionParams(node);\n          node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n          this.expect(tt.arrow);\n          return node;\n        });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) return;\n\n      return super.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES productions, where the first token\n    // has been created without state.inType. Thus we need to rescan the lt token.\n    tsParseTypeArgumentsInExpression():\n      | N.TsTypeParameterInstantiation\n      | undefined {\n      if (this.reScan_lt() !== tt.lt) return;\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode<N.TsTypeParameterInstantiation>();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, node);\n      } else if (!this.state.inType && this.curContext() === tc.brace) {\n        // rescan `>` when we are no longer in type context and JSX parsing context\n        // since it was tokenized when `inType` is `true`.\n        this.reScan_lt_gt();\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      flags: ParseBindingListFlags,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location to include modifiers in range\n      const startLoc = this.state.startLoc;\n\n      const modified: ModifierBase = {};\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        },\n        modified,\n      );\n      const accessibility = modified.accessibility;\n      const override = modified.override;\n      const readonly = modified.readonly;\n      if (\n        !(flags & ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS) &&\n        (accessibility || readonly || override)\n      ) {\n        this.raise(TSErrors.UnexpectedParameterModifier, startLoc);\n      }\n\n      const left = this.parseMaybeDefault();\n      if (flags & ParseBindingListFlags.IS_FUNCTION_PARAMS) {\n        this.parseFunctionParamType(left);\n      }\n      const elt = this.parseMaybeDefault(left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp = this.startNodeAt<N.TSParameterProperty>(startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, pp);\n        }\n        pp.parameter = elt as any as N.Identifier | N.AssignmentPattern;\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node: N.Pattern | N.TSParameterProperty): boolean {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    tsDisallowOptionalPattern(node: Undone<N.Function>) {\n      for (const param of node.params) {\n        if (\n          param.type !== \"Identifier\" &&\n          (param as any).optional &&\n          !this.state.isAmbientContext\n        ) {\n          this.raise(TSErrors.PatternIsOptional, param);\n        }\n      }\n    }\n\n    setArrowFunctionParameters(\n      node: Undone<N.ArrowFunctionExpression>,\n      params: N.Expression[],\n      trailingCommaLoc?: Position | null,\n    ): void {\n      super.setArrowFunctionParameters(node, params, trailingCommaLoc);\n      this.tsDisallowOptionalPattern(node);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n            ? \"TSDeclareMethod\"\n            : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        return this.finishNode(node, bodilessType);\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, node);\n        if ((node as Undone<N.FunctionDeclaration>).declare) {\n          return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        }\n      }\n      this.tsDisallowOptionalPattern(node);\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodiless function, we need to do it here.\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(node);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: Array<N.Expression | N.SpreadElement>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, node.typeAnnotation);\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: Array<N.Expression | undefined | null>,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isInParens?: boolean,\n    ): Array<N.Expression | undefined | null> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression =\n          this.startNodeAt<N.TsNonNullExpression>(startLoc);\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn =\n              this.tsTryParseGenericAsyncArrowFunction(startLoc);\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n          if (!typeArguments) return;\n\n          if (isOptionalCall && !this.match(tt.parenL)) {\n            missingParenErrorLoc = this.state.curPosition();\n            return;\n          }\n\n          if (tokenIsTemplate(this.state.type)) {\n            const result = super.parseTaggedTemplateExpression(\n              base,\n              startLoc,\n              state,\n            );\n            result.typeParameters = typeArguments;\n            return result;\n          }\n\n          if (!noCalls && this.eat(tt.parenL)) {\n            const node = this.startNodeAt<\n              N.CallExpression | N.OptionalCallExpression\n            >(startLoc);\n            node.callee = base;\n            // @ts-expect-error (won't be any undefined arguments)\n            node.arguments = this.parseCallExpressionArguments(tt.parenR);\n\n            // Handles invalid case: `f<T>(a:b)`\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n\n            node.typeParameters = typeArguments;\n            if (state.optionalChainMember) {\n              (node as Undone<N.OptionalCallExpression>).optional =\n                isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          }\n\n          const tokenType = this.state.type;\n          if (\n            // a<b>>c is not (a<b>)>c, but a<(b>>c)\n            tokenType === tt.gt ||\n            // a<b>>>c is not (a<b>)>>c, but a<(b>>>c)\n            tokenType === tt.bitShiftR ||\n            // a<b>c is (a<b)>c\n            (tokenType !== tt.parenL &&\n              tokenCanStartExpression(tokenType) &&\n              !this.hasPrecedingLineBreak())\n          ) {\n            // Bail out.\n            return;\n          }\n\n          const node = this.startNodeAt<N.TsInstantiationExpression>(startLoc);\n          node.expression = base;\n          node.typeParameters = typeArguments;\n          return this.finishNode(node, \"TSInstantiationExpression\");\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) {\n          if (\n            result.type === \"TSInstantiationExpression\" &&\n            (this.match(tt.dot) ||\n              (this.match(tt.questionDot) &&\n                this.lookaheadCharCode() !== charCodes.leftParenthesis))\n          ) {\n            this.raise(\n              TSErrors.InvalidPropertyAccessAfterInstantiationExpression,\n              this.state.startLoc,\n            );\n          }\n          return result;\n        }\n      }\n\n      return super.parseSubscript(base, startLoc, noCalls, state);\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      const { callee } = node;\n      if (\n        callee.type === \"TSInstantiationExpression\" &&\n        !callee.extra?.parenthesized\n      ) {\n        node.typeParameters = callee.typeParameters;\n        node.callee = callee.expression;\n      }\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartLoc: Position,\n      minPrec: number,\n    ): N.Expression {\n      let isSatisfies: boolean;\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        (this.isContextual(tt._as) ||\n          (isSatisfies = this.isContextual(tt._satisfies)))\n      ) {\n        const node = this.startNodeAt<\n          N.TsAsExpression | N.TsSatisfiesExpression\n        >(leftStartLoc);\n        node.expression = left;\n        node.typeAnnotation = this.tsInType(() => {\n          this.next(); // \"as\" or \"satisfies\"\n          if (this.match(tt._const)) {\n            if (isSatisfies) {\n              this.raise(Errors.UnexpectedKeyword, this.state.startLoc, {\n                keyword: \"const\",\n              });\n            }\n            return this.tsParseTypeReference();\n          }\n\n          return this.tsParseType();\n        });\n        this.finishNode(\n          node,\n          isSatisfies ? \"TSSatisfiesExpression\" : \"TSAsExpression\",\n        );\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(\n          // @ts-expect-error todo(flow->ts)\n          node,\n          leftStartLoc,\n          minPrec,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(\n          TSErrors.ImportReflectionHasImportType,\n          node.specifiers[0].loc.start,\n        );\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    isPotentialImportPhase(isExport: boolean): boolean {\n      if (super.isPotentialImportPhase(isExport)) return true;\n      if (this.isContextual(tt._type)) {\n        const ch = this.lookaheadCharCode();\n        return isExport\n          ? ch === charCodes.leftCurlyBrace || ch === charCodes.asterisk\n          : ch !== charCodes.equalsTo;\n      }\n      return !isExport && this.isContextual(tt._typeof);\n    }\n\n    applyImportPhase(\n      node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n      isExport: boolean,\n      phase: string | null,\n      loc?: Position,\n    ): void {\n      super.applyImportPhase(node, isExport, phase, loc);\n      if (isExport) {\n        (node as N.ExportNamedDeclaration).exportKind =\n          phase === \"type\" ? \"type\" : \"value\";\n      } else {\n        (node as N.ImportDeclaration).importKind =\n          phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n      }\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    ): N.AnyImport {\n      if (this.match(tt.string)) {\n        node.importKind = \"value\";\n        return super.parseImport(node as Undone<N.ImportDeclaration>);\n      }\n\n      let importNode;\n      if (\n        tokenIsIdentifier(this.state.type) &&\n        this.lookaheadCharCode() === charCodes.equalsTo\n      ) {\n        node.importKind = \"value\";\n        return this.tsParseImportEqualsDeclaration(\n          node as Undone<N.TsImportEqualsDeclaration>,\n        );\n      } else if (this.isContextual(tt._type)) {\n        const maybeDefaultIdentifier = this.parseMaybeImportPhase(\n          node as Undone<N.ImportDeclaration>,\n          /* isExport */ false,\n        );\n        if (this.lookaheadCharCode() === charCodes.equalsTo) {\n          return this.tsParseImportEqualsDeclaration(\n            node as Undone<N.TsImportEqualsDeclaration>,\n            maybeDefaultIdentifier,\n          );\n        } else {\n          importNode = super.parseImportSpecifiersAndAfter(\n            node as Undone<N.ImportDeclaration>,\n            maybeDefaultIdentifier,\n          );\n        }\n      } else {\n        importNode = super.parseImport(node as Undone<N.ImportDeclaration>);\n      }\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        // @ts-expect-error refine typings\n        importNode.specifiers.length > 1 &&\n        // @ts-expect-error refine typings\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, importNode);\n      }\n\n      return importNode;\n    }\n\n    parseExport(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        const nodeImportEquals = node as Undone<N.TsImportEqualsDeclaration>;\n        let maybeDefaultIdentifier: N.Identifier | null = null;\n        if (\n          this.isContextual(tt._type) &&\n          // We pass false here, because we are parsing an `import ... =`\n          this.isPotentialImportPhase(/* isExport */ false)\n        ) {\n          maybeDefaultIdentifier = this.parseMaybeImportPhase(\n            nodeImportEquals,\n            /* isExport */ false,\n          );\n        } else {\n          nodeImportEquals.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(\n          nodeImportEquals,\n          maybeDefaultIdentifier,\n          /* isExport */ true,\n        );\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign = node as Undone<N.TsExportAssignment>;\n        assign.expression = super.parseExpression();\n        this.semicolon();\n        this.sawUnambiguousESM = true;\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl = node as Undone<N.TsNamespaceExportDeclaration>;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        return super.parseExport(\n          node as Undone<N.ExportAllDeclaration | N.ExportDefaultDeclaration>,\n          decorators,\n        );\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.ExportDefaultDeclaration[\"declaration\"] {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode<N.Class>();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        return this.parseClass(cls, true, true);\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(\n          this.startNode<N.TsInterfaceDeclaration>(),\n        );\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        if (kind !== \"const\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, init);\n        } else if (\n          !isValidAmbientConstInitializer(init, this.hasPlugin(\"estree\"))\n        ) {\n          this.raise(\n            TSErrors.ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            init,\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(\n      flags: ParseStatementFlag,\n      decorators?: N.Decorator[] | null,\n    ): N.Statement {\n      if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n        const node = this.startNode<N.TsEnumDeclaration>();\n        this.expect(tt._const); // eat 'const'\n        return this.tsParseEnumDeclaration(node, { const: true });\n      }\n\n      if (this.isContextual(tt._enum)) {\n        return this.tsParseEnumDeclaration(\n          this.startNode<N.TsEnumDeclaration>(),\n        );\n      }\n\n      if (this.isContextual(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseStatementContent(flags, decorators);\n    }\n\n    parseAccessModifier(): N.Accessibility | undefined | null {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: readonly TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ] as const;\n      this.tsParseModifiers(\n        {\n          allowedModifiers: modifiers,\n          disallowedModifiers: [\"in\", \"out\"],\n          stopOnStartOfClassStaticBlock: true,\n          errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n        },\n        member,\n      );\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(\n              TSErrors.StaticBlockCannotHaveModifier,\n              this.state.curPosition(),\n            );\n          }\n          super.parseClassStaticBlock(classBody, member as N.StaticBlock);\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: Undone<N.ClassMember | N.TsIndexSignature>,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(\n        member as Undone<N.TsIndexSignature>,\n      );\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member as any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, member);\n        }\n        if ((member as any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, member, {\n            modifier: (member as any).accessibility,\n          });\n        }\n        if ((member as any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, member);\n        }\n        if ((member as any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, member);\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member as any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, member);\n      }\n\n      if ((member as any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, member);\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member as Undone<N.ClassMember>,\n        state,\n        isStatic,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp as any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, methodOrProp);\n      }\n\n      if ((methodOrProp as any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, methodOrProp);\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    // @ts-expect-error plugin overrides interfaces\n    parseExpressionStatement(\n      node: Undone<N.ExpressionStatement>,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? // @ts-expect-error refine typings\n            this.tsParseExpressionStatement(node, expr, decorators)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n      node: T,\n      startLoc: Position,\n    ): T | N.TsTypeCastExpression {\n      const newNode = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        (newNode as N.Identifier).optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TsTypeCastExpression>(startLoc);\n        typeCastNode.expression = node as N.Expression;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(\n          TSErrors.ExpectedAmbientAfterExportDeclare,\n          this.state.startLoc,\n        );\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: N.Declaration | undefined | null =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType?: BindingFlag,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node as any).declare\n          ? BindingFlag.TYPE_TS_AMBIENT\n          : BindingFlag.TYPE_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty,\n    ): void {\n      if (!node.optional) {\n        if (this.eat(tt.bang)) {\n          node.definite = true;\n        } else if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (\n        this.state.isAmbientContext &&\n        !(node.readonly && !node.typeAnnotation) &&\n        this.match(tt.eq)\n      ) {\n        this.raise(\n          TSErrors.DeclareClassFieldHasInitializer,\n          this.state.startLoc,\n        );\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(\n          TSErrors.AbstractPropertyHasInitializer,\n          this.state.startLoc,\n          {\n            propertyName:\n              key.type === \"Identifier\" && !node.computed\n                ? key.name\n                : `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]`,\n          },\n        );\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // @ts-expect-error abstract may not index node\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, node);\n      }\n\n      // @ts-expect-error accessibility may not index node\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, node, {\n          // @ts-expect-error refine typings\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    parseClassAccessorProperty(\n      node: N.ClassAccessorProperty,\n    ): N.ClassAccessorProperty {\n      this.parseClassPropertyAnnotation(node);\n      if (node.optional) {\n        this.raise(TSErrors.AccessorCannotBeOptional, node);\n      }\n      return super.parseClassAccessorProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, typeParameters);\n      }\n\n      // @ts-expect-error declare does not exist in ClassMethod\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, method, { kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (\n        (node as N.Node).type === \"MethodDefinition\" &&\n        !Object.hasOwn(\n          (node as unknown as N.EstreeMethodDefinition).value,\n          \"body\",\n        )\n      ) {\n        return;\n      }\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue<T extends N.ObjectMember>(\n      prop: Undone<T>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): T {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      return super.parseObjPropValue(\n        prop,\n\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n    }\n\n    parseFunctionParams(node: N.Function, isConstructor: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: State | undefined | null;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      // If the state was cloned in the JSX parsing branch above but there\n      // have been any error in the tryParse call, this.state is set to state\n      // so we still need to clone it.\n      if (!state || state === this.state) state = this.state.clone();\n\n      let typeParameters: N.TsTypeParameterDeclaration | undefined | null;\n      // We need to explicitly annotate 'abort' for microsoft/TypeScript#58170\n      const arrow = this.tryParse((abort: () => never) => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);\n        const expr = super.parseMaybeAssign(\n          refExpressionErrors,\n          afterLeftParse,\n        );\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            this.hasPlugin(\"jsx\") &&\n            expr.typeParameters.params.length === 1 &&\n            !expr.typeParameters.extra?.trailingComma\n          ) {\n            // report error if single type parameter used without trailing comma.\n            const parameter = expr.typeParameters\n              .params[0] as N.TsTypeParameter;\n            if (!parameter.constraint) {\n              // A single type parameter must either have constraints\n              // or a trailing comma, otherwise it's ambiguous with JSX.\n              this.raise(\n                TSErrors.SingleTypeParameterWithoutTrailingComma,\n                createPositionWithColumnOffset(parameter.loc.end, 1),\n                {\n                  typeParameterName: process.env.BABEL_8_BREAKING\n                    ? (parameter.name as N.Identifier).name\n                    : (parameter.name as string),\n                },\n              );\n            }\n          }\n        }\n\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.params[0].constraint &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, node);\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(\n      refExpressionErrors?: ExpressionErrors | null,\n      sawUnary?: boolean,\n    ): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      }\n      return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n    }\n\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          // @ts-expect-error refine typings\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseFunctionParamType(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        (param as any as N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      switch (node.type) {\n        case \"ParenthesizedExpression\":\n          this.toAssignableParenthesizedExpression(node, isLHS);\n          break;\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          if (isLHS) {\n            this.expressionScope.recordArrowParameterBindingError(\n              TSErrors.UnexpectedTypeCastInParameter,\n              node,\n            );\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, node);\n          }\n          this.toAssignable(node.expression, isLHS);\n          break;\n        case \"AssignmentExpression\":\n          if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n            node.left = this.typeCastToParameter(node.left) as N.Assignable;\n          }\n        /* fall through */\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(\n      node: N.ParenthesizedExpression,\n      isLHS: boolean,\n    ): void {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          this.toAssignable(node.expression, isLHS);\n          break;\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkToRestConversion(node: N.Node, allowPattern: boolean): void {\n      switch (node.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSTypeAssertion\":\n        case \"TSNonNullExpression\":\n          this.checkToRestConversion(node.expression, false);\n          break;\n        default:\n          super.checkToRestConversion(node, allowPattern);\n      }\n    }\n\n    isValidLVal(\n      type:\n        | \"TSTypeCastExpression\"\n        | \"TSParameterProperty\"\n        | \"TSNonNullExpression\"\n        | \"TSInstantiationExpression\"\n        | \"TSAsExpression\"\n        | \"TSSatisfiesExpression\"\n        | \"TSTypeAssertion\",\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingFlag,\n    ) {\n      switch (type) {\n        // Allow \"typecasts\" to appear on the left of assignment expressions,\n        // because it may be in an arrow function.\n        // e.g. `const f = (foo: number = 0) => foo;`\n        case \"TSTypeCastExpression\":\n          return true;\n        case \"TSParameterProperty\":\n          return \"parameter\";\n        case \"TSNonNullExpression\":\n        case \"TSInstantiationExpression\":\n          return \"expression\";\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSTypeAssertion\":\n          return (\n            (binding !== BindingFlag.TYPE_NONE || !isUnparenthesizedInAssign) &&\n            ([\"expression\", true] as [string, boolean])\n          );\n        default:\n          return super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      if (this.state.type === tt._this) {\n        return this.parseIdentifier(/* liberal */ true);\n      }\n      return super.parseBindingAtom();\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(\n            expr,\n          ) as N.CallExpression;\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(\n      close: (typeof charCodes)[keyof typeof charCodes],\n    ): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      }\n      return super.checkCommaAfterRest(close);\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, node.typeAnnotation);\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          this.finishOp(tt.gt, 1);\n          return;\n        }\n        if (code === charCodes.lessThan) {\n          this.finishOp(tt.lt, 1);\n          return;\n        }\n      }\n      super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableList(\n      exprList: Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TSTypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Expression {\n      (node.expression as N.Identifier).typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const { isAmbientContext: oldIsAmbientContext, strict: oldStrict } =\n        this.state;\n      this.state.isAmbientContext = true;\n      this.state.strict = false;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n        this.state.strict = oldStrict;\n      }\n    }\n\n    parseClass<T extends N.Class>(\n      node: Undone<T>,\n      isStatement: boolean,\n      optionalId?: boolean,\n    ): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node as any).abstract;\n      try {\n        return super.parseClass(node, isStatement, optionalId);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n      decorators: N.Decorator[] | null,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | undefined | null {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.maybeTakeDecorators(\n          decorators,\n          this.parseClass<N.ClassDeclaration>(\n            node as N.ClassDeclaration,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          ),\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, node);\n          return this.tsParseInterfaceDeclaration(\n            node as N.TsInterfaceDeclaration,\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod<\n      T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope?: boolean,\n    ) {\n      const method = super.parseMethod<T>(\n        node,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error todo(flow->ts) property not defined for all types in union\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? // @ts-expect-error estree typings\n            !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, method, {\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: Undone<N.ExportSpecifier>,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: Undone<N.ImportSpecifier>,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingFlag | undefined,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n        isInTypeOnlyImport\n          ? BindingFlag.TYPE_TS_TYPE_IMPORT\n          : BindingFlag.TYPE_TS_VALUE_IMPORT,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        if (isImport) {\n          leftOfAs = this.parseIdentifier(true);\n          if (!this.isContextual(tt._as)) {\n            this.checkReservedWord(\n              leftOfAs.name,\n              leftOfAs.loc.start,\n              true,\n              true,\n            );\n          }\n        } else {\n          leftOfAs = this.parseModuleExportName();\n        }\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          loc,\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(\n          node[rightOfAsKey],\n          hasTypeSpecifier\n            ? BindingFlag.TYPE_TS_TYPE_IMPORT\n            : BindingFlag.TYPE_TS_VALUE_IMPORT,\n        );\n      }\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\n// If a const declaration has no type annotation and is initialized to\n// a string literal, numeric literal, or enum reference, then it is\n// allowed. In an ideal world, we'd check whether init was *actually* an\n// enum reference, but we allow anything that \"could be\" a literal enum\n// in `isPossiblyLiteralEnum` since we don't have all the information\n// that the typescript compiler has.\nfunction isValidAmbientConstInitializer(\n  expression: N.Expression,\n  estree: boolean,\n): boolean {\n  const { type } = expression;\n  if (expression.extra?.parenthesized) {\n    return false;\n  }\n  if (estree) {\n    if (type === \"Literal\") {\n      const { value } = expression;\n      if (typeof value === \"string\" || typeof value === \"boolean\") {\n        return true;\n      }\n    }\n  } else {\n    if (type === \"StringLiteral\" || type === \"BooleanLiteral\") {\n      return true;\n    }\n  }\n  if (isNumber(expression, estree) || isNegativeNumber(expression, estree)) {\n    return true;\n  }\n  if (type === \"TemplateLiteral\" && expression.expressions.length === 0) {\n    return true;\n  }\n  if (isPossiblyLiteralEnum(expression)) {\n    return true;\n  }\n  return false;\n}\n\nfunction isNumber(expression: N.Expression, estree: boolean): boolean {\n  if (estree) {\n    return (\n      expression.type === \"Literal\" &&\n      (typeof expression.value === \"number\" || \"bigint\" in expression)\n    );\n  }\n  return (\n    expression.type === \"NumericLiteral\" || expression.type === \"BigIntLiteral\"\n  );\n}\n\nfunction isNegativeNumber(expression: N.Expression, estree: boolean): boolean {\n  if (expression.type === \"UnaryExpression\") {\n    const { operator, argument } = expression;\n    if (operator === \"-\" && isNumber(argument, estree)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\" || expression.computed) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n","import * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types.ts\";\nimport type Parser from \"../parser/index.ts\";\nimport type * as N from \"../types.ts\";\nimport { ParseErrorEnum } from \"../parse-error.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\nimport type { BindingFlag } from \"../util/scopeflags.ts\";\nimport type { Position } from \"../util/location.ts\";\n\ntype PossiblePlaceholders = {\n  Identifier: N.Identifier;\n  StringLiteral: N.StringLiteral;\n  Expression: N.Expression;\n  Statement: N.Statement;\n  Declaration: N.Declaration;\n  BlockStatement: N.BlockStatement;\n  ClassBody: N.ClassBody;\n  Pattern: N.Pattern;\n};\nexport type PlaceholderTypes = keyof PossiblePlaceholders;\n\ntype NodeOf<T extends keyof PossiblePlaceholders> = PossiblePlaceholders[T];\n// todo: when there  is proper union type for Node\n// type NodeOf<T extends PlaceholderTypes> = Extract<N.Node, { type: T }>;\n\n// todo: Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T extends PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\",\n});\n\nexport default (superClass: typeof Parser) =>\n  class PlaceholdersParserMixin extends superClass implements Parser {\n    parsePlaceholder<T extends PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ MaybePlaceholder<T> | undefined {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode<N.Placeholder<T>>();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T extends PlaceholderTypes>(\n      node: Undone<N.Placeholder> | Undone<NodeOf<PlaceholderTypes>>,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      let placeholder = node as unknown as N.Placeholder<T>;\n\n      if (!placeholder.expectedNode || !placeholder.type) {\n        placeholder = this.finishNode(\n          placeholder,\n          \"Placeholder\",\n        ) as unknown as N.Placeholder<T>;\n      }\n\n      placeholder.expectedNode = expectedNode;\n      return placeholder as unknown as MaybePlaceholder<T>;\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        this.finishOp(tt.placeholder, 2);\n      } else {\n        super.getTokenFromCode(code);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(\n      refExpressionErrors?: ExpressionErrors | null,\n    ): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") ||\n        super.parseExprAtom(refExpressionErrors)\n      );\n    }\n\n    parseIdentifier(liberal?: boolean): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(liberal)\n      );\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ) {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom();\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingFlag) {\n      return (\n        type === \"Placeholder\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean): void {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    chStartsBindingIdentifier(ch: number, pos: number): boolean {\n      if (super.chStartsBindingIdentifier(ch, pos)) {\n        return true;\n      }\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(\n      node: N.BreakStatement | N.ContinueStatement,\n      isBreak: boolean,\n    ) {\n      // @ts-expect-error: node.label could be Placeholder\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(node, isBreak);\n    }\n\n    // @ts-expect-error Plugin will override parser interface\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: MaybePlaceholder<\"Expression\">,\n    ): MaybePlaceholder<\"Statement\"> {\n      // @ts-expect-error placeholder typings\n      if (expr.type !== \"Placeholder\" || expr.extra?.parenthesized) {\n        // @ts-expect-error placeholder typings\n        return super.parseExpressionStatement(node, expr);\n      }\n\n      if (this.match(tt.colon)) {\n        // @ts-expect-error placeholder typings\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration();\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n      const stmtPlaceholder = node as unknown as N.Placeholder<\"Statement\">;\n      stmtPlaceholder.name = (expr as N.Placeholder).name;\n      return this.finishPlaceholder(stmtPlaceholder, \"Statement\");\n    }\n\n    parseBlock(\n      allowDirectives?: boolean,\n      createNewLexicalScope?: boolean,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(\n          allowDirectives,\n          createNewLexicalScope,\n          afterBlockParse,\n        )\n      );\n    }\n\n    parseFunctionId(\n      requireId?: boolean,\n    ): MaybePlaceholder<\"Identifier\"> | undefined | null {\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(requireId)\n      );\n    }\n    // @ts-expect-error Plugin will override parser interface\n    parseClass<T extends N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(\n            PlaceholderErrors.ClassNameIsRequired,\n            this.state.startLoc,\n          );\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      super.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        super.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(node, decorators);\n\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node2.specifiers = [];\n        node2.source = null;\n        node2.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node2, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode<N.ExportDefaultSpecifier>();\n      specifier.exported = placeholder;\n      node2.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node2, decorators);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      maybeDefaultIdentifier: N.Identifier | null,\n    ): node is Undone<N.ExportNamedDeclaration> {\n      if ((node as N.ExportNamedDeclaration).specifiers?.length) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(\n        node,\n        maybeDefaultIdentifier,\n      );\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          // @ts-expect-error placeholder typings\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration>,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(node);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier =\n        this.startNodeAtNode<N.ImportDefaultSpecifier>(placeholder);\n      specifier.local = placeholder;\n      node.specifiers.push(\n        this.finishNode(specifier, \"ImportDefaultSpecifier\"),\n      );\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource()\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (\n        this.state.start >\n        this.offsetToSourcePos(this.state.lastTokEndLoc.index)\n      ) {\n        this.raise(PlaceholderErrors.UnexpectedSpace, this.state.lastTokEndLoc);\n      }\n    }\n  };\n","import type Parser from \"../parser/index.ts\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types.ts\";\nimport type * as N from \"../types.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\n\nexport default (superClass: typeof Parser) =>\n  class V8IntrinsicMixin extends superClass implements Parser {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode<N.Identifier>();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName();\n          const identifier = this.createIdentifier(node, name);\n          // @ts-expect-error: avoid mutating AST types\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      return (\n        this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors)\n      );\n    }\n  };\n","import type Parser from \"./parser/index.ts\";\nimport type { PluginConfig } from \"./typings.ts\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = PluginConfig[];\n\nexport type MixinPlugin = (\n  superClass: new (...args: any) => Parser,\n) => new (...args: any) => Parser;\n\nconst PIPELINE_PROPOSALS = process.env.BABEL_8_BREAKING\n  ? [\"fsharp\", \"hack\"]\n  : [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\n\nexport function validatePlugins(pluginsMap: Map<string, any>) {\n  if (pluginsMap.has(\"decorators\")) {\n    if (pluginsMap.has(\"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport =\n      pluginsMap.get(\"decorators\").decoratorsBeforeExport;\n    if (\n      decoratorsBeforeExport != null &&\n      typeof decoratorsBeforeExport !== \"boolean\"\n    ) {\n      throw new Error(\n        \"'decoratorsBeforeExport' must be a boolean, if specified.\",\n      );\n    }\n\n    const allowCallParenthesized =\n      pluginsMap.get(\"decorators\").allowCallParenthesized;\n    if (\n      allowCallParenthesized != null &&\n      typeof allowCallParenthesized !== \"boolean\"\n    ) {\n      throw new Error(\"'allowCallParenthesized' must be a boolean.\");\n    }\n  }\n\n  if (pluginsMap.has(\"flow\") && pluginsMap.has(\"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (pluginsMap.has(\"placeholders\") && pluginsMap.has(\"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (pluginsMap.has(\"pipelineOperator\")) {\n    const proposal = pluginsMap.get(\"pipelineOperator\").proposal;\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = process.env.BABEL_8_BREAKING\n      ? pluginsMap.has(\"recordAndTuple\")\n      : pluginsMap.get(\"recordAndTuple\")?.syntaxType === \"hash\";\n\n    if (proposal === \"hack\") {\n      if (pluginsMap.has(\"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (pluginsMap.has(\"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = pluginsMap.get(\"pipelineOperator\").topicToken;\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          `Plugin conflict between \\`[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]\\` and \\`${JSON.stringify([\"recordAndTuple\", pluginsMap.get(\"recordAndTuple\")])}\\`.`,\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        `Plugin conflict between \\`[\"pipelineOperator\", { proposal: \"smart\" }]\\` and \\`${JSON.stringify([\"recordAndTuple\", pluginsMap.get(\"recordAndTuple\")])}\\`.`,\n      );\n    }\n  }\n\n  if (pluginsMap.has(\"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please migrate to import attributes instead.\",\n      );\n    } else {\n      if (\n        pluginsMap.has(\"deprecatedImportAssert\") ||\n        pluginsMap.has(\"importAssertions\")\n      ) {\n        throw new Error(\n          \"Cannot combine importAssertions, deprecatedImportAssert and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVersionPluginOption =\n        pluginsMap.get(\"moduleAttributes\").version;\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n  if (pluginsMap.has(\"importAssertions\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`importAssertions` has been removed in Babel 8, please use import attributes instead.\" +\n          \" To use the non-standard `assert` syntax you can enable the `deprecatedImportAssert` parser plugin.\",\n      );\n    } else if (pluginsMap.has(\"deprecatedImportAssert\")) {\n      throw new Error(\n        \"Cannot combine importAssertions and deprecatedImportAssert plugins.\",\n      );\n    }\n  }\n  if (\n    !pluginsMap.has(\"deprecatedImportAssert\") &&\n    pluginsMap.has(\"importAttributes\") &&\n    pluginsMap.get(\"importAttributes\").deprecatedAssertSyntax\n  ) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"The 'importAttributes' plugin has been removed in Babel 8. If you need to enable support \" +\n          \"for the deprecated `assert` syntax, you can enable the `deprecatedImportAssert` parser plugin.\",\n      );\n    } else {\n      pluginsMap.set(\"deprecatedImportAssert\", {});\n    }\n  }\n\n  if (pluginsMap.has(\"recordAndTuple\")) {\n    const syntaxType = pluginsMap.get(\"recordAndTuple\").syntaxType;\n    if (syntaxType != null) {\n      if (process.env.BABEL_8_BREAKING) {\n        if (syntaxType === \"hash\") {\n          throw new Error(\n            'The syntaxType option is no longer required in Babel 8. You can safely remove { syntaxType: \"hash\" } from the recordAndTuple config.',\n          );\n        } else {\n          throw new Error(\n            'The syntaxType option is no longer required in Babel 8. Please remove { syntaxType: \"bar\" } from the recordAndTuple config and migrate to the hash syntax #{} and #[].',\n          );\n        }\n      } else {\n        const RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n        if (!RECORD_AND_TUPLE_SYNTAX_TYPES.includes(syntaxType)) {\n          throw new Error(\n            \"The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: \" +\n              RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n          );\n        }\n      }\n    }\n  }\n\n  if (\n    pluginsMap.has(\"asyncDoExpressions\") &&\n    !pluginsMap.has(\"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // @ts-expect-error so @babel/core can provide better error message\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n\n  if (\n    pluginsMap.has(\"optionalChainingAssign\") &&\n    pluginsMap.get(\"optionalChainingAssign\").version !== \"2023-07\"\n  ) {\n    throw new Error(\n      \"The 'optionalChainingAssign' plugin requires a 'version' option,\" +\n        \" representing the last proposal update. Currently, the\" +\n        \" only supported value is '2023-07'.\",\n    );\n  }\n\n  if (process.env.BABEL_8_BREAKING) {\n    if (pluginsMap.has(\"decimal\")) {\n      throw new Error(\n        \"The 'decimal' plugin has been removed in Babel 8. Please remove it from your configuration.\",\n      );\n    }\n    if (pluginsMap.has(\"importReflection\")) {\n      throw new Error(\n        \"The 'importReflection' plugin has been removed in Babel 8. Use 'sourcePhaseImports' instead, and \" +\n          \"replace 'import module' with 'import source' in your code.\",\n      );\n    }\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree.ts\";\nimport flow from \"./plugins/flow/index.ts\";\nimport jsx from \"./plugins/jsx/index.ts\";\nimport typescript from \"./plugins/typescript/index.ts\";\nimport placeholders from \"./plugins/placeholders.ts\";\nimport v8intrinsic from \"./plugins/v8intrinsic.ts\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames = Object.keys(mixinPlugins) as ReadonlyArray<\n  \"estree\" | \"jsx\" | \"flow\" | \"typescript\" | \"v8intrinsic\" | \"placeholders\"\n>;\n","import type { PluginList } from \"./plugin-utils.ts\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport interface Options {\n  sourceType?: SourceType;\n  sourceFilename?: string;\n  startIndex?: number;\n  startColumn?: number;\n  startLine?: number;\n  allowAwaitOutsideFunction?: boolean;\n  allowReturnOutsideFunction?: boolean;\n  allowNewTargetOutsideFunction?: boolean;\n  allowImportExportEverywhere?: boolean;\n  allowSuperOutsideMethod?: boolean;\n  allowUndeclaredExports?: boolean;\n  plugins?: PluginList;\n  strictMode?: boolean | undefined | null;\n  ranges?: boolean;\n  tokens?: boolean;\n  createImportExpressions?: boolean;\n  createParenthesizedExpressions?: boolean;\n  errorRecovery?: boolean;\n  attachComment?: boolean;\n  annexB?: boolean;\n}\n\ntype OptionsWithDefaults = { [P in keyof Options]-?: Options[P] };\n\nfunction createDefaultOptions(): OptionsWithDefaults {\n  return {\n    // Source type (\"script\" or \"module\") for different semantics\n    sourceType: \"script\",\n    // Source filename.\n    sourceFilename: undefined,\n    // Index (0-based) from which to start counting source. Useful for\n    // integration with other tools.\n    startIndex: 0,\n    // Column (0-based) from which to start counting source. Useful for\n    // integration with other tools.\n    startColumn: 0,\n    // Line (1-based) from which to start counting source. Useful for\n    // integration with other tools.\n    startLine: 1,\n    // When enabled, await at the top level is not considered an\n    // error.\n    allowAwaitOutsideFunction: false,\n    // When enabled, a return at the top level is not considered an\n    // error.\n    allowReturnOutsideFunction: false,\n    // When enabled, new.target outside a function or class is not\n    // considered an error.\n    allowNewTargetOutsideFunction: false,\n    // When enabled, import/export statements are not constrained to\n    // appearing at the top of the program.\n    allowImportExportEverywhere: false,\n    // TODO\n    allowSuperOutsideMethod: false,\n    // When enabled, export statements can reference undeclared variables.\n    allowUndeclaredExports: false,\n    // An array of plugins to enable\n    plugins: [],\n    // TODO\n    strictMode: null,\n    // Nodes have their start and end characters offsets recorded in\n    // `start` and `end` properties (directly on the node, rather than\n    // the `loc` object, which holds line/column data. To also add a\n    // [semi-standardized][range] `range` property holding a `[start,\n    // end]` array with the same numbers, set the `ranges` option to\n    // `true`.\n    //\n    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n    ranges: false,\n    // Adds all parsed tokens to a `tokens` property on the `File` node\n    tokens: false,\n    // Whether to create ImportExpression AST nodes (if false\n    // `import(foo)` will be parsed as CallExpression(Import, [Identifier(foo)])\n    createImportExpressions: process.env.BABEL_8_BREAKING ? true : false,\n    // Whether to create ParenthesizedExpression AST nodes (if false\n    // the parser sets extra.parenthesized on the expression nodes instead).\n    createParenthesizedExpressions: false,\n    // When enabled, errors are attached to the AST instead of being directly thrown.\n    // Some errors will still throw, because @babel/parser can't always recover.\n    errorRecovery: false,\n    // When enabled, comments will be attached to adjacent AST nodes as one of\n    // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n    // is vital to preserve comments after transform. If you don't print AST back,\n    // consider set this option to `false` for performance\n    attachComment: true,\n    // When enabled, the parser will support Annex B syntax.\n    // https://tc39.es/ecma262/#sec-additional-ecmascript-features-for-web-browsers\n    annexB: true,\n  };\n}\n\n// Interpret and default an options object\n\nexport function getOptions(opts?: Options | null): OptionsWithDefaults {\n  // https://github.com/babel/babel/pull/16918\n  // `options` is accessed frequently, please make sure it is a fast object.\n  // `%ToFastProperties` can make it a fast object, but the performance is the same as the slow object.\n  const options: any = createDefaultOptions();\n\n  if (opts == null) {\n    return options;\n  }\n  if (opts.annexB != null && opts.annexB !== false) {\n    throw new Error(\"The `annexB` option can only be set to `false`.\");\n  }\n\n  for (const key of Object.keys(options) as (keyof Options)[]) {\n    if (opts[key] != null) options[key] = opts[key];\n  }\n\n  if (options.startLine === 1) {\n    if (opts.startIndex == null && options.startColumn > 0) {\n      options.startIndex = options.startColumn;\n    } else if (opts.startColumn == null && options.startIndex > 0) {\n      options.startColumn = options.startIndex;\n    }\n  } else if (opts.startColumn == null || opts.startIndex == null) {\n    if (opts.startIndex != null || process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"With a `startLine > 1` you must also specify `startIndex` and `startColumn`.\",\n      );\n    }\n  }\n\n  return options;\n}\n","// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types.ts\";\nimport type * as N from \"../types.ts\";\nimport LValParser from \"./lval.ts\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier.ts\";\nimport {\n  type Position,\n  createPositionWithColumnOffset,\n} from \"../util/location.ts\";\nimport * as charCodes from \"charcodes\";\nimport { ScopeFlag, BindingFlag } from \"../util/scopeflags.ts\";\nimport { ExpressionErrors } from \"./util.ts\";\nimport { ParamKind, functionFlags } from \"../util/production-parameter.ts\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope.ts\";\nimport { Errors, type ParseError } from \"../parse-error.ts\";\nimport {\n  UnparenthesizedPipeBodyDescriptions,\n  type UnparenthesizedPipeBodyTypes,\n} from \"../parse-error/pipeline-operator-errors.ts\";\nimport { setInnerComments } from \"./comments.ts\";\nimport { cloneIdentifier, type Undone } from \"./node.ts\";\nimport type Parser from \"./index.ts\";\n\nimport type { SourceType } from \"../options.ts\";\n\nexport default abstract class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  abstract parseBlock(\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement;\n  abstract parseClass(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ): N.Class;\n  abstract parseDecorators(allowExport?: boolean): void;\n  abstract parseFunction<T extends N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ): T;\n  abstract parseFunctionParams(node: N.Function, isConstructor?: boolean): void;\n  abstract parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: N.Directive[] | null | undefined,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void;\n  abstract parseProgram(\n    program: N.Program,\n    end: TokenType,\n    sourceType?: SourceType,\n  ): N.Program;\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean | undefined | null,\n    protoRef: {\n      used: boolean;\n    },\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key as\n      | N.Identifier\n      | N.StringLiteral\n      | N.NumericLiteral\n      | N.BigIntLiteral;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, key);\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, key);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(\n    expr: N.Expression | N.PrivateName,\n    potentialArrowAt: number,\n  ): expr is N.ArrowFunctionExpression {\n    return (\n      expr.type === \"ArrowFunctionExpression\" &&\n      this.offsetToSourcePos(expr.start) === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(this: Parser): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression() as N.Expression & N.ParserOutput;\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    this: Parser,\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt<N.SequenceExpression>(startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParseError<any>,\n  ) {\n    refExpressionErrors.optionalParametersLoc =\n      resultError?.loc ?? this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt<N.AssignmentExpression>(startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        this.toAssignable(left, /* isLHS */ true);\n        node.left = left;\n\n        const startIndex = startLoc.index;\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startIndex\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startIndex\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startIndex\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left as unknown as N.Assignable; // checked a few lines further down\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, this.finishNode(node, \"AssignmentExpression\"));\n      // @ts-expect-error todo(flow->ts) improve node types\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    this: Parser,\n    expr: N.Expression,\n    startLoc: Position,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt<N.ConditionalExpression>(startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    this: Parser,\n    left: N.Expression | N.PrivateName,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, left, {\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            // PrivateName must be followed by `in`, but we have `|>`\n            return left as N.Expression;\n          }\n          this.checkPipelineAtInfixOperator(left as N.Expression, leftStartLoc);\n        }\n        const node = this.startNodeAt<N.LogicalExpression | N.BinaryExpression>(\n          leftStartLoc,\n        );\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          // @ts-expect-error Remove this in Babel 8\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(\n              Errors.UnexpectedAwaitAfterPipelineBody,\n              this.state.startLoc,\n            );\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(\n            Errors.MixingCoalesceWithLogical,\n            this.state.startLoc,\n          );\n        }\n\n        return this.parseExprOp(finishedNode, leftStartLoc, minPrec);\n      }\n    }\n    // PrivateName is followed by `in` and handled by the previous if statement\n    return left as N.Expression;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          // @ts-expect-error Remove this in Babel 8\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(Errors.PipeBodyIsTighter, this.state.startLoc);\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(this: Parser): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      // @ts-expect-error TS2345: Argument of type 'string' is not assignable to parameter of type '\"ArrowFunctionExpression\" | \"YieldExpression\" | \"AssignmentExpression\" | \"ConditionalExpression\"'.\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, startLoc, {\n        type: body.type as UnparenthesizedPipeBodyTypes,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, startLoc);\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(\n    node: N.AwaitExpression | Undone<N.UnaryExpression>,\n  ) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, node.argument);\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.recordAwaitIfAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode<N.UnaryExpression | N.UpdateExpression>();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, node);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, node);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node as Undone<N.UnaryExpression>);\n        }\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(\n      // @ts-expect-error using \"Undone\" node as \"done\"\n      node,\n      update,\n      refExpressionErrors,\n    );\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, startLoc);\n        return this.parseAwait(startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    this: Parser,\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (update) {\n      const updateExpressionNode = node as Undone<N.UpdateExpression>;\n      this.checkLVal(\n        updateExpressionNode.argument,\n        this.finishNode(updateExpressionNode, \"UpdateExpression\"),\n      );\n      return node;\n    }\n\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt<N.UpdateExpression>(startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, (expr = this.finishNode(node, \"UpdateExpression\")));\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startLoc);\n  }\n\n  parseSubscripts(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls?: boolean | null,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls) {\n        this.raise(Errors.OptionalChainingNoNew, this.state.startLoc);\n        if (this.lookaheadCharCode() === charCodes.leftParenthesis) {\n          // stop at `?.` when parsing `new a?.()`\n          state.stop = true;\n          return base;\n        }\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(base, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt<\n      N.OptionalMemberExpression | N.MemberExpression\n    >(startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, startLoc);\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      (node as N.OptionalMemberExpression).optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt<N.BindExpression>(startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors: ExpressionErrors | null = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    const node = this.startNodeAt<N.CallExpression | N.OptionalCallExpression>(\n      startLoc,\n    );\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      // @ts-expect-error when optionalChainMember is true, node must be an optional call\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type !== \"Super\",\n        node,\n        refExpressionErrors,\n      );\n    }\n    let finishedNode:\n      | N.CallExpression\n      | N.OptionalCallExpression\n      | N.ArrowFunctionExpression = this.finishCallExpression(\n      node,\n      optionalChainMember,\n    );\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt<N.ArrowFunctionExpression>(startLoc),\n        finishedNode as N.CallExpression,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(finishedNode);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return finishedNode;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node = this.startNodeAt<N.TaggedTemplateExpression>(startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, startLoc);\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      this.offsetToSourcePos(base.start) === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n    node: Undone<T>,\n    optional: boolean,\n  ): T {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, node);\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, arg);\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    this: Parser,\n    close: TokenType,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: Undone<N.Node> | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): Array<N.Expression> {\n    const elts: N.Expression[] = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node as N.ArrowFunctionExpression;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(this: Parser): N.Expression {\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    let node;\n    let decorators: N.Decorator[] | null = null;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode<N.MetaProperty | N.Import | N.ImportExpression>();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node as Undone<N.MetaProperty>);\n        }\n\n        if (this.match(tt.parenL)) {\n          if (this.options.createImportExpressions) {\n            return this.parseImportCall(node as Undone<N.ImportExpression>);\n          } else {\n            return this.finishNode(node, \"Import\");\n          }\n        } else {\n          this.raise(Errors.UnsupportedImport, this.state.lastTokStartLoc);\n          return this.finishNode(node, \"Import\");\n        }\n\n      case tt._this:\n        node = this.startNode<N.ThisExpression>();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        decorators = this.parseDecorators();\n      // fall through\n      case tt._class:\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            this.startNode<N.ClassExpression>(),\n          ),\n          false,\n        );\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode<N.BindExpression>();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, callee);\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, this.state.startLoc, {\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName() as unknown as N.Expression;\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        }\n        this.unexpected();\n        break;\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n        } else {\n          this.unexpected();\n        }\n        break;\n      }\n\n      default:\n        if (!process.env.BABEL_8_BREAKING && type === tt.decimal) {\n          return this.parseDecimalLiteral(this.state.value);\n        }\n\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadInLineCharCode() === charCodes.leftCurlyBrace\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseAsyncFunctionExpression(\n                this.startNodeAtNode(id),\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode<N.TopicReference>();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference<\n    T extends N.PipelinePrimaryTopicReference | N.TopicReference,\n  >(\n    node: Undone<T>,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): T {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      const nodeType =\n        pipeProposal === \"smart\"\n          ? \"PipelinePrimaryTopicReference\"\n          : // The proposal must otherwise be \"hack\",\n            // as enforced by testTopicReferenceConfiguration.\n            \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(\n          // The topic reference is not allowed in the current context:\n          // it is outside of a pipe body.\n          // Raise recoverable errors.\n          pipeProposal === \"smart\"\n            ? Errors.PrimaryTopicNotAllowed\n            : // In this case, `pipeProposal === \"hack\"` is true.\n              Errors.PipeTopicUnbound,\n          startLoc,\n        );\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, startLoc, {\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            // @ts-expect-error token must have a label\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, startLoc);\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n  ): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, this.state.curPosition());\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    return this.parseArrowExpression(node, params, true);\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(\n    this: Parser,\n    node: Undone<N.DoExpression>,\n    isAsync: boolean,\n  ): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(ParamKind.PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode<N.Super>();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.SuperNotAllowed, node);\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.UnexpectedSuper, node);\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, node);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode<N.PrivateName>();\n    const id = this.startNodeAt<N.Identifier>(\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      createPositionWithColumnOffset(this.state.startLoc, 1),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(\n    this: Parser,\n  ): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode<N.FunctionExpression | N.MetaProperty>();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"sent\",\n      );\n    }\n    return this.parseFunction(node as Undone<N.FunctionExpression>);\n  }\n\n  parseMetaProperty(\n    node: Undone<N.MetaProperty>,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, node.property, {\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(\n    this: Parser,\n    node: Undone<N.MetaProperty | N.ImportExpression>,\n  ): N.MetaProperty | N.ImportExpression {\n    const id = this.createIdentifier(\n      this.startNodeAtNode<N.Identifier>(node),\n      \"import\",\n    );\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, id);\n      }\n      this.sawUnambiguousESM = true;\n    } else if (this.isContextual(tt._source) || this.isContextual(tt._defer)) {\n      const isSource = this.isContextual(tt._source);\n\n      // TODO: The proposal doesn't mention import.defer yet because it was\n      // pending on a decision for import.source. Wait to enable it until it's\n      // included in the proposal.\n      if (!isSource) this.unexpected();\n\n      this.expectPlugin(\n        isSource ? \"sourcePhaseImports\" : \"deferredImportEvaluation\",\n      );\n      if (!this.options.createImportExpressions) {\n        throw this.raise(\n          Errors.DynamicImportPhaseRequiresImportExpressions,\n          this.state.startLoc,\n          {\n            phase: this.state.value,\n          },\n        );\n      }\n      this.next();\n      (node as Undone<N.ImportExpression>).phase = isSource\n        ? \"source\"\n        : \"defer\";\n      return this.parseImportCall(node as Undone<N.ImportExpression>);\n    }\n\n    return this.parseMetaProperty(node as Undone<N.MetaProperty>, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T extends N.Node>(\n    value: any,\n    type: T[\"type\"],\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(\n      node,\n      \"raw\",\n      this.input.slice(this.offsetToSourcePos(node.start), this.state.end),\n    );\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T extends N.Node>(value: any, type: T[\"type\"]): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  // TODO: Remove this in Babel 8\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: {\n    value: any;\n    pattern: string;\n    flags: N.RegExpLiteral[\"flags\"];\n  }) {\n    const node = this.startNode<N.RegExpLiteral>();\n    this.addExtra(\n      node,\n      \"raw\",\n      this.input.slice(this.offsetToSourcePos(node.start), this.state.end),\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    this.next();\n    return this.finishNode(node, \"RegExpLiteral\");\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode<N.BooleanLiteral>();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode<N.NullLiteral>();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(\n    this: Parser,\n    canBeArrow: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartLoc = this.state.startLoc;\n    const exprList: (N.Expression | N.RestElement)[] = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      // @ts-expect-error todo(flow->ts) improve node types\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt<N.SequenceExpression>(innerStartLoc);\n      val.expressions = exprList as N.Expression[];\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(\n      startLoc,\n      // @ts-expect-error todo(flow->ts)\n      val,\n    );\n  }\n\n  wrapParenthesis(startLoc: Position, expression: N.Expression): N.Expression {\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startLoc.index);\n\n      this.takeSurroundingComments(\n        expression,\n        startLoc.index,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return expression;\n    }\n\n    const parenExpression =\n      this.startNodeAt<N.ParenthesizedExpression>(startLoc);\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(\n    node: Undone<N.ArrowFunctionExpression>,\n  ): Undone<N.ArrowFunctionExpression> | undefined {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n    node: T,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    startLoc: Position,\n  ): T | N.TypeCastExpression | N.TsTypeCastExpression {\n    return node;\n  }\n\n  parseNewOrNewTarget(this: Parser): N.NewExpression | N.MetaProperty {\n    const node = this.startNode<N.NewExpression | N.MetaProperty>();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"new\",\n      );\n      this.next();\n      const metaProp = this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"target\",\n      );\n\n      if (\n        !this.scope.inNonArrowFunction &&\n        !this.scope.inClass &&\n        !this.options.allowNewTargetOutsideFunction\n      ) {\n        this.raise(Errors.UnexpectedNewTarget, metaProp);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node as Undone<N.NewExpression>);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(this: Parser, node: Undone<N.NewExpression>): N.NewExpression {\n    this.parseNewCallee(node);\n\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewCallee(this: Parser, node: Undone<N.NewExpression>): void {\n    const isImport = this.match(tt._import);\n    const callee = this.parseNoCallExpr();\n    node.callee = callee;\n    if (\n      isImport &&\n      (callee.type === \"Import\" || callee.type === \"ImportExpression\")\n    ) {\n      this.raise(Errors.ImportCallNotNewExpression, callee);\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt<N.TemplateElement>(\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(\n          Errors.InvalidEscapeSequenceTemplate,\n          // FIXME: Adding 1 is probably wrong.\n          createPositionWithColumnOffset(\n            this.state.firstInvalidTemplateEscapePos,\n            1,\n          ),\n        );\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      finishedNode,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return finishedNode;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(this: Parser, isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode<N.TemplateLiteral>();\n    let curElt = this.parseTemplateElement(isTagged);\n    const quasis = [curElt];\n    const substitutions = [];\n    while (!curElt.tail) {\n      substitutions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    // Type cast from (N.Expression[] | N.TsType[]). parseTemplateSubstitution\n    // returns consistent results.\n    node.expressions = substitutions as N.Expression[] | N.TsType[];\n    node.quasis = quasis;\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(this: Parser): N.Expression | N.TsType {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike(\n    close: TokenType,\n    isPattern: true,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectPattern;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: false | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectExpression;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: true,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.RecordExpression;\n  parseObjectLike<T extends N.ObjectPattern | N.ObjectExpression>(\n    this: Parser,\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode<\n      N.ObjectExpression | N.ObjectPattern | N.RecordExpression\n    >();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(node);\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, prop);\n      }\n\n      if (!process.env.BABEL_8_BREAKING) {\n        // @ts-expect-error shorthand may not index prop\n        if (prop.shorthand) {\n          this.addExtra(prop, \"shorthand\", true);\n        }\n      }\n\n      // @ts-expect-error Fixme: refine typings\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    // @ts-expect-error type is well defined\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: Undone<N.Node>): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStartLoc.index);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(\n    prop: Undone<N.ObjectProperty>,\n  ): prop is typeof prop & { key: N.Identifier } {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, this.state.startLoc);\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode<N.ObjectProperty>();\n    let isAsync = false;\n    let isAccessor = false;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const { key } = prop;\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, this.state.curPosition(), {\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        method,\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, method);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    this: Parser,\n    prop: Undone<N.ObjectMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): N.ObjectMethod | undefined | null {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      const finishedProp = this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    this: Parser,\n    prop: Undone<N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isPattern: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectProperty | undefined | null {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n        }\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue<T extends N.ObjectMember>(\n    this: Parser,\n    prop: Undone<T>,\n    startLoc: Position | undefined | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    const node = (this.parseObjectMethod(\n      prop as Undone<N.ObjectMethod>,\n      isGenerator,\n      isAsync,\n      isPattern,\n      isAccessor,\n    ) ||\n      this.parseObjectProperty(\n        prop as Undone<N.ObjectProperty>,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      )) as T;\n\n    if (!node) this.unexpected();\n\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    this: Parser,\n    prop:\n      | Undone<N.ObjectOrClassMember | N.ClassMember>\n      | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void {\n    if (this.eat(tt.bracketL)) {\n      (prop as Undone<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            if (!process.env.BABEL_8_BREAKING && type === tt.decimal) {\n              key = this.parseDecimalLiteral(value);\n              break;\n            }\n\n            this.unexpected();\n        }\n      }\n      (prop as any).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod>(\n    this: Parser,\n    node: Undone<T>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: T[\"type\"],\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = isGenerator;\n    this.scope.enter(\n      ScopeFlag.FUNCTION |\n        ScopeFlag.SUPER |\n        (inClassScope ? ScopeFlag.CLASS : 0) |\n        (allowDirectSuper ? ScopeFlag.DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, isConstructor);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return finishedNode;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    this: Parser,\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode<N.ArrayExpression | N.TupleExpression>();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    params:\n      | Array<N.Expression | N.SpreadElement>\n      | Array<N.Expression | N.RestElement>,\n    isAsync: boolean,\n    trailingCommaLoc?: Position | null,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(ScopeFlag.FUNCTION | ScopeFlag.ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= ParamKind.PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: Undone<N.ArrowFunctionExpression>,\n    params:\n      | Array<N.Expression | N.SpreadElement>\n      | Array<N.Expression | N.RestElement>,\n    trailingCommaLoc?: Position | null,\n  ): void {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params as (N.Pattern | N.TSParameterProperty)[];\n  }\n\n  parseFunctionBodyAndFinish<\n    T extends\n      | N.Function\n      | N.TSDeclareMethod\n      | N.TSDeclareFunction\n      | N.ClassPrivateMethod,\n  >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n    // @ts-expect-error (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowExpression?: boolean | null,\n    isMethod: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      (node as Undone<N.ArrowFunctionExpression>).body =\n        this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(\n        this.prodParam.currentFlags() | ParamKind.PARAM_RETURN,\n      );\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(\n              Errors.IllegalLanguageModeDirective,\n              // @ts-expect-error kind may not index node\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // @ts-expect-error key may not index node\n                !!node.key\n                ? // @ts-expect-error node.key has been guarded\n                  node.key.loc.end\n                : node,\n            );\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(\n              node.id,\n              BindingFlag.TYPE_OUTSIDE,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty): boolean {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: ReadonlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: Undone<N.Function>,\n    allowDuplicates: boolean,\n    isArrowFunction?: boolean | null,\n    strictModeChanged: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set<string>();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" } as const;\n    for (const param of node.params) {\n      this.checkLVal(\n        param,\n        formalParameters,\n        BindingFlag.TYPE_VAR,\n        checkClashes,\n        strictModeChanged,\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    this: Parser,\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    nodeForExtra?: N.Node | null,\n  ): (N.Expression | null)[] {\n    const elts: (N.Expression | null)[] = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: false,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | N.SpreadElement | N.ArgumentPlaceholder | null {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, this.state.curPosition(), {\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, this.state.startLoc);\n      }\n      const node = this.startNode<N.ArgumentPlaceholder>();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode<N.Identifier>();\n    const name = this.parseIdentifierName(liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(\n    node: Omit<N.Identifier, \"type\">,\n    name: string,\n  ): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, startLoc, {\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n        ? isStrictBindReservedWord\n        : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, startLoc, {\n        reservedWord: word,\n      });\n      return;\n    } else if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, startLoc);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, startLoc);\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, startLoc);\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError(startLoc);\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, startLoc);\n        return;\n      }\n    }\n  }\n\n  // Returns wether `await` is allowed or not in this context, and if it is\n  // keeps track of it to determine whether a module uses top-level await.\n  recordAwaitIfAllowed(): boolean {\n    const isAwaitAllowed =\n      this.prodParam.hasAwait ||\n      (this.options.allowAwaitOutsideFunction && !this.scope.inFunction);\n\n    if (isAwaitAllowed && !this.scope.inFunction) {\n      this.state.hasTopLevelAwait = true;\n    }\n\n    return isAwaitAllowed;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(this: Parser, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt<N.AwaitExpression>(startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, node);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``, await of []\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      (type === tt._of && !this.state.containsEsc) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(this: Parser): N.YieldExpression {\n    const node = this.startNode<N.YieldExpression>();\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n\n    this.next();\n    let delegating = false;\n    let argument: N.Expression | null = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportCall\n  parseImportCall(\n    this: Parser,\n    node: Undone<N.ImportExpression>,\n  ): N.ImportExpression {\n    this.next(); // eat tt.parenL\n    node.source = this.parseMaybeAssignAllowIn();\n    node.options = null;\n    if (this.eat(tt.comma)) {\n      if (!this.match(tt.parenR)) {\n        node.options = this.parseMaybeAssignAllowIn();\n\n        if (this.eat(tt.comma) && !this.match(tt.parenR)) {\n          // keep consuming arguments, to then throw ImportCallArity\n          // instead of \"expected )\"\n          do {\n            this.parseMaybeAssignAllowIn();\n          } while (this.eat(tt.comma) && !this.match(tt.parenR));\n\n          this.raise(Errors.ImportCallArity, node);\n        }\n      }\n    }\n    this.expect(tt.parenR);\n    return this.finishNode(node, \"ImportExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    // @ts-expect-error Remove this in Babel 8\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, leftStartLoc);\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr: N.Expression, startLoc: Position) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt<N.PipelineBareFunction>(startLoc);\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      const bodyNode = this.startNodeAt<N.PipelineTopicExpression>(startLoc);\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, this.state.startLoc);\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, startLoc);\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    // @ts-expect-error Remove this in Babel 8\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = ParamKind.PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | ParamKind.PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = ParamKind.PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~ParamKind.PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(this: Parser, prec: number): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(this: Parser): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    if (!this.match(tt.braceL)) {\n      this.unexpected(null, tt.braceL);\n    }\n    // start program node immediately after `{`\n    const program = this.startNodeAt<N.Program>(this.state.endLoc);\n    this.next(); // eat `{`\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prop: Undone<N.ObjectOrClassMember | N.ClassMember>,\n  ): void {}\n}\n","import type * as N from \"../types.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types.ts\";\nimport ExpressionParser from \"./expression.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier.ts\";\nimport * as charCodes from \"charcodes\";\nimport {\n  ScopeFlag,\n  ClassElementType,\n  BindingFlag,\n} from \"../util/scopeflags.ts\";\nimport { ExpressionErrors } from \"./util.ts\";\nimport { ParamKind, functionFlags } from \"../util/production-parameter.ts\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope.ts\";\nimport type { SourceType } from \"../options.ts\";\nimport { Token } from \"../tokenizer/index.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport { createPositionWithColumnOffset } from \"../util/location.ts\";\nimport { cloneStringLiteral, cloneIdentifier, type Undone } from \"./node.ts\";\nimport type Parser from \"./index.ts\";\nimport { ParseBindingListFlags } from \"./lval.ts\";\nimport { LoopLabelKind } from \"../tokenizer/state.ts\";\n\nconst loopLabel = { kind: LoopLabelKind.Loop } as const,\n  switchLabel = { kind: LoopLabelKind.Switch } as const;\n\nexport const enum ParseFunctionFlag {\n  Expression = 0b0000,\n  Declaration = 0b0001,\n  HangingDeclaration = 0b0010,\n  NullableId = 0b0100,\n  Async = 0b1000,\n}\n\nexport const enum ParseStatementFlag {\n  StatementOnly = 0b0000,\n  AllowImportExport = 0b0001,\n  AllowDeclaration = 0b0010,\n  AllowFunctionDeclaration = 0b0100,\n  AllowLabeledFunction = 0b1000,\n}\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n */\nfunction babel7CompatTokens(\n  tokens: (Token | N.Comment)[],\n  input: string,\n  startIndex: number,\n) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start - startIndex) === charCodes.graveAccent) {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // @ts-expect-error: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default abstract class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(\n    this: Parser,\n    file: Undone<N.File>,\n    program: Undone<N.Program>,\n  ): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(\n        this.tokens,\n        this.input,\n        this.startIndex,\n      );\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    this: Parser,\n    program: Undone<N.Program>,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (this.inModule) {\n      if (\n        !this.options.allowUndeclaredExports &&\n        this.scope.undefinedExports.size > 0\n      ) {\n        for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n          this.raise(Errors.ModuleExportUndefined, at, { localName });\n        }\n      }\n      this.addExtra(program, \"topLevelAwait\", this.state.hasTopLevelAwait);\n    }\n    let finishedProgram: N.Program;\n    if (end === tt.eof) {\n      // finish at eof for top level program\n      finishedProgram = this.finishNode(program, \"Program\");\n    } else {\n      // finish immediately before the end token\n      finishedProgram = this.finishNodeAt(\n        program,\n        \"Program\",\n        createPositionWithColumnOffset(this.state.startLoc, -1),\n      );\n    }\n    return finishedProgram;\n  }\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = stmt as any;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(\n      this.offsetToSourcePos(directiveLiteral.start),\n      this.offsetToSourcePos(directiveLiteral.end),\n    );\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode<N.InterpreterDirective>();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.hasFollowingBindingAtom();\n  }\n\n  chStartsBindingIdentifier(ch: number, pos: number) {\n    if (isIdentifierStart(ch)) {\n      keywordRelationalOperator.lastIndex = pos;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identifier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    } else if (ch === charCodes.backslash) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  chStartsBindingPattern(ch: number) {\n    return (\n      ch === charCodes.leftSquareBracket || ch === charCodes.leftCurlyBrace\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `let` and declaration is allowed, check if it\n   * starts a variable declaration so that it should be interpreted as a keyword.\n   */\n  hasFollowingBindingAtom(): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return (\n      this.chStartsBindingPattern(nextCh) ||\n      this.chStartsBindingIdentifier(nextCh, next)\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `using` and declaration is allowed, check if it\n   * starts a variable declaration in the same line so that it should be interpreted as\n   * a keyword.\n   */\n  hasInLineFollowingBindingIdentifierOrBrace(): boolean {\n    const next = this.nextTokenInLineStart();\n    const nextCh = this.codePointAtPos(next);\n    return (\n      nextCh === charCodes.leftCurlyBrace ||\n      this.chStartsBindingIdentifier(nextCh, next)\n    );\n  }\n\n  startsUsingForOf(): boolean {\n    const { type, containsEsc } = this.lookahead();\n    if (type === tt._of && !containsEsc) {\n      // `using of` must start a for-lhs-of statement\n      return false;\n    } else if (tokenIsIdentifier(type) && !this.hasFollowingLineBreak()) {\n      this.expectPlugin(\"explicitResourceManagement\");\n      return true;\n    }\n  }\n\n  startsAwaitUsing(): boolean {\n    let next = this.nextTokenInLineStart();\n    if (this.isUnparsedContextual(next, \"using\")) {\n      next = this.nextTokenInLineStartSince(next + 5);\n      const nextCh = this.codePointAtPos(next);\n      if (this.chStartsBindingIdentifier(nextCh, next)) {\n        this.expectPlugin(\"explicitResourceManagement\");\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleItem\n  parseModuleItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowImportExport |\n        ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        // This function is actually also used to parse StatementItems,\n        // which with Annex B enabled allows labeled functions.\n        ParseStatementFlag.AllowLabeledFunction,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-StatementListItem\n  parseStatementListItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        (!this.options.annexB || this.state.strict\n          ? 0\n          : ParseStatementFlag.AllowLabeledFunction),\n    );\n  }\n\n  parseStatementOrSloppyAnnexBFunctionDeclaration(\n    this: Parser,\n    allowLabeledFunction: boolean = false,\n  ) {\n    let flags: ParseStatementFlag = ParseStatementFlag.StatementOnly;\n    if (this.options.annexB && !this.state.strict) {\n      flags |= ParseStatementFlag.AllowFunctionDeclaration;\n      if (allowLabeledFunction) {\n        flags |= ParseStatementFlag.AllowLabeledFunction;\n      }\n    }\n    return this.parseStatementLike(flags);\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  parseStatement(this: Parser) {\n    return this.parseStatementLike(ParseStatementFlag.StatementOnly);\n  }\n\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatementLike(\n    this: Parser,\n    flags: ParseStatementFlag,\n  ):\n    | N.Statement\n    | N.Declaration\n    | N.ImportDeclaration\n    | N.ExportDefaultDeclaration\n    | N.ExportNamedDeclaration\n    | N.ExportAllDeclaration {\n    let decorators: N.Decorator[] | null = null;\n\n    if (this.match(tt.at)) {\n      decorators = this.parseDecorators(true);\n    }\n    return this.parseStatementContent(flags, decorators);\n  }\n\n  parseStatementContent(\n    this: Parser,\n    flags: ParseStatementFlag,\n    decorators?: N.Decorator[] | null,\n  ): N.Statement {\n    const startType = this.state.type;\n    const node = this.startNode();\n    const allowDeclaration = !!(flags & ParseStatementFlag.AllowDeclaration);\n    const allowFunctionDeclaration = !!(\n      flags & ParseStatementFlag.AllowFunctionDeclaration\n    );\n    const topLevel = flags & ParseStatementFlag.AllowImportExport;\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (startType) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node as Undone<N.DebuggerStatement>);\n      case tt._do:\n        return this.parseDoWhileStatement(node as Undone<N.DoWhileStatement>);\n      case tt._for:\n        return this.parseForStatement(node as Undone<N.ForStatement>);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (!allowFunctionDeclaration) {\n          this.raise(\n            this.state.strict\n              ? Errors.StrictFunction\n              : this.options.annexB\n                ? Errors.SloppyFunctionAnnexB\n                : Errors.SloppyFunction,\n            this.state.startLoc,\n          );\n        }\n        return this.parseFunctionStatement(\n          node as Undone<N.FunctionDeclaration>,\n          false,\n          !allowDeclaration && allowFunctionDeclaration,\n        );\n      case tt._class:\n        if (!allowDeclaration) this.unexpected();\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            node as Undone<N.ClassDeclaration>,\n          ),\n          true,\n        );\n\n      case tt._if:\n        return this.parseIfStatement(node as Undone<N.IfStatement>);\n      case tt._return:\n        return this.parseReturnStatement(node as Undone<N.ReturnStatement>);\n      case tt._switch:\n        return this.parseSwitchStatement(node as Undone<N.SwitchStatement>);\n      case tt._throw:\n        return this.parseThrowStatement(node as Undone<N.ThrowStatement>);\n      case tt._try:\n        return this.parseTryStatement(node as Undone<N.TryStatement>);\n\n      case tt._await:\n        // [+Await] await [no LineTerminator here] using [no LineTerminator here] BindingList[+Using]\n        if (!this.state.containsEsc && this.startsAwaitUsing()) {\n          if (!this.recordAwaitIfAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, node);\n          } else if (!allowDeclaration) {\n            this.raise(Errors.UnexpectedLexicalDeclaration, node);\n          }\n          this.next(); // eat 'await'\n          return this.parseVarStatement(\n            node as Undone<N.VariableDeclaration>,\n            \"await using\",\n          );\n        }\n        break;\n      case tt._using:\n        // using [no LineTerminator here] BindingList[+Using]\n        if (\n          this.state.containsEsc ||\n          !this.hasInLineFollowingBindingIdentifierOrBrace()\n        ) {\n          break;\n        }\n        this.expectPlugin(\"explicitResourceManagement\");\n        if (!this.scope.inModule && this.scope.inTopLevel) {\n          this.raise(Errors.UnexpectedUsingDeclaration, this.state.startLoc);\n        } else if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n        }\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          \"using\",\n        );\n      case tt._let: {\n        if (this.state.containsEsc) {\n          break;\n        }\n        // `let [` is an explicit negative lookahead for\n        // ExpressionStatement, so special-case it first.\n        const next = this.nextTokenStart();\n        const nextCh = this.codePointAtPos(next);\n        if (nextCh !== charCodes.leftSquareBracket) {\n          if (!allowDeclaration && this.hasFollowingLineBreak()) break;\n          if (\n            !this.chStartsBindingIdentifier(nextCh, next) &&\n            nextCh !== charCodes.leftCurlyBrace\n          ) {\n            break;\n          }\n        }\n      }\n      // fall through\n      case tt._const: {\n        if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n        }\n      }\n      // fall through\n      case tt._var: {\n        const kind = this.state.value;\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          kind,\n        );\n      }\n      case tt._while:\n        return this.parseWhileStatement(node as Undone<N.WhileStatement>);\n      case tt._with:\n        return this.parseWithStatement(node as Undone<N.WithStatement>);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node as Undone<N.EmptyStatement>);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(Errors.UnexpectedImportExport, this.state.startLoc);\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (startType === tt._import) {\n          result = this.parseImport(node as Undone<N.ImportDeclaration>);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(\n            node as Undone<\n              | N.ExportAllDeclaration\n              | N.ExportDefaultDeclaration\n              | N.ExportDefaultDeclaration\n            >,\n            decorators,\n          );\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(result);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (!allowDeclaration) {\n            this.raise(\n              Errors.AsyncFunctionInSingleStatementContext,\n              this.state.startLoc,\n            );\n          }\n          this.next(); // eat 'async'\n          return this.parseFunctionStatement(\n            node as Undone<N.FunctionDeclaration>,\n            true,\n            !allowDeclaration && allowFunctionDeclaration,\n          );\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(startType) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(\n        node as Undone<N.LabeledStatement>,\n        maybeName,\n        expr,\n        flags,\n      );\n    } else {\n      return this.parseExpressionStatement(\n        node as Undone<N.ExpressionStatement>,\n        expr,\n        decorators,\n      );\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, node);\n    }\n  }\n\n  decoratorsEnabledBeforeExport(): boolean {\n    if (this.hasPlugin(\"decorators-legacy\")) return true;\n    return (\n      this.hasPlugin(\"decorators\") &&\n      this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") !== false\n    );\n  }\n\n  // Attach the decorators to the given class.\n  // NOTE: This method changes the .start location of the class, and thus\n  // can affect comment attachment. Calling it before or after finalizing\n  // the class node (and thus finalizing its comments) changes how comments\n  // before the `class` keyword or before the final .start location of the\n  // class are attached.\n  maybeTakeDecorators<T extends Undone<N.Class>>(\n    maybeDecorators: N.Decorator[] | null,\n    classNode: T,\n    exportNode?: Undone<N.ExportDefaultDeclaration | N.ExportNamedDeclaration>,\n  ): T {\n    if (maybeDecorators) {\n      if (classNode.decorators && classNode.decorators.length > 0) {\n        // Note: decorators attachment is only attempred multiple times\n        // when the class is part of an export declaration.\n        if (\n          typeof this.getPluginOption(\n            \"decorators\",\n            \"decoratorsBeforeExport\",\n          ) !== \"boolean\"\n        ) {\n          // If `decoratorsBeforeExport` was set to `true` or `false`, we\n          // already threw an error about decorators not being in a valid\n          // position.\n          this.raise(\n            Errors.DecoratorsBeforeAfterExport,\n            classNode.decorators[0],\n          );\n        }\n        classNode.decorators.unshift(...maybeDecorators);\n      } else {\n        classNode.decorators = maybeDecorators;\n      }\n      this.resetStartLocationFromNode(classNode, maybeDecorators[0]);\n      if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);\n    }\n    return classNode;\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(this: Parser, allowExport?: boolean): N.Decorator[] {\n    const decorators = [];\n    do {\n      decorators.push(this.parseDecorator());\n    } while (this.match(tt.at));\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (!this.decoratorsEnabledBeforeExport()) {\n        this.raise(Errors.DecoratorExportClass, this.state.startLoc);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, this.state.startLoc);\n    }\n\n    return decorators;\n  }\n\n  parseDecorator(this: Parser): N.Decorator {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n    const node = this.startNode<N.Decorator>();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.match(tt.parenL)) {\n        const startLoc = this.state.startLoc;\n        this.next(); // eat '('\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n        expr = this.wrapParenthesis(startLoc, expr);\n\n        const paramsStartLoc = this.state.startLoc;\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n        if (\n          this.getPluginOption(\"decorators\", \"allowCallParenthesized\") ===\n            false &&\n          node.expression !== expr\n        ) {\n          this.raise(\n            Errors.DecoratorArgumentsOutsideParentheses,\n            paramsStartLoc,\n          );\n        }\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt<N.MemberExpression>(startLoc);\n          node.object = expr;\n          if (this.match(tt.privateName)) {\n            this.classScope.usePrivateName(\n              this.state.value,\n              this.state.startLoc,\n            );\n            node.property = this.parsePrivateName();\n          } else {\n            node.property = this.parseIdentifier(true);\n          }\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n      }\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(this: Parser, expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode<N.CallExpression>(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: true,\n  ): N.BreakStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: false,\n  ): N.ContinueStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === LoopLabelKind.Loop)) {\n          break;\n        }\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, node, { type });\n    }\n  }\n\n  parseDebuggerStatement(\n    node: Undone<N.DebuggerStatement>,\n  ): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(this: Parser): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  // https://tc39.es/ecma262/#prod-DoWhileStatement\n  parseDoWhileStatement(\n    this: Parser,\n    node: Undone<N.DoWhileStatement>,\n  ): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(\n    this: Parser,\n    node: Undone<N.ForStatement | N.ForInOf>,\n  ): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isContextual(tt._await) && this.recordAwaitIfAllowed()) {\n      awaitAt = this.state.startLoc;\n      this.next();\n    }\n    this.scope.enter(ScopeFlag.OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    {\n      const startsWithAwaitUsing =\n        this.isContextual(tt._await) && this.startsAwaitUsing();\n      const starsWithUsingDeclaration =\n        startsWithAwaitUsing ||\n        (this.isContextual(tt._using) && this.startsUsingForOf());\n      const isLetOrUsing =\n        (startsWithLet && this.hasFollowingBindingAtom()) ||\n        starsWithUsingDeclaration;\n\n      if (this.match(tt._var) || this.match(tt._const) || isLetOrUsing) {\n        const initNode = this.startNode<N.VariableDeclaration>();\n        let kind;\n        if (startsWithAwaitUsing) {\n          kind = \"await using\";\n          if (!this.recordAwaitIfAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, this.state.startLoc);\n          }\n          this.next(); // eat 'await'\n        } else {\n          kind = this.state.value;\n        }\n        this.next();\n        this.parseVar(initNode, true, kind);\n        const init = this.finishNode(initNode, \"VariableDeclaration\");\n\n        const isForIn = this.match(tt._in);\n        if (isForIn && starsWithUsingDeclaration) {\n          this.raise(Errors.ForInUsing, init);\n        }\n        if (\n          (isForIn || this.isContextual(tt._of)) &&\n          init.declarations.length === 1\n        ) {\n          return this.parseForIn(node as Undone<N.ForInOf>, init, awaitAt);\n        }\n        if (awaitAt !== null) {\n          this.unexpected(awaitAt);\n        }\n        return this.parseFor(node as Undone<N.ForStatement>, init);\n      }\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, init);\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, init);\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { type });\n      return this.parseForIn(\n        node as Undone<N.ForInStatement | N.ForOfStatement>,\n        // @ts-expect-error init has been transformed to an assignable\n        init,\n        awaitAt,\n      );\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node as Undone<N.ForStatement>, init);\n  }\n\n  // https://tc39.es/ecma262/#prod-HoistableDeclaration\n  parseFunctionStatement(\n    this: Parser,\n    node: Undone<N.FunctionDeclaration>,\n    isAsync: boolean,\n    isHangingDeclaration: boolean,\n  ): N.FunctionDeclaration {\n    this.next(); // eat 'function'\n    return this.parseFunction(\n      node,\n      ParseFunctionFlag.Declaration |\n        (isHangingDeclaration ? ParseFunctionFlag.HangingDeclaration : 0) |\n        (isAsync ? ParseFunctionFlag.Async : 0),\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-IfStatement\n  parseIfStatement(this: Parser, node: Undone<N.IfStatement>) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    // Annex B.3.3\n    // https://tc39.es/ecma262/#sec-functiondeclarations-in-ifstatement-statement-clauses\n    node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration();\n    node.alternate = this.eat(tt._else)\n      ? this.parseStatementOrSloppyAnnexBFunctionDeclaration()\n      : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(this: Parser, node: Undone<N.ReturnStatement>) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, this.state.startLoc);\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-SwitchStatement\n  parseSwitchStatement(this: Parser, node: Undone<N.SwitchStatement>) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases: N.SwitchStatement[\"cases\"] = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(ScopeFlag.OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        // @ts-expect-error Fixme\n        cases.push((cur = this.startNode<N.SwitchCase>()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(\n              Errors.MultipleDefaultsInSwitch,\n              this.state.lastTokStartLoc,\n            );\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatementListItem());\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(this: Parser, node: Undone<N.ThrowStatement>) {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, this.state.lastTokEndLoc);\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(this: Parser): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    this.scope.enter(\n      this.options.annexB && param.type === \"Identifier\"\n        ? ScopeFlag.SIMPLE_CATCH\n        : 0,\n    );\n    this.checkLVal(\n      param,\n      { type: \"CatchClause\" },\n      BindingFlag.TYPE_CATCH_PARAM,\n    );\n\n    return param;\n  }\n\n  parseTryStatement(\n    this: Parser,\n    node: Undone<N.TryStatement>,\n  ): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode<N.CatchClause>();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(ScopeFlag.OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, node);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-VariableStatement\n  // https://tc39.es/ecma262/#prod-LexicalDeclaration\n  parseVarStatement(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  // https://tc39.es/ecma262/#prod-WhileStatement\n  parseWhileStatement(\n    this: Parser,\n    node: Undone<N.WhileStatement>,\n  ): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(\n    this: Parser,\n    node: Undone<N.WithStatement>,\n  ): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, this.state.startLoc);\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: Undone<N.EmptyStatement>): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-LabelledStatement\n  parseLabeledStatement(\n    this: Parser,\n    node: Undone<N.LabeledStatement>,\n    maybeName: string,\n    expr: N.Identifier,\n    flags: ParseStatementFlag,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, expr, {\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? LoopLabelKind.Loop\n      : this.match(tt._switch)\n        ? LoopLabelKind.Switch\n        : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.sourceToOffsetPos(this.state.start);\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.sourceToOffsetPos(this.state.start),\n    });\n    // https://tc39.es/ecma262/#prod-LabelledItem\n    node.body =\n      flags & ParseStatementFlag.AllowLabeledFunction\n        ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true)\n        : this.parseStatement();\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: Undone<N.ExpressionStatement>,\n    expr: N.Expression,\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    decorators: N.Decorator[] | null,\n  ) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    this: Parser,\n    allowDirectives: boolean = false,\n    createNewLexicalScope: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode<N.BlockStatement>();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(ScopeFlag.OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    this: Parser,\n    node: Undone<N.BlockStatementLike>,\n    allowDirectives: boolean | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body: N.BlockStatementLike[\"body\"] = (node.body = []);\n    const directives: N.BlockStatementLike[\"directives\"] = (node.directives =\n      []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    this: Parser,\n    body: N.Statement[],\n    directives: N.Directive[] | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = topLevel\n        ? this.parseModuleItem()\n        : this.parseStatementListItem();\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    afterBlockParse?.call(this, hasStrictModeDirective);\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    this: Parser,\n    node: Undone<N.ForStatement>,\n    init?: N.VariableDeclaration | N.Expression | null,\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    this: Parser,\n    node: Undone<N.ForInOf>,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt?: Position | null,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        !this.options.annexB ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, init, {\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, init, {\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    allowMissingInitializer: boolean = false,\n  ): Undone<N.VariableDeclaration> {\n    const declarations: N.VariableDeclarator[] = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode<N.VariableDeclarator>();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n          ? this.parseMaybeAssignDisallowIn()\n          : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            this.state.lastTokEndLoc,\n            {\n              kind: \"destructuring\",\n            },\n          );\n        } else if (\n          (kind === \"const\" || kind === \"using\" || kind === \"await using\") &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            this.state.lastTokEndLoc,\n            { kind },\n          );\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(\n    this: Parser,\n    decl: Undone<N.VariableDeclarator>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n  ): void {\n    const id = this.parseBindingAtom();\n    if (kind === \"using\" || kind === \"await using\") {\n      if (id.type === \"ArrayPattern\" || id.type === \"ObjectPattern\") {\n        this.raise(Errors.UsingDeclarationHasBindingPattern, id.loc.start);\n      }\n    }\n    this.checkLVal(\n      id,\n      { type: \"VariableDeclarator\" },\n      kind === \"var\" ? BindingFlag.TYPE_VAR : BindingFlag.TYPE_LEXICAL,\n    );\n    decl.id = id;\n  }\n\n  // https://tc39.es/ecma262/#prod-AsyncFunctionExpression\n  parseAsyncFunctionExpression(\n    this: Parser,\n    node: Undone<N.FunctionExpression>,\n  ): N.FunctionExpression {\n    return this.parseFunction(node, ParseFunctionFlag.Async);\n  }\n\n  // Parse a function declaration or expression (depending on the\n  // ParseFunctionFlag.Declaration flag).\n\n  parseFunction<T extends N.NormalFunction>(\n    this: Parser,\n    node: Undone<T>,\n    flags: ParseFunctionFlag = ParseFunctionFlag.Expression,\n  ): T {\n    const hangingDeclaration = flags & ParseFunctionFlag.HangingDeclaration;\n    const isDeclaration = !!(flags & ParseFunctionFlag.Declaration);\n    const requireId = isDeclaration && !(flags & ParseFunctionFlag.NullableId);\n    const isAsync = !!(flags & ParseFunctionFlag.Async);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star)) {\n      if (hangingDeclaration) {\n        this.raise(\n          Errors.GeneratorInSingleStatementContext,\n          this.state.startLoc,\n        );\n      }\n      this.next(); // eat *\n      node.generator = true;\n    }\n\n    if (isDeclaration) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(ScopeFlag.FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isDeclaration) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* isConstructor */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isDeclaration ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isDeclaration && !hangingDeclaration) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node as T);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node as T;\n  }\n\n  parseFunctionId(requireId?: boolean): N.Identifier | undefined | null {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(\n    this: Parser,\n    node: Undone<N.Function>,\n    isConstructor?: boolean,\n  ): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      ParseBindingListFlags.IS_FUNCTION_PARAMS |\n        (isConstructor ? ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS : 0),\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BindingFlag.TYPE_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      !this.options.annexB || this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BindingFlag.TYPE_VAR\n          : BindingFlag.TYPE_LEXICAL\n        : BindingFlag.TYPE_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T extends N.Class>(\n    this: Parser,\n    node: Undone<T>,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next(); // 'class'\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  nameIsConstructor(key: N.Expression | N.PrivateName): boolean {\n    return (\n      (key.type === \"Identifier\" && key.name === \"constructor\") ||\n      (key.type === \"StringLiteral\" && key.value === \"constructor\")\n    );\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed && !method.static && this.nameIsConstructor(method.key)\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(\n    this: Parser,\n    hadSuperClass: boolean,\n    oldStrict: boolean,\n  ): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody = this.startNode<N.ClassBody>();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(\n              Errors.DecoratorSemicolon,\n              this.state.lastTokEndLoc,\n            );\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode<N.ClassMember>();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          // @ts-expect-error Fixme\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          // @ts-expect-error Fixme\n          member.kind === \"constructor\" &&\n          // @ts-expect-error Fixme\n          member.decorators &&\n          // @ts-expect-error Fixme\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, member);\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, this.state.startLoc);\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = member as any;\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = member as any;\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, member as any as N.StaticBlock);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod = member as N.ClassMethod;\n    const privateMethod = member as N.ClassPrivateMethod;\n    const publicProp = member as N.ClassProperty;\n    const privateProp = member as N.ClassPrivateProperty;\n    const accessorProp = member as N.ClassAccessorProperty;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, publicMethod.key);\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      !this.state.containsEsc && tokenIsIdentifier(this.state.type);\n    const key = this.parseClassElementName(member);\n    const maybeContextualKw = isContextual ? (key as N.Identifier).name : null;\n    const isPrivate = this.isPrivateName(key);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, key);\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, key);\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (maybeContextualKw === \"async\" && !this.isLineTerminator()) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, publicMethod.key);\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      (maybeContextualKw === \"get\" || maybeContextualKw === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = maybeContextualKw;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, publicMethod.key);\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (maybeContextualKw === \"accessor\" && !this.isLineTerminator()) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(\n    this: Parser,\n    member: Undone<N.ClassMember>,\n  ): N.Expression | N.Identifier | N.PrivateName {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, this.state.startLoc);\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, this.state.startLoc);\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    this.parsePropertyName(member);\n    return member.key;\n  }\n\n  parseClassStaticBlock(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<\n      N.StaticBlock & {\n        decorators?: Array<N.Decorator>;\n      }\n    >,\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(\n      ScopeFlag.CLASS | ScopeFlag.STATIC_BLOCK | ScopeFlag.SUPER,\n    );\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(ParamKind.PARAM);\n    const body: N.Statement[] = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, member);\n    }\n  }\n\n  pushClassProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassProperty,\n  ) {\n    if (!prop.computed && this.nameIsConstructor(prop.key)) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, prop.key);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: Undone<N.ClassPrivateProperty>,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      ClassElementType.OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed && this.nameIsConstructor(prop.key)) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, prop.key);\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key as N.PrivateName),\n        ClassElementType.OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassPrivateMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? ClassElementType.STATIC_GETTER\n          : ClassElementType.INSTANCE_GETTER\n        : node.kind === \"set\"\n          ? node.static\n            ? ClassElementType.STATIC_SETTER\n            : ClassElementType.INSTANCE_SETTER\n          : ClassElementType.OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: Undone<N.ClassPrivateMethod | N.TSDeclareMethod>,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key as N.PrivateName),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    methodOrProp: Undone<N.ClassMethod | N.ClassProperty>,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    this: Parser,\n    node: Undone<N.ClassPrivateProperty>,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(this: Parser, node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    this: Parser,\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    this: Parser,\n    node: Undone<\n      N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty\n    >,\n  ): void {\n    this.scope.enter(ScopeFlag.CLASS | ScopeFlag.SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(ParamKind.PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: Undone<N.Class>,\n    isStatement: boolean,\n    optionalId?: boolean | null,\n    bindingType: BindingFlag = BindingFlag.TYPE_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, this.state.startLoc);\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(this: Parser, node: Undone<N.Class>): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(\n    this: Parser,\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    decorators: N.Decorator[] | null,\n  ): N.AnyExport {\n    const maybeDefaultIdentifier = this.parseMaybeImportPhase(\n      node,\n      /* isExport */ true,\n    );\n    const hasDefault = this.maybeParseExportDefaultSpecifier(\n      node,\n      maybeDefaultIdentifier,\n    );\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) {\n      this.unexpected(null, tt.braceL);\n    }\n\n    if (hasNamespace && parseAfterNamespace) {\n      this.unexpected(null, tt._from);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(\n        node as Undone<N.ExportNamedDeclaration>,\n        isFromRequired,\n      );\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(\n        node as Undone<N.ExportNamedDeclaration>,\n      );\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n      this.checkExport(node2, true, false, !!node2.source);\n      if (node2.declaration?.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, node2.declaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      return this.finishNode(node2, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      const node2 = node as Undone<N.ExportDefaultDeclaration>;\n      // export default ...\n      const decl = this.parseExportDefaultExpression();\n      node2.declaration = decl;\n\n      if (decl.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, decl as N.ClassDeclaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n\n      this.checkExport(node2, true, true);\n\n      return this.finishNode(node2, \"ExportDefaultDeclaration\");\n    }\n\n    this.unexpected(null, tt.braceL);\n  }\n\n  eatExportStar(\n    node: Undone<N.Node>,\n  ): node is Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration> {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\", maybeDefaultIdentifier?.loc.start);\n      const id = maybeDefaultIdentifier || this.parseIdentifier(true);\n      const specifier = this.startNodeAtNode<N.ExportDefaultSpecifier>(id);\n      specifier.exported = id;\n      (node as Undone<N.ExportNamedDeclaration>).specifiers = [\n        this.finishNode(specifier, \"ExportDefaultSpecifier\"),\n      ];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(\n    node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (this.isContextual(tt._as)) {\n      (node as Undone<N.ExportNamedDeclaration>).specifiers ??= [];\n\n      const specifier = this.startNodeAt<N.ExportNamespaceSpecifier>(\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      (node as Undone<N.ExportNamedDeclaration>).specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(\n    node: Undone<N.Node>,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (this.match(tt.braceL)) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n\n      if (!node2.specifiers) node2.specifiers = [];\n      const isTypeExport = node2.exportKind === \"type\";\n      node2.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node2.source = null;\n      node2.declaration = null;\n      if (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"importAssertions\")) {\n        node2.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n  ): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenInLineStart();\n    return this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression(\n    this: Parser,\n  ): N.ExportDefaultDeclaration[\"declaration\"] {\n    const expr = this.startNode();\n\n    if (this.match(tt._function)) {\n      this.next();\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration | ParseFunctionFlag.NullableId,\n      );\n    } else if (this.isAsyncFunction()) {\n      this.next(); // eat 'async'\n      this.next(); // eat 'function'\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration |\n          ParseFunctionFlag.NullableId |\n          ParseFunctionFlag.Async,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr as Undone<N.ClassExpression>, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n      }\n      return this.parseClass(\n        this.maybeTakeDecorators(\n          this.parseDecorators(false),\n          this.startNode<N.ClassDeclaration>(),\n        ),\n        true,\n        true,\n      );\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, this.state.startLoc);\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n  parseExportDeclaration(\n    this: Parser,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    node: Undone<N.ExportNamedDeclaration>,\n  ): N.Declaration | undefined | null {\n    if (this.match(tt._class)) {\n      const node = this.parseClass(\n        this.startNode<N.ClassDeclaration>(),\n        true,\n        false,\n      );\n      return node;\n    }\n    return this.parseStatementListItem() as N.Declaration;\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n    expect?: boolean,\n  ): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      this.maybeParseImportAttributes(node);\n      this.checkJSONModuleImport(node);\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (\n          this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n        ) {\n          this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n        }\n\n        return true;\n      }\n    }\n\n    if (this.isContextual(tt._using)) {\n      this.raise(Errors.UsingDeclarationExport, this.state.startLoc);\n      return true;\n    }\n\n    if (this.isContextual(tt._await) && this.startsAwaitUsing()) {\n      this.raise(Errors.UsingDeclarationExport, this.state.startLoc);\n      return true;\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: Undone<\n      | N.ExportNamedDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportDefaultDeclaration\n    >,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = (node as any as N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, declaration);\n          }\n        }\n        // @ts-expect-error node.specifiers may not exist\n      } else if (node.specifiers?.length) {\n        // Named exports\n        // @ts-expect-error node.specifiers may not exist\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, specifier, {\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if ((node as Undone<N.ExportNamedDeclaration>).declaration) {\n        const decl = (node as Undone<N.ExportNamedDeclaration>).declaration;\n        // Exported declarations\n        if (\n          decl.type === \"FunctionDeclaration\" ||\n          decl.type === \"ClassDeclaration\"\n        ) {\n          const { id } = decl;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (decl.type === \"VariableDeclaration\") {\n          for (const declaration of decl.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      // @ts-expect-error migrate to Babel types\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node: Undone<\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier\n    >,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, node);\n      } else {\n        this.raise(Errors.DuplicateExport, node, { exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode<N.ExportSpecifier>();\n      node.local = this.parseModuleExportName() as N.Identifier;\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = loneSurrogate.exec(result.value);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, result, {\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  isJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ): boolean {\n    if (node.assertions != null) {\n      return node.assertions.some(({ key, value }) => {\n        return (\n          value.value === \"json\" &&\n          (key.type === \"Identifier\"\n            ? key.name === \"type\"\n            : key.value === \"type\")\n        );\n      });\n    }\n    return false;\n  }\n\n  checkImportReflection(node: Undone<N.ImportDeclaration>) {\n    const { specifiers } = node;\n    const singleBindingType =\n      specifiers.length === 1 ? specifiers[0].type : null;\n\n    if (node.phase === \"source\") {\n      if (singleBindingType !== \"ImportDefaultSpecifier\") {\n        this.raise(\n          Errors.SourcePhaseImportRequiresDefault,\n          specifiers[0].loc.start,\n        );\n      }\n    } else if (node.phase === \"defer\") {\n      if (singleBindingType !== \"ImportNamespaceSpecifier\") {\n        this.raise(\n          Errors.DeferImportRequiresNamespace,\n          specifiers[0].loc.start,\n        );\n      }\n    } else if (node.module) {\n      if (singleBindingType !== \"ImportDefaultSpecifier\") {\n        this.raise(Errors.ImportReflectionNotBinding, specifiers[0].loc.start);\n      }\n      if (node.assertions?.length > 0) {\n        this.raise(\n          Errors.ImportReflectionHasAssertion,\n          specifiers[0].loc.start,\n        );\n      }\n    }\n  }\n\n  checkJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ) {\n    // @ts-expect-error Fixme: node.type must be undefined because they are undone\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      // @ts-expect-error specifiers may not index node\n      const { specifiers } = node;\n      if (specifiers != null) {\n        // @ts-expect-error refine specifier types\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\"\n              ? imported.name !== \"default\"\n              : imported.value !== \"default\";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(\n            Errors.ImportJSONBindingNotDefault,\n            nonDefaultNamedSpecifier.loc.start,\n          );\n        }\n      }\n    }\n  }\n\n  isPotentialImportPhase(isExport: boolean): boolean {\n    if (isExport) return false;\n    return (\n      this.isContextual(tt._source) ||\n      this.isContextual(tt._defer) ||\n      (!process.env.BABEL_8_BREAKING && this.isContextual(tt._module))\n    );\n  }\n\n  applyImportPhase(\n    node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n    isExport: boolean,\n    phase: string | null,\n    loc?: Position,\n  ): void {\n    if (isExport) {\n      if (!process.env.IS_PUBLISH) {\n        if (\n          (!process.env.BABEL_8_BREAKING && phase === \"module\") ||\n          phase === \"source\"\n        ) {\n          throw new Error(\n            `Assertion failure: export declarations do not support the '${phase}' phase.`,\n          );\n        }\n      }\n      return;\n    }\n\n    if (!process.env.BABEL_8_BREAKING && phase === \"module\") {\n      this.expectPlugin(\"importReflection\", loc);\n      (node as N.ImportDeclaration).module = true;\n    } else if (this.hasPlugin(\"importReflection\")) {\n      (node as N.ImportDeclaration).module = false;\n    }\n\n    if (phase === \"source\") {\n      this.expectPlugin(\"sourcePhaseImports\", loc);\n      (node as N.ImportDeclaration).phase = \"source\";\n    } else if (phase === \"defer\") {\n      this.expectPlugin(\"deferredImportEvaluation\", loc);\n      (node as N.ImportDeclaration).phase = \"defer\";\n    } else if (this.hasPlugin(\"sourcePhaseImports\")) {\n      (node as N.ImportDeclaration).phase = null;\n    }\n  }\n\n  /*\n   * Parse `source` in `import source x from \"x\"`, disambiguating\n   * `import source from \"x\"` and `import source from from \"x\"`.\n   *\n   * This function might return an identifier representing the `source`\n   * if it eats `source` and then discovers that it was the default import\n   * binding and not the import reflection.\n   *\n   * This function is also used to parse `import type` and `import typeof`\n   * in the TS and Flow plugins, and for parsing `import defer`.\n   */\n  parseMaybeImportPhase(\n    node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    isExport: boolean,\n  ): N.Identifier | null {\n    if (!this.isPotentialImportPhase(isExport)) {\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        null,\n      );\n      return null;\n    }\n\n    const phaseIdentifier = this.parseIdentifier(true);\n\n    const { type } = this.state;\n    const isImportPhase = tokenIsKeywordOrIdentifier(type)\n      ? // OK: import <phase> x from \"foo\";\n        // OK: import <phase> from from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // NO: import <phase> from 'foo';\n        // With the module declarations proposals, we will need further disambiguation\n        // for `import module from from;`.\n        type !== tt._from || this.lookaheadCharCode() === charCodes.lowercaseF\n      : // OK: import <phase> { x } from \"foo\";\n        // OK: import <phase> x from \"foo\";\n        // OK: import <phase> * as T from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // OK: import <phase> \"foo\";\n        // The last one is invalid, we will continue parsing and throw\n        // an error later\n        type !== tt.comma;\n\n    if (isImportPhase) {\n      this.resetPreviousIdentifierLeadingComments(phaseIdentifier);\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        phaseIdentifier.name,\n        phaseIdentifier.loc.start,\n      );\n      return null;\n    } else {\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        null,\n      );\n      // `<phase>` is a default binding, return it to the main import declaration parser\n      return phaseIdentifier;\n    }\n  }\n\n  isPrecedingIdImportPhase(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    phase: string,\n  ) {\n    const { type } = this.state;\n    return tokenIsIdentifier(type)\n      ? // OK: import <phase> x from \"foo\";\n        // OK: import <phase> from from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // NO: import <phase> from 'foo';\n        // With the module declarations proposals, we will need further disambiguation\n        // for `import module from from;`.\n        type !== tt._from || this.lookaheadCharCode() === charCodes.lowercaseF\n      : // OK: import <phase> { x } from \"foo\";\n        // OK: import <phase> x from \"foo\";\n        // OK: import <phase> * as T from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // OK: import <phase> \"foo\";\n        // The last one is invalid, we will continue parsing and throw\n        // an error later\n        type !== tt.comma;\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(this: Parser, node: Undone<N.ImportDeclaration>): N.AnyImport {\n    if (this.match(tt.string)) {\n      // import '...'\n      return this.parseImportSourceAndAttributes(node);\n    }\n\n    return this.parseImportSpecifiersAndAfter(\n      node,\n      this.parseMaybeImportPhase(node, /* isExport */ false),\n    );\n  }\n\n  parseImportSpecifiersAndAfter(\n    this: Parser,\n    node: Undone<N.ImportDeclaration>,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): N.AnyImport {\n    node.specifiers = [];\n\n    // check if we have a default import like\n    // import React from \"react\";\n    const hasDefault = this.maybeParseDefaultImportSpecifier(\n      node,\n      maybeDefaultIdentifier,\n    );\n    /* we are checking if we do not have a default import, then it is obvious that we need named imports\n     * import { get } from \"axios\";\n     * but if we do have a default import\n     * we need to check if we have a comma after that and\n     * that is where this `|| this.eat` condition comes into play\n     */\n    const parseNext = !hasDefault || this.eat(tt.comma);\n    // if we do have to parse the next set of specifiers, we first check for star imports\n    // import React, * from \"react\";\n    const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n    // now we check if we need to parse the next imports\n    // but only if they are not importing * (everything)\n    if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n    this.expectContextual(tt._from);\n\n    return this.parseImportSourceAndAttributes(node);\n  }\n\n  parseImportSourceAndAttributes(\n    this: Parser,\n    node: Undone<N.ImportDeclaration>,\n  ): N.AnyImport {\n    node.specifiers ??= [];\n    node.source = this.parseImportSource();\n    this.maybeParseImportAttributes(node);\n    this.checkImportReflection(node);\n    this.checkJSONModuleImport(node);\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(this: Parser): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom() as N.StringLiteral;\n  }\n\n  parseImportSpecifierLocal<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    node: Undone<N.ImportDeclaration>,\n    specifier: Undone<T>,\n    type: T[\"type\"],\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    specifier: Undone<T>,\n    type: T[\"type\"],\n    bindingType: BindingFlag = BindingFlag.TYPE_LEXICAL,\n  ) {\n    this.checkLVal(specifier.local, { type }, bindingType);\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-attributes/#prod-WithEntries WithEntries}\n   */\n  parseImportAttributes(): N.ImportAttribute[] {\n    this.expect(tt.braceL);\n\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(\n          Errors.ModuleAttributesWithDuplicateKeys,\n          this.state.startLoc,\n          {\n            key: keyName,\n          },\n        );\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(\n          Errors.ModuleAttributeInvalidValue,\n          this.state.startLoc,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    this.expect(tt.braceR);\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   */\n  parseModuleAttributes() {\n    const attrs: N.ImportAttribute[] = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode<N.ImportAttribute>();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, node.key);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, node.key, {\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(\n          Errors.ModuleAttributeInvalidValue,\n          this.state.startLoc,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAttributes(\n    node: Undone<\n      N.ImportDeclaration | N.ExportNamedDeclaration | N.ExportAllDeclaration\n    >,\n  ) {\n    let attributes: N.ImportAttribute[];\n    if (!process.env.BABEL_8_BREAKING) {\n      // eslint-disable-next-line no-var\n      var useWith = false;\n    }\n\n    // https://tc39.es/proposal-import-attributes/#prod-WithClause\n    if (this.match(tt._with)) {\n      if (\n        this.hasPrecedingLineBreak() &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      ) {\n        // This will be parsed as a with statement, and we will throw a\n        // better error about it not being supported in strict mode.\n        return;\n      }\n\n      this.next(); // eat `with`\n\n      if (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"moduleAttributes\")) {\n        attributes = this.parseModuleAttributes();\n      } else {\n        attributes = this.parseImportAttributes();\n      }\n      if (!process.env.BABEL_8_BREAKING) {\n        useWith = true;\n      }\n    } else if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      if (\n        !this.hasPlugin(\"deprecatedImportAssert\") &&\n        (process.env.BABEL_8_BREAKING || !this.hasPlugin(\"importAssertions\"))\n      ) {\n        this.raise(Errors.ImportAttributesUseAssert, this.state.startLoc);\n      }\n      if (process.env.BABEL_8_BREAKING || !this.hasPlugin(\"importAssertions\")) {\n        this.addExtra(node, \"deprecatedAssertSyntax\", true);\n      }\n      this.next(); // eat `assert`\n      attributes = this.parseImportAttributes();\n    } else {\n      attributes = [];\n    }\n\n    if (\n      !process.env.BABEL_8_BREAKING &&\n      !useWith &&\n      this.hasPlugin(\"importAssertions\")\n    ) {\n      node.assertions = attributes;\n    } else {\n      node.attributes = attributes;\n    }\n  }\n\n  maybeParseDefaultImportSpecifier(\n    node: Undone<N.ImportDeclaration>,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): boolean {\n    // import defaultObj, { x, y as z } from '...'\n    if (maybeDefaultIdentifier) {\n      const specifier = this.startNodeAtNode<N.ImportDefaultSpecifier>(\n        maybeDefaultIdentifier,\n      );\n      specifier.local = maybeDefaultIdentifier;\n      node.specifiers.push(\n        this.finishImportSpecifier(specifier, \"ImportDefaultSpecifier\"),\n      );\n      return true;\n    } else if (\n      // We allow keywords, and parseImportSpecifierLocal will report a recoverable error\n      tokenIsKeywordOrIdentifier(this.state.type)\n    ) {\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode<N.ImportDefaultSpecifier>(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode<N.ImportNamespaceSpecifier>();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: Undone<N.ImportDeclaration>) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, this.state.startLoc);\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode<N.ImportSpecifier>();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n        undefined,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: Undone<N.ImportSpecifier>,\n    importedIsString: boolean,\n    /* used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    bindingType: BindingFlag | undefined,\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, specifier, {\n          importName: (imported as N.StringLiteral).value,\n        });\n      }\n      this.checkReservedWord(\n        (imported as N.Identifier).name,\n        specifier.loc.start,\n        true,\n        true,\n      );\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(\n      specifier,\n      \"ImportSpecifier\",\n      bindingType,\n    );\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","import type { Options } from \"../options.ts\";\nimport type * as N from \"../types.ts\";\nimport { getOptions } from \"../options.ts\";\nimport StatementParser from \"./statement.ts\";\nimport ScopeHandler from \"../util/scope.ts\";\n\nexport type PluginsMap = Map<\n  string,\n  {\n    [x: string]: any;\n  }\n>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  // todo(flow->ts) - this probably can be removed\n  // abstract jsxParseOpeningElementAfterName(\n  //   node: N.JSXOpeningElement,\n  // ): N.JSXOpeningElement;\n\n  constructor(\n    options: Options | undefined | null,\n    input: string,\n    pluginsMap: PluginsMap,\n  ) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap;\n    this.filename = options.sourceFilename;\n    this.startIndex = options.startIndex;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): new (...args: any) => ScopeHandler {\n    return ScopeHandler;\n  }\n\n  parse(): N.File {\n    this.enterInitialScopes();\n    const file = this.startNode<N.File>();\n    const program = this.startNode<N.Program>();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    file.comments.length = this.state.commentsLen;\n    return file as N.File;\n  }\n}\n","import type { Options } from \"./options.ts\";\nimport {\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n} from \"./plugin-utils.ts\";\nimport type {\n  PluginConfig as ParserPlugin,\n  FlowPluginOptions,\n  RecordAndTuplePluginOptions,\n  PipelineOperatorPluginOptions,\n} from \"./typings.ts\";\nimport Parser, { type PluginsMap } from \"./parser/index.ts\";\n\nimport type { ExportedTokenType } from \"./tokenizer/types.ts\";\nimport {\n  getExportedToken,\n  tt as internalTokenTypes,\n  type InternalTokenTypes,\n} from \"./tokenizer/types.ts\";\nexport type { Token } from \"./tokenizer/index.ts\";\n\nimport type { Expression, File } from \"./types.ts\";\nexport type { Expression, File };\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(\n  internalTokenTypes: InternalTokenTypes,\n): Record<string, ExportedTokenType> {\n  const tokenTypes: Record<string, ExportedTokenType> = {};\n  for (const typeName of Object.keys(\n    internalTokenTypes,\n  ) as (keyof InternalTokenTypes)[]) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: Options | undefined | null, input: string): Parser {\n  let cls = Parser;\n  const pluginsMap: PluginsMap = new Map();\n  if (options?.plugins) {\n    for (const plugin of options.plugins) {\n      let name, opts;\n      if (typeof plugin === \"string\") {\n        name = plugin;\n      } else {\n        [name, opts] = plugin;\n      }\n      if (!pluginsMap.has(name)) {\n        pluginsMap.set(name, opts || {});\n      }\n    }\n    validatePlugins(pluginsMap);\n    cls = getParserClass(pluginsMap);\n  }\n\n  return new cls(options, input, pluginsMap);\n}\n\nconst parserClassCache = new Map<string, new (...args: any) => Parser>();\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(\n  pluginsMap: Map<string, any>,\n): new (...args: any) => Parser {\n  const pluginList = [];\n  for (const name of mixinPluginNames) {\n    if (pluginsMap.has(name)) {\n      pluginList.push(name);\n    }\n  }\n  const key = pluginList.join(\"|\");\n  let cls = parserClassCache.get(key);\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      // @ts-expect-error todo(flow->ts)\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache.set(key, cls);\n  }\n  return cls;\n}\n\nexport type {\n  FlowPluginOptions,\n  ParserPlugin,\n  PipelineOperatorPluginOptions,\n  RecordAndTuplePluginOptions,\n};\nexport type ParserOptions = Partial<Options>;\n"],"names":["Position","constructor","line","col","index","column","SourceLocation","start","end","filename","identifierName","createPositionWithColumnOffset","position","columnOffset","code","ModuleErrors","ImportMetaOutsideModule","message","ImportOutsideModule","NodeDescriptions","ArrayPattern","AssignmentExpression","AssignmentPattern","ArrowFunctionExpression","ConditionalExpression","CatchClause","ForOfStatement","ForInStatement","ForStatement","FormalParameters","Identifier","ImportSpecifier","ImportDefaultSpecifier","ImportNamespaceSpecifier","ObjectPattern","ParenthesizedExpression","RestElement","UpdateExpression","true","false","VariableDeclarator","YieldExpression","toNodeDescription","node","type","prefix","StandardErrors","AccessorIsGenerator","kind","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitUsingNotInAsyncContext","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorArgumentsOutsideParentheses","DecoratorBeforeExport","DecoratorsBeforeAfterExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeferImportRequiresNamespace","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","exportName","DuplicateProto","DuplicateRegExpFlags","DynamicImportPhaseRequiresImportExpressions","phase","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","localName","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForInUsing","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportAttributesUseAssert","ImportBindingIsString","importName","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportJSONBindingNotDefault","ImportReflectionHasAssertion","ImportReflectionNotBinding","IncompatibleRegExpUVFlags","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","radix","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","reservedWord","InvalidIdentifier","InvalidLhs","ancestor","InvalidLhsBinding","InvalidLhsOptionalChaining","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","unexpected","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","labelName","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingPlugin","missingPlugin","map","name","JSON","stringify","join","MissingOneOfPlugins","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","key","ModuleExportNameHasLoneSurrogate","surrogateCharCode","toString","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","SloppyFunctionAnnexB","SourcePhaseImportRequiresDefault","StaticPrototype","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","keyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","expected","UnexpectedTokenUnaryExponentiation","UnexpectedUsingDeclaration","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","target","onlyValidPropertyName","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","UsingDeclarationExport","UsingDeclarationHasBindingPattern","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","StrictModeErrors","StrictDelete","StrictEvalArguments","referenceName","StrictEvalArgumentsBinding","bindingName","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","UnparenthesizedPipeBodyDescriptions","Set","PipelineOperatorErrors","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","token","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","defineHidden","obj","value","Object","defineProperty","enumerable","configurable","toParseErrorConstructor","toMessage","reasonCode","syntaxPlugin","hasMissingPlugin","oldReasonCodes","AccessorCannotDeclareThisParameter","AccessorCannotHaveTypeParameters","ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference","SetAccessorCannotHaveOptionalParameter","SetAccessorCannotHaveRestParameter","SetAccessorCannotHaveReturnType","loc","details","error","SyntaxError","pos","clone","overrides","_overrides$loc","assign","get","set","writable","ParseErrorEnum","argument","Array","isArray","parseErrorTemplates","ParseErrorConstructors","keys","template","_ref","rest","_objectWithoutPropertiesLoose","_excluded","Errors","toUnenumerable","object","toESTreeLocation","estree","superClass","ESTreeParserMixin","parse","file","options","tokens","parseRegExpLiteral","pattern","flags","regex","RegExp","_","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","_unused","bigint","String","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","expression","raw","extra","expressionValue","stmt","rawValue","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","params","isValidDirective","_stmt$expression$extr","parenthesized","parseBlockBody","allowDirectives","topLevel","afterBlockParse","directiveStatements","directives","d","body","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","push","parsePrivateName","getPluginOption","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","computed","finishNode","nameIsConstructor","parseClassProperty","args","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startLoc","refExpressionErrors","isValidLVal","isUnparenthesizedInAssign","binding","isAssignable","isBinding","toAssignable","isLHS","classScope","usePrivateName","toAssignableObjectExpressionProp","isLast","raise","finishCallExpression","unfinished","optional","callee","_ref2","source","arguments","attributes","toReferencedArguments","parseExport","decorators","exportStartLoc","state","lastTokStartLoc","exported","specifiers","length","_declaration$decorato","declaration","resetStartLocation","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","isOptionalMemberExpression","hasPropertyAsPrivateName","isObjectMethod","finishNodeAt","endLoc","resetEndLocation","lastTokEndLoc","TokContext","preserveSpace","types","brace","j_oTag","j_cTag","j_expr","beforeExpr","startsExpr","isLoop","isAssign","postfix","ExportedTokenType","label","conf","rightAssociative","binop","updateContext","keywords","Map","createKeyword","createToken","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","_options$binop","_options$beforeExpr","_options$startsExpr","_options$prefix","createKeywordLike","_options$binop2","_options$beforeExpr2","_options$startsExpr2","_options$prefix2","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","at","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","doubleCaret","doubleAt","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","bitShiftL","bitShiftR","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_defer","_from","_get","_let","_meta","_of","_sent","_set","_source","_static","_using","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_satisfies","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","placeholder","string","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","tokenIsTemplate","getExportedToken","context","pop","tc","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","i","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","has","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","next2","reservedWordLikeSet","canBeReservedWord","Scope","names","firstLexicalName","ScopeHandler","parser","scopeStack","undefinedExports","inTopLevel","currentScope","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClass","inClassAndNotInNonArrowFunction","inStaticBlock","ScopeFlag","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","maybeExportDefined","delete","isRedeclaredInScope","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","add","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","sourceToOffsetPos","sourcePos","startIndex","offsetToSourcePos","offsetPos","hasPlugin","pluginConfig","plugins","pluginName","pluginOptions","actualOptions","plugin","_this$plugins$get","setTrailingComments","comments","trailingComments","undefined","unshift","setLeadingComments","leadingComments","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","CommentsParser","addComment","comment","commentsLen","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","commentStart","input","charCodeAt","properties","finalizeRemainingComments","resetPreviousNodeTrailingComments","resetPreviousIdentifierLeadingComments","takeSurroundingComments","lineBreak","lineBreakG","isNewLine","hasNewLine","skipWhiteSpace","skipWhiteSpaceInLine","isWhitespace","State","curLine","lineStart","errors","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","topicContext","maxNumOfResolvableTopics","maxTopicIndex","labels","ct","firstInvalidTemplateEscapePos","strictErrors","tokensLength","v","init","strictMode","sourceType","startLine","startColumn","maybeInArrowParameters","inType","noAnonFunctionType","hasFlowComment","isAmbientContext","inAbstractClass","inDisallowConditionalTypesContext","soloAwait","inFSharpPipelineDirectBody","canStartJSXElement","containsEsc","hasTopLevelAwait","curPosition","slice","isDigit","forbiddenNumericSeparatorSiblings","decBinOct","hex","isAllowedNumericSeparatorSibling","bin","ch","oct","dec","readStringContents","initialPos","initialLineStart","initialCurLine","out","firstInvalidLoc","chunkStart","unterminated","isStringEnd","res","readEscapedChar","str","containsInvalid","inTemplate","throwOnInvalid","readHexChar","readCodePoint","fromCodePoint","strictNumericEscape","startPos","match","exec","octalStr","octal","parseInt","len","forceLen","n","readInt","invalidEscapeSequence","allowNumSeparator","bailOnError","forbiddenSiblings","isAllowedSibling","invalid","total","e","Infinity","val","prev","numericSeparatorInEscapeSequence","Number","isNaN","unexpectedNumericSeparator","_isDigit","invalidDigit","indexOf","invalidCodePoint","buildPosition","VALID_REGEX_FLAGS","Token","Tokenizer","isLookahead","errorHandlers_readInt","errorRecovery","errorBuilder","errorHandlers_readCodePoint","errorHandlers_readStringContents_string","recordStrictModeErrors","errorHandlers_readStringContents_template","pushToken","checkKeywordEscapes","nextToken","eat","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lastIndex","lookaheadCharCode","nextTokenInLineStart","nextTokenInLineStartSince","lookaheadInLineCharCode","codePointAtPos","cp","trail","setStrict","forEach","toParseError","clear","skipSpace","finishToken","getTokenFromCode","skipBlockComment","skipLineComment","startSkip","spaceStart","loop","attachComment","annexB","commentWhitespace","prevType","replaceToken","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","proposal","topicToken","lookaheadCh","codePointAt","readToken_atSign","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","readTemplateToken","readRadixNumber","readString","readWord","readRegexp","escaped","content","mods","char","includes","isBigInt","replace","startsWithDot","isFloat","hasExponent","isOctal","hasLeadingZero","integer","underscorePos","isDecimal","parseFloat","quote","readTemplateContinuation","opening","firstCode","escStart","identifierCheck","esc","keywordTypes","raiseOverwrite","expectOnePlugin","pluginNames","some","ClassScope","privateNames","loneAccessors","undefinedPrivateNames","ClassScopeHandler","stack","oldClassScope","from","declarePrivateName","elementType","redefined","accessor","oldStatic","newStatic","oldKind","newKind","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","declarationErrors","recordDeclarationError","ParsingErrorClass","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","origin","recordArrowParameterBindingError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","addExtra","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssignLoc","doubleProtoLoc","privateKeyLoc","optionalParametersLoc","hasErrors","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","checkDestructuringPrivate","ExpressionErrors","Node","ranges","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","startNodeAt","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","reservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","memberName","enumName","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","invalidEnumType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","explicitType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","suggestion","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitialized","GetterMayNotHaveThisParam","ImportReflectionHasImportType","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","unsupportedExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","hasTypeImportKind","importKind","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flow","FlowParserMixin","flowPragma","shouldParseTypes","matches","Error","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloLoc","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","this","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","exportKind","flowParseTypeAnnotation","finished","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","flowParseInterfaceExtends","implements","mixins","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStartLoc","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStartLoc","inexactStartLoc","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","proto","flowCheckGetterSetterParams","paramCount","_startLoc","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatementLike","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","_node$extra","toAssignableList","trailingCommaLoc","checkParams","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","left","exprList","toReferencedList","isParenthesizedExpr","_expr$extra","parseArrayLike","close","canBePattern","isTuple","isParenthesized","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","parseFunctionParamType","parseMaybeDefault","checkImportReflection","module","parseImportSpecifierLocal","specifier","local","finishImportSpecifier","isPotentialImportPhase","isExport","applyImportPhase","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","parseVarId","decl","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","_jsx","jsx","currentContext","_jsx2","_jsx3","abort","_arrowExpression$extr","arrowExpression","maybeUnwrapTypeCastExpression","async","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","strictModeChanged","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewCallee","targs","parseArrowExpression","parseTopLevel","program","fileNode","skipFlowComment","hasFlowCommentCompletion","commentSkip","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","flowEnumErrorInvalidMemberInitializer","enumContext","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitialized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","toUpperCase","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","afterNext","entities","__proto__","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","openingTagName","MissingClosingTagFragment","UnexpectedSequenceExpression","HTMLEntity","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","getQualifiedJSXName","namespace","JSXParserMixin","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","codePoint","count","desc","entity","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","setContext","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","previousContext","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","newContext","TypeScriptScope","tsNames","TypeScriptScopeHandler","importsStack","hasImport","allowShadow","isConst","wasConst","unwrapParenthesizedExpression","LValParser","_node$extra3","last","_node$extra2","operator","arg","checkToRestConversion","elt","element","toReferencedListDeep","parseSpread","parseRestBinding","parseBindingList","ParseBindingListFlags","parseObjectLike","closeCharCode","allowEmpty","elts","checkCommaAfterRest","parseDecorator","parseAssignableListItem","parseBindingRestProperty","parseBindingProperty","parsePropertyName","_left","checkLVal","checkClashes","hasParenthesizedAncestor","_expression$extra","checkIdentifier","validity","ParseErrorClass","isParenthesizedExpression","nextAncestor","child","declareNameFromIdentifier","identifier","allowPattern","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","methodName","AbstractPropertyHasInitializer","propertyName","AccessorCannotBeOptional","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","modifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","modifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InitializerNotAllowedInAmbientContext","InvalidModifierOnTypeMember","InvalidModifierOnTypeParameter","InvalidModifierOnTypeParameterPositions","InvalidModifiersOrder","orderedModifiers","InvalidPropertyAccessAfterInstantiationExpression","InvalidTupleMemberLabel","MissingInterfaceName","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SingleTypeParameterWithoutTrailingComma","typeParameterName","StaticBlockCannotHaveModifier","TupleOptionalAfterType","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","tsIsVarianceAnnotations","typescript","TypeScriptParserMixin","tsParseInOutModifiers","tsParseModifiers","bind","allowedModifiers","disallowedModifiers","errorTemplate","tsParseConstModifier","tsParseInOutConstModifiers","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenOnSameLineAndCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","modified","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","trailingCommaPos","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","parseModifiers","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsFillSignature","returnToken","signature","returnTokenRequired","paramsKey","returnTypeKey","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","parameters","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedType","tsExpectThenParseType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","elementNode","labeled","isWord","chAfterWord","wordName","typeOrLabel","tsParseNonArrayType","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsInAllowConditionalTypesContext","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","parseMaybeUnary","nodeType","tsParseArrayTypeOrHigher","tsParseTypeOperator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","tsParseConstraintForInferType","tsInDisallowConditionalTypesContext","isTypeOperator","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","previousErrorCount","_unused2","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsParseHeritageClause","originalStartLoc","delimitedList","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","oldInDisallowConditionalTypesContext","tsNextThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","maybeDefaultIdentifier","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","tsTryParseAndCatch","tsTryParseDeclare","nany","startType","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsParseTypeArgumentsInExpression","reScan_lt","reScan_lt_gt","tsIsDeclarationStart","override","pp","parameter","isSimpleParameter","tsDisallowOptionalPattern","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorLoc","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","tokenType","_callee$extra","parseExprOp","leftStartLoc","minPrec","isSatisfies","checkKeywords","checkDuplicateExports","importNode","parseMaybeImportPhase","parseImportSpecifiersAndAfter","nodeImportEquals","isAbstractClass","cls","allowMissingInitializer","declarations","isValidAmbientConstInitializer","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","isIdentifier","parseClassPropertyAnnotation","definite","parseClassAccessorProperty","declareClassPrivateMethodInScope","_typeCast","_typeCast2","typeCast","_typeParameters","reportReservedArrowTypeParam","trailingComma","sawUnary","toAssignableParenthesizedExpression","parseMaybeDecoratorArguments","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldStrict","oldInAbstractClass","maybeTakeDecorators","hasBody","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","leftOfAs","rightOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","parseModuleExportName","kindKey","isPossiblyLiteralEnum","expressions","isUncomputedMemberExpressionChain","isNumber","isNegativeNumber","PlaceholderErrors","ClassNameIsRequired","UnexpectedSpace","placeholders","PlaceholdersParserMixin","parsePlaceholder","assertNoSpace","finishPlaceholder","chStartsBindingIdentifier","verifyBreakContinue","isBreak","parseStatementOrSloppyAnnexBFunctionDeclaration","stmtPlaceholder","parseBlock","createNewLexicalScope","parseFunctionId","requireId","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","_specifiers","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","v8intrinsic","V8IntrinsicMixin","parseV8Intrinsic","v8IntrinsicStartLoc","parseIdentifierName","PIPELINE_PROPOSALS","TOPIC_TOKENS","validatePlugins","pluginsMap","decoratorsBeforeExport","allowCallParenthesized","_pluginsMap$get","proposalList","p","tupleSyntaxIsHash","syntaxType","tokenList","moduleAttributesVersionPluginOption","version","deprecatedAssertSyntax","RECORD_AND_TUPLE_SYNTAX_TYPES","missingPlugins","mixinPlugins","mixinPluginNames","createDefaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowNewTargetOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createImportExpressions","createParenthesizedExpressions","getOptions","opts","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","parseMaybeAssignDisallowIn","resultError","_resultError$loc","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","parseMaybeUnaryOrPrivate","op","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","finishedNode","nextOp","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","_body$extra","requiredParentheses","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","isAwait","recordAwaitIfAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","updateExpressionNode","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","addTrailingCommaExtraToNode","parseExprListItem","_call$extra","parseSuper","parseImportMetaProperty","parseImportCall","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","parseTopicReference","pipeProposal","parseModuleExpression","parseAsyncFunctionExpression","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","meta","parseMetaProperty","parseFunction","isSource","innerStartLoc","spreadStartLoc","optionalCommaStartLoc","spreadNodeStartLoc","innerEndLoc","arrowNode","wrapParenthesis","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","elemStart","elem","isTail","endOffset","elemEnd","cooked","tail","curElt","quasis","substitutions","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","_params","finishedProp","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","formalParameters","reservedTest","isAwaitAllowed","delegating","delegate","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","ParamKind","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","backquoteEnd","backquoteEndLoc","startToken","templateValue","templateElementEnd","templateElementEndLoc","endToken","StatementParser","interpreter","parseInterpreterDirective","finishedProgram","stmtToDirective","directiveLiteral","hasFollowingBindingAtom","endCh","chStartsBindingPattern","hasInLineFollowingBindingIdentifierOrBrace","startsUsingForOf","startsAwaitUsing","parseModuleItem","ParseStatementFlag","parseStatementListItem","allowLabeledFunction","parseStatement","allowDeclaration","allowFunctionDeclaration","parseBreakContinueStatement","parseDebuggerStatement","parseDoWhileStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","decoratorsEnabledBeforeExport","maybeDecorators","classNode","exportNode","allowExport","paramsStartLoc","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","startsWithAwaitUsing","starsWithUsingDeclaration","isLetOrUsing","initNode","parseVar","isForIn","parseForIn","startsWithAsync","isForOf","isHangingDeclaration","ParseFunctionFlag","discriminant","cases","cur","sawDefault","isCase","block","handler","clause","finalizer","statementStart","parsedNonDirective","await","isFor","hangingDeclaration","isDeclaration","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","accessorProp","publicMember","parseClassElementName","maybeContextualKw","isPrivate","maybeQuestionTokenStartLoc","pushClassPrivateProperty","pushClassProperty","pushClassAccessorProperty","_member$decorators","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","_node2$declaration","_ref$specifiers","isTypeExport","assertions","nextType","hasFrom","nextAfterFrom","maybeParseImportAttributes","checkJSONModuleImport","checkNames","isDefault","isFrom","_node$specifiers","_declaration$extra","nodes","surrogate","isJSONModuleImport","singleBindingType","_node$assertions","nonDefaultNamedSpecifier","find","phaseIdentifier","isImportPhase","isPrecedingIdImportPhase","parseImportSourceAndAttributes","maybeParseDefaultImportSpecifier","parseNext","_node$specifiers2","parseImportAttributes","attrs","attrNames","parseModuleAttributes","useWith","importSpecifier","Parser","_options","getParser","ast","moduleError","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginList"],"mappings":"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AE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,IAAI,EAAC,EAAE,EAAC,EAAE,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,GAAG,EAAC,IAAI,EAAC,EAAE,EAAC,IAAI,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,IAAI,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,KAAK,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,IAAI,EAAC,EAAE,EAAC,GAAG,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,IAAI,EAAC,CAAC,EAAC,IAAI,CAAC;AAEjkD,MAAMC,qBAAqB,GAAG,CAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,KAAK,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EA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"}