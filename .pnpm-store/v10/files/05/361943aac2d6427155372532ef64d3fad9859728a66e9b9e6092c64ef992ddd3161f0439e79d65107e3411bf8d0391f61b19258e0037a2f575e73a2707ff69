{"version":3,"sources":["../src/locales/ar.ts","../src/formatters.ts","../src/locales/az.ts","../src/locales/bg.ts","../src/locales/bs.ts","../src/locales/ca.ts","../src/locales/cs.ts","../src/locales/da.ts","../src/locales/de.ts","../src/locales/el.ts","../src/locales/en.ts","../src/locales/es.ts","../src/locales/fa.ts","../src/locales/fi.ts","../src/locales/fr.ts","../src/locales/fy.ts","../src/locales/he.ts","../src/locales/hr.ts","../src/locales/hu.ts","../src/locales/id.ts","../src/locales/is.ts","../src/locales/it.ts","../src/locales/ja.ts","../src/locales/kk.ts","../src/locales/ko.ts","../src/locales/lt.ts","../src/locales/lv.ts","../src/locales/mn.ts","../src/locales/nb.ts","../src/locales/nl.ts","../src/locales/pl.ts","../src/locales/pt.ts","../src/locales/ro.ts","../src/locales/ru.ts","../src/locales/sk.ts","../src/locales/sl.ts","../src/locales/sr.ts","../src/locales/sv.ts","../src/locales/tet.ts","../src/locales/tg.ts","../src/locales/th.ts","../src/locales/tr.ts","../src/locales/uk.ts","../src/locales/uz.ts","../src/locales/vi.ts","../src/locales/zh.ts","../src/locales/zh-TW.ts","../src/i18n.ts","../src/index.ts"],"names":["date","name","createMessageName","ui","validation","locale"],"mappings":"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","sourcesContent":["import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on buttons for adding new items.\n   */\n  add: 'إضافة',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'إزالة',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'إزالة الكل',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'عذرا، لم يتم تعبئة جميع الحقول بشكل صحيح.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'إرسال',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'لا يوجد ملف مختار',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'تحرك لأعلى',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'انتقل لأسفل',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'يتم الآن التحميل...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'تحميل المزيد',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: 'التالي',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: 'السابق',\n  /**\n   * Shown when transferring items between lists.\n   */\n  addAllValues: 'أضف جميع القيم',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'إضافة قيم محددة',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'قم بإزالة جميع القيم',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'إزالة القيم المحددة',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'اختر التاريخ',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'تاريخ التغيير',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'أغلق',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'افتح',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `الرجاء قبول ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `يجب أن يكون ${s(name)} بعد ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `يجب أن يكون ${s(name)} في المستقبل.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `يمكن أن يحتوي ${s(name)} على أحرف أبجدية فقط.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `يمكن أن يحتوي ${s(name)} على أحرف وأرقام فقط.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `يمكن أن تحتوي ${s(name)} على أحرف ومسافات فقط.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `يجب أن يحتوي ${s(name)} على أحرف أبجدية.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `يجب أن يحتوي ${s(name)} على أحرف أو أرقام.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `يجب أن يحتوي ${s(name)} على أحرف أو مسافات.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `يجب أن يحتوي ${s(name)} على رمز.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `يجب أن يحتوي ${s(name)} على أحرف كبيرة.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `يجب أن يحتوي ${s(name)} على أحرف صغيرة.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `يجب أن يحتوي ${s(name)} على أرقام.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `يجب أن يكون ${s(name)} رمزًا.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `يمكن أن يحتوي ${s(name)} على أحرف كبيرة فقط.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `يمكن أن يحتوي ${s(name)} على أحرف صغيرة فقط.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `يجب أن يكون ${s(name)} قبل ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `يجب أن يكون ${s(name)} في الماضي.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `تمت تهيئة هذا الحقل بشكل غير صحيح ولا يمكن إرساله.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `يجب أن يكون ${s(name)} ما بين ${a} و ${b}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} غير متطابق.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} ليس تاريخًا صالحًا ، يرجى استخدام التنسيق ${args[0]}`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'تمت تهيئة هذا الحقل بشكل غير صحيح ولا يمكن إرساله'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `يجب أن يكون ${s(name)} بين ${date(args[0])} و ${date(args[1])}`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'الرجاء أدخال بريد إليكتروني صالح.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `لا ينتهي ${s(name)} بـ ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} ليست قيمة مسموح بها.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `يجب أن يكون ${s(name)} حرفًا واحدًا على الأقل.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `يجب أن يكون ${s(name)} أقل من أو يساوي ${max} حرفًا.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `يجب أن يتكون ${s(name)} من الأحرف ${max}.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `يجب أن يكون ${s(name)} أكبر من أو يساوي ${min} حرفًا.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `يجب أن يكون ${s(name)} بين ${min} و ${max} حرفًا.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} ليست قيمة مسموح بها.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `لا يمكن أن يكون أكثر من ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `يجب أن يكون ${s(name)} أقل من أو يساوي ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'لا يسمح بتنسيقات الملفات.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `يجب أن يكون ${s(name)} من النوع: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `لا يمكن أن يكون أقل من ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `يجب أن يكون ${s(name)} على الأقل ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}” ليس ${name} مسموحًا به.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} يجب ان يكون رقماً`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' أو ')} مطلوب.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} مطلوب.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `لا يبدأ ${s(name)} بـ ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `يرجى إدخال عنوان URL صالح.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'التاريخ المحدد غير صالح.',\n}\n\nexport const ar = { ui, validation }\n","/**\n * Given a string, convert it to sentence case.\n *\n * @param str - The string to sentence case.\n *\n * @returns `string`\n *\n * @public\n */\nexport function sentence(str: string): string {\n  return str[0].toUpperCase() + str.substr(1)\n}\n\n/**\n * Creates an oxford-comma separated list of items.\n *\n * @param items - the items to list out.\n * @param conjunction - in the list \"x, y, and z\", \"and\" is the conjunction.\n * Defaults to \"or\".\n *\n * @returns `string`\n *\n * @public\n */\nexport function list(items: string[], conjunction = 'or'): string {\n  return items.reduce((oxford, item, index) => {\n    oxford += item\n    if (index <= items.length - 2 && items.length > 2) {\n      oxford += ', '\n    }\n    if (index === items.length - 2) {\n      oxford += `${items.length === 2 ? ' ' : ''}${conjunction} `\n    }\n    return oxford\n  }, '')\n}\n\n/**\n * Given a string or a date, return a nice human-readable version.\n *\n * @param date - A string or a date.\n *\n * @returns `string`\n *\n * @public\n */\nexport function date(date: string | Date): string {\n  const dateTime = typeof date === 'string' ? new Date(Date.parse(date)) : date\n  if (!(dateTime instanceof Date)) {\n    return '(unknown)'\n  }\n  return new Intl.DateTimeFormat(undefined, {\n    dateStyle: 'medium',\n    timeZone: 'UTC'\n  } as any).format(dateTime)\n}\n\n/**\n * Orders two variables from smallest to largest.\n *\n * @param first - The first number or string.\n * @param second - The second number or string.\n *\n * @returns `[smaller: number | string, larger: number | string]`\n *\n * @public\n */\nexport function order(\n  first: string | number,\n  second: string | number\n): [smaller: number | string, larger: number | string] {\n  return Number(first) >= Number(second) ? [second, first] : [first, second]\n}\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on a button for adding additional items.\n   */\n  add: 'əlavə edin',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'çıxarmaq',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Hamısını silin',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Üzr istəyirik, bütün sahələr düzgün doldurulmayıb.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Təqdim et',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Heç bir fayl seçilməyib',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'yuxarı hərəkət',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Aşağı hərəkət',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Yükləmə...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Daha çox yüklə',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: 'Növbəti',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: 'Əvvəlki',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Bütün dəyərləri əlavə edin',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Seçilmiş dəyərləri əlavə edin',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Bütün dəyərləri sil',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Seçilmiş dəyərləri sil',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Tarixi seçin',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Tarixi dəyişdirin',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'Bağlayın',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Açıq',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `${name} qəbul edin.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} ${date(args[0])} sonra olmalıdır.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} gələcəkdə olmalıdır.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} yalnız əlifba sırası simvollarından ibarət ola bilər.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} yalnız hərf və rəqəmlərdən ibarət ola bilər.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} yalnız hərflərdən və boşluqlardan ibarət ola bilər.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} əlifba sırası simvolları ehtiva etməlidir.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} hərfləri və ya nömrələri ehtiva etməlidir.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} hərfləri və ya boşluqları ehtiva etməlidir.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} simvolu ehtiva etməlidir.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} böyük olmalıdır.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} kiçik olmalıdır.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} nömrələri ehtiva etməlidir.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} simvol olmalıdır.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} yalnız böyük hərfləri ehtiva edə bilər.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} yalnız kiçik hərfləri ehtiva edə bilər.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} ${date(args[0])} əvvəl olmalıdır.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} keçmişdə olmalıdır.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Bu sahə səhv konfiqurasiya edilib və onu təqdim etmək mümkün deyil.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} ${a} və ${b} arasında olmalıdır.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} uyğun gəlmir.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} etibarlı tarix deyil, ${\n        args[0]\n      } formatından istifadə edin`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'Bu sahə səhv konfiqurasiya edilib və onu təqdim etmək mümkün deyil'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} ${date(args[0])} və ${date(args[1])} arasında olmalıdır`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Etibarlı e-poçt ünvanı daxil edin.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} ${list(args)} ilə bitmir.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} icazə verilən dəyər deyil.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} ən azı bir simvol olmalıdır.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} ${max} simvoldan kiçik və ya ona bərabər olmalıdır.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} ${max} simvol uzunluğunda olmalıdır.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} ${min} simvoldan böyük və ya ona bərabər olmalıdır.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)} ${min} və ${max} simvol arasında olmalıdır.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} icazə verilən dəyər deyil.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `${args[0]} ${name}-dən çox ola bilməz.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} ${args[0]} dəyərindən kiçik və ya ona bərabər olmalıdır.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Fayl formatlarına icazə verilmir.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} aşağıdakı tipdə olmalıdır: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `${args[0]} ${name}-dən az ola bilməz.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)} ən azı ${args[0]} olmalıdır.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}” icazə verilən ${name} deyil.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} rəqəm olmalıdır.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' və ya ')} tələb olunur.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} tələb olunur.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} ${list(args)} ilə başlamır.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Xahiş edirik, düzgün URL daxil edin.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'Seçilmiş tarix etibarsızdır.',\n}\n\nexport const az = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on a button for adding additional items.\n   */\n  add: 'Добави',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Премахни',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Премахни всички',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Извинете, не всички полета са попълнени правилно.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Изпрати',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Няма избран файл',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Преместване нагоре',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Преместете се надолу',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Зареждане...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Заредете повече',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: 'Следващ',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: 'Предишен',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Добавете всички стойности',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Добавяне на избрани стойности',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Премахнете всички стойности',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Премахване на избраните стойности',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Избери дата',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Промяна на датата',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'Затвори',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Отворете',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Моля приемете ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} трябва да е след ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} трябва да бъде в бъдещето.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} може да съдържа само букви.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} може да съдържа само букви и цифри.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} може да съдържа само букви и интервали.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} трябва да съдържа азбучни знаци.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} трябва да съдържа букви или цифри.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} трябва да съдържа букви или интервали.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} трябва да съдържа символ.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} трябва да съдържа главни букви.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} трябва да съдържа малки букви.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} трябва да съдържа числа.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} трябва да бъде символ.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} може да съдържа само главни букви.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} може да съдържа само малки букви.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} трябва да е преди ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} трябва да бъде в миналото.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Това поле е конфигурирано неправилно и не може да бъде изпратено`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} трябва да бъде между ${a} и ${b}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} не съвпада.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} е невалидна дата. Моля, използвайте формата ${args[0]}`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'Това поле е конфигурирано неправилно и не може да бъде изпратено'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} трябва да бъде между ${date(args[0])} и ${date(\n      args[1]\n    )}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Моля, въведете валиден имейл адрес.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} не завършва на ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} е неразрешена стойност.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} трябва да има поне един символ.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} трябва да бъде по-малко или равно на ${max} символа.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} трябва да бъде ${max} символи дълго.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} трябва да бъде по-голямо или равно на ${min} символа.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)} трябва да бъде между ${min} и ${max} символа.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} е неразрешена стойност.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `Не може да има повече от ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} трябва да бъде по-малко или равно на ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Не са разрешени никакви файлови формати.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} трябва да бъде от тип: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `Не може да има по-малко от ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)} трябва да бъде поне ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}” е неразрешен ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} трябва да бъде число.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' или ')} изисква се.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} е задължително.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} не започва с ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Моля, въведете валиден URL адрес.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'Избраната дата е невалидна.',\n}\n\nexport const bg = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on a button for adding additional items.\n   */\n  add: 'Dodaj',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Ukloni',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Ukloni sve',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Nažalost, nisu sva polja ispravno popunjena.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Pošalji',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Nije odabran nijedan fajl',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Pomjeri gore',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Pomjeri dole',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Učitavanje...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Učitaj više',\n  /**\n   * Show on buttons that navigate state forward\n   */\n  next: 'Sljedeći',\n  /**\n   * Show on buttons that navigate state backward\n   */\n  prev: 'Prethodni',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Dodajte sve vrijednosti',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Dodajte odabrane vrijednosti',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Uklonite sve vrijednosti',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Uklonite odabrane vrijednosti',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Odaberite datum',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Promjenite datum',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'Zatvori',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Otvoreno',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Molimo prihvatite ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} mora biti poslije ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} mora biti u budućnosti.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} može sadržavati samo abecedne karaktere.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} može sadržavati samo slova i brojeve.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} može sadržavati samo slova i razmake.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} mora sadržavati abecedne karaktere.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} mora sadržavati slova ili brojeve.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} mora sadržavati slova ili razmake.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} mora sadržavati simbol.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} mora sadržavati veliko slovo.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} mora sadržavati malo slovo.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} mora sadržavati brojeve.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} mora biti simbol.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} može sadržavati samo velika slova.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} može sadržavati samo mala slova.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} mora biti prije ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} mora biti u prošlosti.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Ovo polje je pogrešno konfigurirano i ne može se poslati.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} mora biti između ${a} i ${b}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} ne podudara se.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} nije ispravan datum, molimo koristite format ${\n        args[0]\n      }`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'Ovo polje je pogrešno konfigurirano i ne može se poslati'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} mora biti između ${date(args[0])} i ${date(args[1])}`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Molimo Vas da unesete validnu email adresu.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} ne završava sa ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} nije dozvoljena vrijednost.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} mora biti najmanje jedan karakter.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} mora biti manje od ili jednako ${max} karaktera.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} treba imati ${max} karaktera.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} mora biti veći od ili jednak ${min} karaktera.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)} mora biti između ${min} i ${max} karaktera.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} nije dozvoljena vrijednost.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `Ne može imati više od ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} mora biti manji ili jednak ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Nisu dozvoljeni formati datoteka.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} mora biti tipa: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `Ne može imati manje od ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `Mora biti barem ${args[0]} ${name} .`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}” nije dozvoljeno ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} mora biti broj.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' ili ')} je obavezno.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} je obavezno.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} ne počinje sa ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Unesite važeći link.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'Odabrani datum je nevažeći.',\n}\n\nexport const bs = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on a button for adding additional items.\n   */\n  add: 'Afegir',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Eliminar',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Eliminar tot',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Disculpi, no tots els camps estan omplerts correctament.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Enviar',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Cap fitxer triat',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Moure amunt',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Moure avall',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Carregant...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Carregar més',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: 'Següent',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: 'Anterior',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Afegir tots els valors',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Afegeix els valors seleccionats',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Eliminar tots els valors',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Elimina els valors seleccionats',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Trieu la data',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Canviar data',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'Tancar',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Obert',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://docs.formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Si us plau accepti ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://docs.formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} ha de ser posterior a ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} ha de succeïr al futur.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://docs.formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} només pot contenir caràcters alfabètics.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} només pot contenir lletres i números.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} només pot contenir lletres i espais.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} ha de contenir caràcters alfabètics.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} ha de contenir lletres o números.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} ha de contenir lletres o espais.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} ha de contenir símbol.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} ha de contenir majúscules.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} ha de contenir minúscules.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} ha de contenir números.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} ha de ser un símbol.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} només pot contenir lletres majúscules.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} només pot contenir lletres minúscules.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://docs.formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} ha de ser anterior a ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} ha d'estar al passat.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://docs.formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Aquest camp està configurat incorrectament i no pot ésser enviat.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} ha d'estar entre ${a} i ${b}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://docs.formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} no concorda.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://docs.formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} no és una data vàlida, si us plau empri el format ${\n        args[0]\n      }`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'Aquest camp està configurat incorrectament i no pot ésser enviat'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://docs.formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} ha d'estar entre ${date(args[0])} i ${date(args[1])}`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://docs.formkit.com/essentials/validation#email}\n   */\n  email: `Si us plau, entri una adreça d'e-mail vàlida.`,\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://docs.formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} no acaba amb ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://docs.formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} no és un valor acceptat.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://docs.formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} ha de tenir com a mínim un caràcter.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} ha de ser inferior o igual a ${max} caràcters.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} ha de tenir una longitud de ${max} caràcters.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} ha de ser major que o igual a ${min} caràcters.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)} ha d'estar entre ${min} i ${max} caràcters.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://docs.formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} no és un valor permès.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://docs.formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `No pot tenir més de ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} ha de ser menys que o igual a ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://docs.formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'No hi ha cap format de fitxer acceptat.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} ha de ser del tipus: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://docs.formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `No pot tenir menys de ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)} ha de ser com a mínim ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://docs.formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}” no s'accepta com a ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://docs.formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} ha de ser un número.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' o ')} es requereix.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://docs.formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} és obligatori.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://docs.formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} no comença amb ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://docs.formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Si us plau inclogui una url vàlida.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'La data seleccionada no és vàlida.',\n}\n\nexport const ca = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on buttons for adding new items.\n   */\n  add: 'Přidat',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Odebrat',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Odebrat vše',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Pardon, ale ne všechna pole jsou vyplněna správně.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Odeslat',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Žádný soubor nebyl vybrán',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Pohyb nahoru',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Posunout dolů',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Načítání...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Načíst více',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: 'Další',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: 'Předchozí',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Přidat všechny hodnoty',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Přidání vybraných hodnot',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Odstraňte všechny hodnoty',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Odstranění vybraných hodnot',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Zvolte datum',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Změnit datum',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'Zavřít',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Otevřeno',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Prosím, zaškrtněte ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} musí být po ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} musí být v budoucnosti.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} může obsahovat pouze písmena.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} může obsahovat pouze písmena a čísla.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} musí obsahovat abecední znaky.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} musí obsahovat písmena nebo číslice.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} musí obsahovat písmena nebo mezery.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} musí obsahovat symbol.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} musí obsahovat velká písmena.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} musí obsahovat malá písmena.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} musí obsahovat čísla.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} musí být symbol.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} může obsahovat pouze velká písmena.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} může obsahovat pouze malá písmena.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} musí být před ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} musí být v minulosti.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Toto pole bylo špatně nakonfigurováno a nemůže být odesláno.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} musí být mezi ${a} a ${b}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} nejsou shodná.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} není platné datum, prosím, použijte formát ${args[0]}`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'Toto pole bylo špatně nakonfigurováno a nemůže být odesláno.'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} musí být mezi ${date(args[0])} a ${date(args[1])}`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Prosím, zadejte platnou e-mailovou adresu.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} nekončí na ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} není povolená hodnota.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} musí mít nejméně jeden znak.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} může mít maximálně ${max} znaků.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} by mělo být ${max} znaků dlouhé.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} musí obsahovat minimálně ${min} znaků.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)} musí být dlouhé ${min} až ${max} znaků.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} není povolená hodnota.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `Nelze použít více než ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} musí mít menší nebo rovno než ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Nejsou nakonfigurovány povolené typy souborů.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} musí být typu: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `Nelze mít méně než ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)} musí být minimálně ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}” není dovolená hodnota pro ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} musí být číslo.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' nebo ')} je vyžadován.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} je povinné.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} nezačíná na ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Zadejte prosím platnou adresu URL.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'Vybrané datum je neplatné.',\n}\n\nexport const cs = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on buttons for adding new items.\n   */\n  add: 'Tilføj',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Fjern',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Fjern alle',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Alle felter er ikke korrekt udfyldt.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Send',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Ingen filer valgt',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Flyt op',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Flyt ned',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Indlæser...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Indlæs mere',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: 'Næste',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: 'Forrige',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Tilføj alle værdier',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Tilføj valgte værdier',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Fjern alle værdier',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Fjern valgte værdier',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Vælg dato',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Skift dato',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'Luk',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Åbn',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Accepter venligst ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} skal være senere end ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} skal være i fremtiden.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} kan kun indeholde bogstaver.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} kan kun indeholde bogstaver og tal.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} kan kun indeholde bogstaver og mellemrum.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} skal indeholde alfabetiske tegn.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} skal indeholde bogstaver eller tal.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} skal indeholde bogstaver eller mellemrum.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} skal indeholde symbol.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} skal indeholde store bogstaver.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} skal indeholde små bogstaver.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} skal indeholde tal.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} skal være et symbol.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} kan kun indeholde store bogstaver.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} kan kun indeholde små bogstaver.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} skal være før ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} skal være før i dag.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Dette felt er ikke konfigureret korrekt og kan derfor ikke blive sendt.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} skal være mellem ${a} og ${b}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} matcher ikke.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} er ikke gyldig, brug venligst formatet ${args[0]}`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'Dette felt er ikke konfigureret korrekt og kan derfor ikke blive sendt.'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} skal være mellem ${date(args[0])} og ${date(args[1])}`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Indtast venligst en gyldig email-adresse.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} slutter ikke med ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} er ikke en gyldig værdi.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} skal være på mindst ét tegn.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} skal være på højst ${max} tegn.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} skal være ${max} tegn lange.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} skal være på mindst ${min} tegn.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)} skal være på mindst ${min} og højst ${max} tegn.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} er ikke en gyldig værdi.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `Kan ikke have flere end ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} skal være mindre eller lig med ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Ingen filformater tilladt.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} skal være af filtypen: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `Kan ikke have mindre end ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)} skal være mindst ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}” er ikke en tilladt ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} skal være et tal.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' eller ')} er påkrævet.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} er påkrævet.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} starter ikke med ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Indtast en gyldig URL.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'Den valgte dato er ugyldig.',\n}\n\nexport const da = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on buttons for adding new items.\n   */\n  add: 'Hinzufügen',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Entfernen',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Alles entfernen',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Entschuldigung, nicht alle Felder wurden korrekt ausgefüllt.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Senden',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Keine Datei ausgewählt',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Gehe nach oben',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Gehen Sie nach unten',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Wird geladen...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Mehr laden',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: 'Weiter',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: 'Zurück',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Alle Werte hinzufügen',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Ausgewählte Werte hinzufügen',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Alle Werte entfernen',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Ausgewählte Werte entfernen',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Datum wählen',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Datum ändern',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'Schliessen',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Offen',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Bitte ${name} akzeptieren.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} muss nach dem ${date(args[0])} liegen.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} muss in der Zukunft liegen.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} darf nur Buchstaben enthalten.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} darf nur Buchstaben und Zahlen enthalten.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} dürfen nur Buchstaben und Leerzeichen enthalten.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} muss alphabetische Zeichen enthalten.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} muss Buchstaben oder Zahlen enthalten.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} muss Buchstaben oder Leerzeichen enthalten.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} muss ein Symbol enthalten.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} muss Großbuchstaben enthalten.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} muss Kleinbuchstaben enthalten.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} muss Zahlen enthalten.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} muss ein Symbol sein.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} kann nur Großbuchstaben enthalten.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} kann nur Kleinbuchstaben enthalten.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} muss vor dem ${date(args[0])} liegen.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} muss in der Vergangenheit liegen.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Dieses Feld wurde falsch konfiguriert und kann nicht übermittelt werden.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} muss zwischen ${args[0]} und ${args[1]} sein.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} stimmt nicht überein.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} ist kein gültiges Datum im Format ${args[0]}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'Dieses Feld wurde falsch konfiguriert und kann nicht übermittelt werden.'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} muss zwischen ${date(args[0])} und ${date(\n      args[1]\n    )} liegen.`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'E-Mail Adresse ist ungültig.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} endet nicht mit ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} enthält einen ungültigen Wert.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = first <= second ? first : second\n    const max = second >= first ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} muss mindestens ein Zeichen enthalten.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} darf maximal ${max} Zeichen enthalten.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} sollte ${max} Zeichen lang sein.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} muss mindestens ${min} Zeichen enthalten.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)} muss zwischen ${min} und ${max} Zeichen enthalten.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} enthält einen ungültigen Wert.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `Darf maximal ${args[0]} ${name} haben.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} darf maximal ${args[0]} sein.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Keine Dateiformate konfiguriert.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} muss vom Typ ${args[0]} sein.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `Mindestens ${args[0]} ${name} erforderlich.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)} muss mindestens ${args[0]} sein.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}” ist kein gültiger Wert für ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} muss eine Zahl sein.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' oder ')} ist erforderlich.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} ist erforderlich.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} beginnt nicht mit ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Bitte geben Sie eine gültige URL ein.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'Das gewählte Datum ist ungültig.',\n}\n\nexport const de = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on a button for adding additional items.\n   */\n  add: 'Προσθήκη',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Αφαίρεση',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Αφαίρεση όλων',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Λυπούμαστε, υπάρχουν πεδία που δεν έχουν συμπληρωθεί σωστά.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Υποβολή',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Κανένα αρχείο δεν έχει επιλεγεί',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Προς τα επάνω',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Προς τα κάτω',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Φορτώνει...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Φόρτωση περισσότερων',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: 'Επόμενη',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: 'Προηγούμενο',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Προσθήκη όλων των τιμών',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Προσθήκη επιλεγμένων τιμών',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Κατάργηση όλων των τιμών',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Αφαίρεση επιλεγμένων τιμών',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Επιλέξτε ημερομηνία',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Αλλαγή ημερομηνίας',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'Κλείσιμο',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Ανοιχτό',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Παρακαλώ αποδεχτείτε το ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} πρέπει να είναι μετά της ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} πρέπει να είναι στο μέλλον.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} μπορεί να περιέχει μόνο αλφαβητικούς χαρακτήρες.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} μπορεί να περιέχει μόνο γράμματα και αριθμούς.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} μπορεί να περιέχει μόνο γράμματα και κενά.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `Το ${s(name)} πρέπει να περιέχει αλφαβητικούς χαρακτήρες.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `Το ${s(name)} πρέπει να περιέχει γράμματα ή αριθμούς.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} πρέπει να περιέχει γράμματα ή κενά.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `Το ${s(name)} πρέπει να περιέχει το σύμβολο.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `Το ${s(name)} πρέπει να περιέχει κεφαλαία γράμματα.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `Το ${s(name)} πρέπει να περιέχει πεζά γράμματα.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `Το ${s(name)} πρέπει να περιέχει αριθμούς.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `Το ${s(name)} πρέπει να είναι ένα σύμβολο.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `Το ${s(name)} μπορεί να περιέχει μόνο κεφαλαία γράμματα.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `Το ${s(name)} μπορεί να περιέχει μόνο πεζά γράμματα.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} πρέπει να είναι πριν της ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} πρέπει να είναι στο παρελθόν.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Αυτό το πεδίο έχει ρυθμιστεί λανθασμένα και δεν μπορεί να υποβληθεί.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} πρέπει να είναι μεταξύ ${a} και ${b}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} δεν ταιριάζει.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(\n        name\n      )} δεν είναι έγυρη ημερομηνία, παρακαλώ ακολουθήστε την διαμόρφωση ${\n        args[0]\n      }`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'Αυτό το πεδίο έχει ρυθμιστεί λανθασμένα και δεν μπορεί να υποβληθεί'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} πρέπει να είναι μεταξύ ${date(args[0])} και ${date(\n      args[1]\n    )}`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Παρακαλώ πληκτρολογήστε μια έγκυρη email διεύθυνση. ',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} δεν καταλήγει με ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} δεν είναι μια επιτρεπτή τιμή.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} πρέπει να είναι τουλάχιστον ενός χαρακτήρα.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} πρέπει να είναι λιγότεροι ή ίσοι με ${max} χαρακτήρες.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `Το ${s(name)} θα πρέπει να έχει μήκος ${max} χαρακτήρες.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(\n        name\n      )} πρέπει να είναι περισσότεροι ή ίσοι με ${min} χαρακτήρες.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)} πρέπει να είναι μεταξύ ${min} και ${max} χαρακτήρες.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} δεν είναι μια επιτρεπτή τιμή.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `Δεν μπορεί να έχει παραπάνω από ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} πρέπει αν είναι λιγότερο ή ίσο με το ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Δεν επιτρέπονται αρχεία.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} πρέπει να είναι τύπου: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `Δεν μπορεί να είναι λιγότερο από ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)} πρέπει να είναι τουλάχιστον ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}” δεν είναι μια επιτρεπτή ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} πρέπει να είναι αριθμός.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' ή ')} απαιτείται.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} είναι υποχρεωτικό.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} δεν αρχίζει με ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Παρακαλώ εισάγετε ένα έγκυρο URL.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'Η επιλεγμένη ημερομηνία δεν είναι έγκυρη.',\n}\n\nexport const el = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on a button for adding additional items.\n   */\n  add: 'Add',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Remove',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Remove all',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Sorry, not all fields are filled out correctly.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Submit',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'No file chosen',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Move up',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Move down',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Loading...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Load more',\n  /**\n   * Show on buttons that navigate state forward\n   */\n  next: 'Next',\n  /**\n   * Show on buttons that navigate state backward\n   */\n  prev: 'Previous',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Add all values',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Add selected values',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Remove all values',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Remove selected values',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Choose date',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Change date',\n  /**\n   * Shown above error summaries when someone attempts to submit a form with\n   * errors and the developer has implemented `<FormKitSummary />`.\n   */\n  summaryHeader: 'There were errors in your form.',\n  /*\n   * Shown when there is something to close\n   */\n  close: 'Close',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Open',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Please accept the ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} must be after ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} must be in the future.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} can only contain alphabetical characters.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} can only contain letters and numbers.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} can only contain letters and spaces.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} must contain alphabetical characters.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} must contain letters or numbers.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} must contain letters or spaces.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} must contain a symbol.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} must contain an uppercase letter.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} must contain a lowercase letter.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} must contain numbers.`\n    /* </i18n> */\n  },\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} must be a symbol.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} can only contain uppercase letters.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name, args }) {\n    let postfix = ''\n    if (Array.isArray(args) && args.length) {\n      if (args[0] === 'allow_non_alpha') postfix = ', numbers and symbols'\n      if (args[0] === 'allow_numeric') postfix = ' and numbers'\n      if (args[0] === 'allow_numeric_dashes') postfix = ', numbers and dashes'\n    }\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} can only contain lowercase letters${postfix}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} must be before ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} must be in the past.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `This field was configured incorrectly and can’t be submitted.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} must be between ${a} and ${b}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} does not match.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} is not a valid date, please use the format ${args[0]}`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'This field was configured incorrectly and can’t be submitted'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} must be between ${date(args[0])} and ${date(args[1])}`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Please enter a valid email address.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} doesn’t end with ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} is not an allowed value.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} must be at least one character.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} must be less than or equal to ${max} characters.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} should be ${max} characters long.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} must be greater than or equal to ${min} characters.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)} must be between ${min} and ${max} characters.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} is not an allowed value.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `Cannot have more than ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} must be no more than ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'No file formats allowed.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} must be of the type: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `Cannot have fewer than ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)} must be at least ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}” is not an allowed ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} must be a number.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' or ')} is required.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} is required.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} doesn’t start with ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Please enter a valid URL.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'The selected date is invalid.',\n}\n\nexport const en = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on buttons for adding new items.\n   */\n  add: 'Añadir',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Quitar',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Quitar todos',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Discúlpe, los campos no fueron completados correctamente.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Enviar',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Archivo no seleccionado',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Moverse hacia arriba',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Moverse hacia abajo',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Cargando...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Cargar más',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: 'Próximo',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: 'Anterior',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Añadir todos los valores',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Añadir valores seleccionados',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Eliminar todos los valores',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Eliminar los valores seleccionados',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Elige fecha',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Cambiar fecha',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'Cerrar',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Abrir',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Acepte el ${name} por favor.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} debe ser posterior a ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} debe ser una fecha futura.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} debe contener solo caractéres alfabéticos.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} debe ser alfanumérico.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} espacios alfa solo pueden contener letras y espacios.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} debe contener caracteres alfabéticos.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} debe contener letras o números.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} debe contener letras o espacios.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} debe contener un símbolo.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} debe estar en mayúsculas.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} debe contener minúsculas.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} debe contener números.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} debe ser un símbolo.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} solo puede contener letras mayúsculas.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} solo puede contener letras minúsculas.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} debe ser anterior a ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} debe ser una fecha pasada.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `El campo no fue completado correctamente y no puede ser enviado.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} debe estar entre ${a} y ${b}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} no coincide.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} no es una fecha válida, por favor utilice el formato ${\n        args[0]\n      }`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'El campo no fue completado correctamente y no puede ser enviado.'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} debe estar entre ${date(args[0])} y ${date(args[1])}`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Ingrese una dirección de correo electrónico válida por favor.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} no termina con ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} no es un valor permitido.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} debe tener al menos una letra.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} debe tener como máximo ${max} caractéres.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} debe tener ${max} caracteres.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} debe tener como mínimo ${min} caractéres.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)} debe tener entre ${min} y ${max} caractéres.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} no es un valor permitido.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `No puede tener más de ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} debe ser menor o igual a ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'No existen formatos de archivos permitidos.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} debe ser del tipo: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `No puede tener menos de ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)} debe ser de al menos ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}” no es un valor permitido de ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} debe ser un número.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' o ')} se requiere estar.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} es requerido.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} debe comenzar con ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Introduce una URL válida.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'La fecha seleccionada no es válida.',\n}\n\nexport const es = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on buttons for adding new items.\n   */\n  add: 'افزودن',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'حذف',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'همه را حذف کنید',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'همه فیلدها به‌درستی پر نشده‌اند',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'ثبت',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'هیچ فایلی انتخاب نشده است',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'حرکت به بالا',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'حرکت به پایین',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'در حال بارگذاری...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'بارگذاری بیشتر',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: 'بعدی',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: 'قبلی',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'تمام مقادیر را اضافه کنید',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'مقادیر انتخاب شده را اضافه کنید',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'تمام مقادیر را حذف کنید',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'حذف مقادیر انتخاب شده',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'تاریخ را انتخاب کنید',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'تغییر تاریخ',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'بستن',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'باز کردن',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `لطفاً ${name} را بپذیرید.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} باید بعد از تاریخ ${date(args[0])} باشد.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} باید مربوط به آینده باشد.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} فقط میتواند شامل حروف الفبا باشد.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} فقط میتواند شامل حروف و اعداد باشد.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} فقط می تواند شامل حروف و فاصله باشد.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} باید حاوی حروف الفبا باشد.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} باید حاوی حروف یا اعداد باشد.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} باید حاوی حروف یا فاصله باشد.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} باید حاوی نماد باشد.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} باید دارای حروف بزرگ باشد.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} باید حاوی حروف کوچک باشد.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} باید حاوی اعداد باشد.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} باید یک نماد باشد.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} تنها می‌تواند شامل حروف بزرگ باشد.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} تنها می‌تواند شامل حروف کوچک باشد.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} باید قبل از تاریخ ${date(args[0])} باشد.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} باید مربوط به گذشته باشد.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `این فیلد به اشتباه پیکربندی شده است و قابل ارسال نیست`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} باید بین ${args[0]} و ${args[1]} باشد.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} مطابقت ندارد.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} تاریخ معتبری نیست، لطفاً از قالب ${\n        args[0]\n      } استفاده کنید\n`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'این فیلد به اشتباه پیکربندی شده است و قابل ارسال نیست'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} باید بین ${date(args[0])} و ${date(args[1])} باشد.`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'لطفا آدرس ایمیل معتبر وارد کنید.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} باید به ${list(args)} ختم شود.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} مجاز نیست.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = first <= second ? first : second\n    const max = second >= first ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} باید حداقل یک کاراکتر باشد.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} باید کمتر یا برابر با ${max} کاراکتر باشد.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} باید ${max} کاراکتر طولانی باشد.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} باید بزرگتر یا برابر با ${min} کاراکتر باشد.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)} باید بین ${min} و ${max} کاراکتر باشد.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} مجاز نیست.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `${name} نمی تواند بیش از ${args[0]} باشد.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} باید کمتر یا برابر با ${args[0]} باشد.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'فرمت فایل مجاز نیست.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} باید از این نوع باشد: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `${name} نمی تواند کمتر از ${args[0]} باشد.\n`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)} باید حداقل ${args[0]} باشد.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `\"${value}\" یک ${name} مجاز نیست.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} باید عدد باشد.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' یا ')} مورد نیاز است.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `پر کردن ${s(name)} اجباری است.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} باید با ${list(args)} شروع شود.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `لطفا یک URL معتبر وارد کنید.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'تاریخ انتخاب شده نامعتبر است',\n}\n\nexport const fa = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on buttons for adding new items.\n   */\n  add: 'Lisää',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Poista',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Poista kaikki',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Kaikkia kenttiä ei ole täytetty oikein.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Tallenna',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Ei valittuja tiedostoja',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Siirrä ylös',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Siirrä alas',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Ladataan...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Lataa lisää',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: 'Seuraava',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: 'Edellinen',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Lisää kaikki arvot',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Lisää valitut arvot',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Poista kaikki arvot',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Poista valitut arvot',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Valitse päivämäärä',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Vaihda päivämäärä',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'Sulje',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Avoinna',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Ole hyvä ja hyväksy ${name}`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} tulee olla ${date(args[0])} jälkeen.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} on oltava tulevaisuudessa.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} saa sisältää vain kirjaimia.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} saa sisältää vain kirjaimia ja numeroita.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} voivat sisältää vain kirjaimia ja välilyöntejä.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} on sisällettävä aakkoselliset merkit.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} täytyy sisältää kirjaimia tai numeroita.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} täytyy sisältää kirjaimia tai välilyöntejä.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} täytyy sisältää symboli.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} täytyy sisältää isoja kirjaimia.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} täytyy sisältää pieniä kirjaimia.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} täytyy sisältää numeroita.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} on oltava symboli.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} voi sisältää vain isoja kirjaimia.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} voi sisältää vain pieniä kirjaimia.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} tulee olla ennen: ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} on oltava menneisyydessä.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Tämä kenttä on täytetty virheellisesti joten sitä ei voitu lähettää.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} on oltava välillä ${a} - ${b} `\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} ei täsmää.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(\n        name\n      )} ei ole validi päivämäärä, ole hyvä ja syötä muodossa: ${args[0]}`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'Tämä kenttä on täytetty virheellisesti joten sitä ei voitu lähettää.'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} on oltava välillä ${date(args[0])} - ${date(args[1])}`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Syötä validi sähköpostiosoite.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} tulee päättyä ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} ei ole sallittu vaihtoehto.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} on oltava vähintään yksi merkki.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} on oltava ${max} tai alle merkkiä.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} pitäisi olla ${max} merkkiä pitkä.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} on oltava vähintään ${min} merkkiä.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)} on oltava vähintään ${min}, enintään ${max} merkkiä.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} ei ole sallittu arvo.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `Valitse enintään ${args[0]} ${name} vaihtoehtoa.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} on oltava ${args[0]} tai alle.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Tiedostoja ei sallita.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} tulee olla ${args[0]}-tiedostotyyppiä.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `Valitse vähintään ${args[0]} ${name} vaihtoehtoa.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)} tulee olla ${args[0]} tai suurempi.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}” ei ole sallittu ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `Kentän ${s(name)} tulee olla numero.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' tai ')} vaaditaan.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} vaaditaan.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} on alettava ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Anna kelvollinen URL-osoite.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'Valittu päivämäärä on virheellinen.',\n}\n\nexport const fi = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on buttons for adding new items.\n   */\n  add: 'Ajouter',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Supprimer',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Enlever tout',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Désolé, tous les champs ne sont pas remplis correctement.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Valider',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Aucun fichier choisi',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Déplacez-vous',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Déplacez-vous',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Chargement...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Chargez plus',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: 'Suivant',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: 'Précédent',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Ajouter toutes les valeurs',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Ajouter les valeurs sélectionnées',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Supprimer toutes les valeurs',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Supprimer les valeurs sélectionnées',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Choisissez la date',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Modifier la date',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'Fermer',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Ouvrir',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Veuillez accepter le ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} doit être postérieure au ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} doit être dans le futur.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} ne peut contenir que des caractères alphabétiques.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} ne peut contenir que des lettres et des chiffres.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} ne peuvent contenir que des lettres et des espaces.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} doit contenir des caractères alphabétiques.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} doit contenir au moins un lettre ou nombre.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} doit contenir des lettres ou des espaces.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} doit contenir un symbole.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} doit contenir au moins une majuscule.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} doit contenir au moins une minuscule.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} doit contenir des chiffres.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} doit être un symbole.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} ne peuvent contenir que des majuscules.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} ne peut contenir que des lettres minuscules.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} doit être antérieure au ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} doit être dans le passé.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Ce champ a été configuré de manière incorrecte et ne peut pas être soumis.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} doit être comprise entre ${a} et ${b}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} ne correspond pas.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(\n        name\n      )} n'est pas une date valide, veuillez utiliser le format ${args[0]}`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'Ce champ a été configuré de manière incorrecte et ne peut pas être soumis.'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} doit être comprise entre ${date(args[0])} et ${date(\n      args[1]\n    )}`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Veuillez saisir une adresse email valide.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} ne se termine pas par ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} n'est pas une valeur autorisée.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} doit comporter au moins un caractère.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} doit être inférieur ou égal à ${max} caractères.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} doit contenir ${max} caractères.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} doit être supérieur ou égal à ${min} caractères.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)} doit être comprise entre ${min} et ${max} caractères.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} n'est pas une valeur autorisée.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `Ne peut pas avoir plus de ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} doit être inférieur ou égal à ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Aucun format de fichier n’est autorisé'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} doit être du type: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `Ne peut pas avoir moins de ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)} doit être au moins de ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}” n'est pas un ${name} autorisé.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} doit être un nombre.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' ou ')} est requis.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} est requis.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} ne commence pas par ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Entrez une URL valide.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: `La date sélectionnée n'est pas valide.`,\n}\n\nexport const fr = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on a button for adding additional items.\n   */\n  add: 'Foeg ta',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Ferwider',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Ferwider alles',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Sorry, net alle fjilden binne korrekt ynfolle.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Ferstjoere',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Gjin bestân keazen',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Gean omheech',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Nei ûnderen',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Lade…',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Mear lade',\n  /**\n   * Show on buttons that navigate state forward\n   */\n  next: 'Folgende',\n  /**\n   * Show on buttons that navigate state backward\n   */\n  prev: 'Foarige',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Foegje alle wearden ta',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Foegje selektearre wearden ta',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Fuortsmite alle wearden',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Fuortsmite selektearre wearden',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Kies datum',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Feroarje datum',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Akseptearje de ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} moat nei ${date(args[0])} wêze.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} moat yn de takomst lizze.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} mei allinne alfabetyske tekens befetsje.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} mei allinne letters en sifers befetsje.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} mei allinne letters en spaasjes befetsje.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} must contain alphabetical characters.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} must contain letters and numbers.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} must contain letters and spaces.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} must contain symbol.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} must contain uppercase.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} must contain lowercase.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} must contain number.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} can only contain symbol.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} can only contain uppercase.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} can only contain lowercase.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} moat foar ${date(args[0])} falle.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} moat yn it ferline wêze.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Dit fjild is ferkeard konfigurearre en kin net ferstjoerd wurde.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} moat tusken ${a} en ${b} lizze.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} komt net oerien.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} is gjin jildige datum, brûk de notaasje ${args[0]}`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'Dit fjild is ferkeard konfigurearre en kin net ferstjoerd wurde'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} moat tusken ${date(args[0])} en ${date(args[1])} lizze`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Folje in jildich e-mailadres yn.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} einiget net mei ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} is gjin tastiene wearde.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} moat minimaal ien teken wêze.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} moat lytser wêze as of gelyk wêze oan ${max} tekens.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} moat ${max} tekens lang wêze.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} moat grutter wêze as of gelyk wêze oan ${min} tekens.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)} moat tusken de ${min} en ${max} tekens befetsje.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} is gjin tastiene wearde.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `Mei net mear as ${args[0]} ${name} hawwe.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} moat lytser wêze as of gelyk wêze oan ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Gjin bestânsnotaasjes tastien.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} moat fan it type: ${args[0]} wêze`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `Mei net minder as ${args[0]} ${name} hawwe.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)} moat minimaal ${args[0]} wêze.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `\"${value}\" is gjin tastiene ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} moat in getal wêze.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' of ')} is ferplichte.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} is ferplicht.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} begjint net mei ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Doch der in jildige url by.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'De selektearre datum is ûnjildich.',\n}\n\nexport const fy = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on a button for adding additional items.\n   */\n  add: 'הוסף',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'מחק',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'מחק הכל',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'שים לב, לא כל השדות מלאים כראוי.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'שלח',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'לא נבחר קובץ..',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'הזז למעלה',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'הזז למטה',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'טוען...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'טען יותר',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: 'הבא',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: 'הקודם',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'הוסף את כל הערכים',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'הוספת ערכים נבחרים',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'הסר את כל הערכים',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'הסר ערכים נבחרים',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'בחר תאריך',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'שינוי תאריך',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'סגור',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'פתוח',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `אנא אשר את ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} חייב להיות אחרי ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} חייב להיות בעתיד.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} חייב להכיל אותיות אלפבת.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} יכול להכיל רק מספרים ואותיות.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} יכול להכיל רק אותיות ורווחים.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} חייב להכיל תווים אלפביתיים.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} חייב להכיל אותיות או מספרים.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} חייב להכיל אותיות או רווחים.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} חייב להכיל סמל.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} חייב להכיל אותיות רישיות.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} חייב להכיל אותיות קטנות.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} חייב להכיל מספרים.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} חייב להיות סמל.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} יכול להכיל אותיות רישיות בלבד.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} יכול להכיל רק אותיות קטנות.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} חייב להיות לפני ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} חייב להיות בעבר`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `שדה זה לא הוגדר כראוי ולא יכול להישלח.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} חייב להיות בין ${a} ו- ${b}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} לא מתאים.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} הוא לא תאריך תקין, אנא השתמש בפורמט ${args[0]}`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'שדה זה לא הוגדר כראוי ולא יכול להישלח.'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} חייב להיות בין ${date(args[0])} ו- ${date(args[1])}`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'אנא הקלד אימייל תקין.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} לא מסתיים ב- ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} הוא לא ערך מורשה.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} חייב להיות לפחות תו אחד.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} חייב להיות פחות או שווה ל- ${max} תווים.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} צריך להיות ${max} תווים ארוכים.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} חייב להיות גדול או שווה ל- ${min} תווים.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)} חייב להיות בין ${min} ו- ${max} תווים.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} הוא לא ערך תקין.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `${name} לא יכול להיות עם יותר מ- ${args[0]}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} חייב להיות פחות או שווה ל- ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'פורמט הקובץ לא מורשה.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} חייב להיות מסוג: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `${name} לא יכול להיות עם פחות מ- ${args[0]}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)} חייב להיות לפחות ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}” לא מתאים ל- ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} חייב להיות מספר.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' או ')} נדרש.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} הינו חובה.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} לא מתחיל ב- ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `הזן כתובת URL חוקית.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'התאריך שנבחר אינו חוקי.',\n}\n\nexport const he = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on buttons for adding new items.\n   */\n  add: 'Dodaj',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Ukloni',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Pojedina polja nisu ispravno ispunjena.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Predaj',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Pomaknite se gore',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Pomakni se dolje',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Učitavanje...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Učitaj više',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: 'Sljedeći',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: 'prijašnji',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Dodajte sve vrijednosti',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Dodavanje odabranih vrijednosti',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Ukloni sve vrijednosti',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Ukloni odabrane vrijednosti',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Odaberite datum',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Promijeni datum',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'Zatvoriti',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Otvori',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Potrebno je potvrditi ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} mora biti u periodu poslije ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} mora biti u budućnosti.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} mora sadržavati samo slova.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} mora sadržavati slova i brojeve.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} mogu sadržavati samo slova i razmake..`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} mora sadržavati abecedne znakove.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} mora sadržavati slova ili brojeve.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} mora sadržavati slova ili razmake.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} mora sadržavati simbol.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} mora sadržavati velika slova.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} mora sadržavati mala slova.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} mora sadržavati brojeve.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} mora biti simbol.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} može sadržavati samo velika slova.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} može sadržavati samo mala slova.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} mora biti prije ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} mora biti u prošlosti.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Format sadržaja nije ispravan i ne može biti predan.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} mora biti između ${args[0]} i ${args[1]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} ne odgovara zadanoj vrijednosti.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(\n        name\n      )} nije ispravan format datuma. Molimo koristite sljedeći format: ${\n        args[0]\n      }`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'Ovo polje nije ispravno postavljeno i ne može biti predano.'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} mora biti vrijednost između ${date(args[0])} i ${date(\n      args[1]\n    )}`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Molimo upišite ispravnu email adresu.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} ne završava s ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} nije dopuštena vrijednost.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = first <= second ? first : second\n    const max = second >= first ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} mora sadržavati barem jedan znak.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} mora imati ${max} ili manje znakova.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} trebao bi biti dugačak ${max} znakova.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} mora imati barem ${min} znakova.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `Broj znakova za polje ${s(name)} mora biti između ${min} i ${max}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} nije dozvoljena vrijednost.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `Ne smije imati više od ${args[0]} ${name} polja.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} mora imati vrijednost manju ili jednaku ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Format datoteke nije dozvoljen.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `Format datoteke na polju ${s(name)} mora odgovarati: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `Broj upisanih vrijednosti na polju ${name} mora biti barem ${args[0]}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)} mora biti barem ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}” nije dozvoljena vrijednost na polju ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} mora biti broj.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' ili ')} je potreban.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} je obavezno.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} ne počinje s ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Unesite valjanu URL adresu.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'Odabrani datum je nevažeći.',\n}\n\nexport const hr = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on a button for adding additional items.\n   */\n  add: 'Hozzáadás',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Eltávolítás',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Összes eltávolítása',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Sajnáljuk, nem minden mező lett helyesen kitöltve.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Beküldés',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Nincs fájl kiválasztva',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Mozgás felfelé',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Mozgás lefelé',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Betöltés...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Töltsön be többet',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: 'Következő',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: 'Előző',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Adja hozzá az összes értéket',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Kiválasztott értékek hozzáadása',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Távolítsa el az összes értéket',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'A kiválasztott értékek eltávolítása',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Válassza ki a dátumot',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Dátum módosítása',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'Bezárás',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Nyitott',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Fogadja el a ${name} mezőt.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} mezőnek ${date(args[0])} után kell lennie.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} mezőnek a jövőben kell lennie.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} csak alfanumerikus karaktereket tartalmazhat.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} csak betűket és számokat tartalmazhat.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} csak betűket és szóközöket tartalmazhat.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `A ${s(name)} betűrendes karaktereket kell tartalmaznia.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `A ${s(name)} betűket vagy számokat kell tartalmaznia.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `A ${s(name)} betűket vagy szóközöket kell tartalmaznia.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `A ${s(name)} szimbólumot kell tartalmaznia.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `A ${s(name)} nagybetűt kell tartalmaznia.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `A ${s(name)} kisbetűt kell tartalmaznia.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `A ${s(name)} számot kell tartalmaznia.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `A ${s(name)} szimbólumnak kell lennie.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `A ${s(name)} csak nagybetűket tartalmazhat.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `A ${s(name)} csak kisbetűket tartalmazhat.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} mezőnek ${date(args[0])} előtt kell lennie.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} mezőnek a múltban kell lennie.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Ez a mező hibásan lett konfigurálva, így nem lehet beküldeni.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `A ${s(name)} mezőnek ${a} és ${b} között kell lennie.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} nem egyezik.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} nem érvényes dátum, ${args[0]} formátumot használj`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'Ez a mező hibásan lett konfigurálva, így nem lehet beküldeni.'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} mezőnek ${date(args[0])} és ${\n      args[1]\n    } között kell lennie`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Kérjük, érvényes email címet adjon meg.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} mező nem a kijelölt (${list(args)}) módon ér véget.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} nem engedélyezett érték.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} mezőnek legalább egy karakteresnek kell lennie.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} mezőnek maximum ${max} karakteresnek kell lennie.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} ${max} karakter hosszúnak kell lennie.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} mezőnek minimum ${min} karakteresnek kell lennie.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)} mezőnek ${min} és ${max} karakter között kell lennie.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} nem engedélyezett érték.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `Nem lehet több mint ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} nem lehet nagyobb, mint ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Nincsenek támogatott fájlformátumok.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)}-nak/nek a következőnek kell lennie: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `Nem lehet kevesebb, mint ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)}-nak/nek minimum ${args[0]}-nak/nek kell lennie.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `\"${value}\" nem engedélyezett ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} mezőnek számnak kell lennie.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' vagy ')} szükséges.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} mező kötelező.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} nem a következővel kezdődik: ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Kérjük, adjon meg egy érvényes URL-t.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'A kiválasztott dátum érvénytelen.',\n}\n\nexport const hu = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on buttons for adding new items.\n   */\n  add: 'Tambah',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Hapus',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Hapus semua',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Maaf, tidak semua bidang formulir terisi dengan benar',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Kirim',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Tidak ada file yang dipilih',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Pindah ke atas',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Pindah ke bawah',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Memuat...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Muat lebih',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: 'Berikutnya',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: 'Sebelumnya',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Tambahkan semua nilai',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Tambahkan nilai yang dipilih',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Hapus semua nilai',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Hapus nilai yang dipilih',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Pilih tanggal',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Ubah tanggal',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'Tutup',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Buka',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Tolong terima kolom ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} nilainya harus lebih dari waktu ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} harus berisi waktu di masa depan.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} hanya bisa diisi huruf alfabet.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} hanya bisa diisi huruf dan angka.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} hanya boleh berisi huruf dan spasi..`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} harus berisi karakter abjad.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} harus mengandung huruf atau angka.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} harus berisi huruf atau spasi.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} harus berisi simbol.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} harus berisi huruf besar.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} harus berisi huruf kecil.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} harus berisi angka.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} harus berupa simbol.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} hanya dapat berisi huruf besar.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} hanya dapat berisi huruf kecil.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} nilainya harus kurang dari waktu ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} harus berisi waktu yang sudah lampau.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Kolom ini tidak diisi dengan benar sehingga tidak bisa dikirim`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} harus bernilai diantara ${a} dan ${b}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} nilainya tidak cocok.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} waktu tidak cocok, mohon gunakan format waktu ${\n        args[0]\n      }`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'Kolom ini tidak diisi dengan benar sehingga tidak bisa dikirim'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} harus diantara waktu ${date(args[0])} dan waktu ${date(\n      args[1]\n    )}`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Tolong tulis alamat email yang benar.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} nilainya tidak berakhiran dengan ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} adalah nilai yang tidak diizinkan.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} nilainya setidaknya berisi satu karakter.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(\n        name\n      )} jumlah karakternya harus kurang dari atau sama dengan ${max} karakter.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} harus ${max} karakter panjang.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(\n        name\n      )} jumlah karakternya harus lebih dari atau sama dengan ${min} karakter.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(\n      name\n    )} jumlah karakternya hanya bisa antara ${min} dan ${max} karakter.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} nilainya tidak diizinkan.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `Tidak bisa memiliki lebih dari ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} harus lebih kecil atau sama dengan ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Format file tidak diizinkan'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} hanya bisa bertipe: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `Tidak boleh kurang dari ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)} setidaknya harus berisi ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}” adalah nilai yang tidak diperbolehkan untuk ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} harus berupa angka.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' atau ')} diperlukan`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} harus diisi.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} tidak dimulai dengan ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Harap masukkan URL yang valid.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'Tanggal yang dipilih tidak valid.',\n}\n\nexport const id = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on a button for adding additional items.\n   */\n  add: 'Bæta við',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Fjarlægja',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Fjarlægja allt',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Því miður, það er ekki búið að fylla rétt inn í alla reiti.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Senda',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Engin skrá valin',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Færa upp',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Færa niður',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Hleðsla...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Sækja meira',\n  /**\n   * Show on buttons that navigate state forward\n   */\n  next: 'Áfram',\n  /**\n   * Show on buttons that navigate state backward\n   */\n  prev: 'Til baka',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Bæta við öllum gildum',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Bæta við völdum gildum',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Fjarlægja öll gildi',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Fjarlægja valin gildi',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Velja dagsetningu',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Breyta dagsetningu',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'Loka',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Opið',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Vinsamlegast samþykktu ${name}`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} þarf að vera eftir ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} þarf að vera í framtíðinni.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} má einungis innihalda bókstafi.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} má einungis innihalda bókstafi og tölur.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} má einungis innihalda bókstafi og bil.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} verður að innihalda bókstafi.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} verður að innihalda bókstafi eða tölur.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} verður að innihalda bókstafi eða bil.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} verður að innihalda tákn.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} verður að innihalda hástaf.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} verður að innihalda lágstaf.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} verður að innihalda tölur.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} verður að vera tákn.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} má einungis innihalda hástafi.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} má einungis innihalda lágstafi.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} þarf að vera á undan ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} þarf að vera liðin.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Þessi reitur var ekki rétt stilltur.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} þarf að vera á milli ${a} og ${b}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} passar ekki.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(\n        name\n      )} er ekki gild dagsetning, vinsamlegast hafið dagsetninguna í formi ${\n        args[0]\n      }`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'Þessi reitur var ekki rétt stilltur'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} þarf að vera á milli ${date(args[0])} og ${date(\n      args[1]\n    )}`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Vinsamlegast sláðu inn gilt netfang.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} endar ekki á ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} er ekki leyfilegt gildi.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} þarf að vera að minnsta kosti einn stafur.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} þarf að vera færri en eða nákvæmlega ${max} stafir.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} þarf að vera ${max} stafir að lengd.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} þarf að vera fleiri en eða nákvæmlega ${min} stafir.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)} þarf að vera á milli ${min} og ${max} stafir.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} er ekki leyfilegt gildi.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `Ekki hægt að hafa fleiri en ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} þarf að vera minna en eða nákvæmlega ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Ekki leyfileg tegund skráar.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} þarf að vera af tegundinni: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `Ekki hægt að hafa færri en ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `Þarf að vera að minnsta kosti ${args[0]} ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}” er ekki leyfilegt fyrir ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} þarf að vera tala.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' or ')} is required.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} er skilyrt.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} byrjar ekki á ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Vinsamlegast sláðu inn gilda slóð.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'Valin dagsetning er ógild',\n}\n\nexport const is = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on buttons for adding new items.\n   */\n  add: 'Inserisci',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Rimuovi',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Rimuovi tutti',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Ci dispiace, non tutti i campi sono compilati correttamente.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Invia',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Nessun file selezionato',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Sposta in alto',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Sposta giù',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Caricamento...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Carica altro',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: 'Prossimo',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: 'Precedente',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Aggiungi tutti i valori',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Aggiungi valori selezionati',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Rimuovi tutti i valori',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Rimuovi i valori selezionati',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Scegli la data',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Cambia data',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'Chiudi',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Aperta',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Si prega di accettare ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `la data ${s(name)} deve essere successiva ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `la data ${s(name)} deve essere nel futuro.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} può contenere solo caratteri alfanumerici.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} può contenere solo lettere e numeri.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} può contenere solo lettere e spazi.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} deve contenere caratteri alfabetici.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} deve contenere lettere o numeri.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} deve contenere lettere o spazi.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} deve contenere un simbolo.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} must contain uppercase.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} deve contenere lettere minuscole.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} deve contenere numeri.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} deve essere un simbolo.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} può contenere solo lettere maiuscole.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} può contenere solo lettere minuscole.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `la data ${s(name)} deve essere antecedente ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} deve essere nel passato.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Questo campo è stato configurato male e non può essere inviato.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} deve essere tra ${a} e ${b}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} non corrisponde.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} non è una data valida, per favore usa il formato ${\n        args[0]\n      }`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'Questo campo è stato configurato in modo errato e non può essere inviato.'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} deve essere tra ${date(args[0])} e ${date(args[1])}`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Per favore inserire un indirizzo email valido.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} non termina con ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} non è un valore consentito.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} deve contenere almeno un carattere.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} deve essere minore o uguale a ${max} caratteri.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} deve contenere ${max} caratteri.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} deve essere maggiore o uguale a ${min} caratteri.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)} deve essere tra ${min} e ${max} caratteri.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} non è un valore consentito.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `Non può avere più di ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} deve essere minore o uguale a ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Formato file non consentito.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} deve essere di tipo: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `Non può avere meno di ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)} deve essere almeno ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `\"${value}\" non è un ${name} consentito.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} deve essere un numero.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' o ')} è richiesto.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} è richiesto.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} non inizia con ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Inserisci un URL valido.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'La data selezionata non è valida.',\n}\n\nexport const it = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on buttons for adding new items.\n   */\n  add: '追加',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: '削除',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: '全て削除',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: '項目が正しく入力されていません。',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: '送信',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'ファイルが選択されていません',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: '上に移動',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: '下へ移動',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: '読み込み中...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'さらに読み込む',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: '[次へ]',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: '前へ',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'すべての値を追加',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: '選択した値を追加',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'すべての値を削除',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: '選択した値を削除',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: '日付を選択',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: '日付を変更',\n  /**\n   * Shown when there is something to close\n   */\n  close: '閉じる',\n  /**\n   * Shown when there is something to open.\n   */\n  open: '[開く]',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `${name}の同意が必要です。`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)}は${date(args[0])}より後の日付である必要があります。`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)}は将来の日付でなければなりません。`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)}には英字のみを含めることができます。`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)}には、文字と数字のみを含めることができます。`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)}には、文字とスペースのみを含めることができます。`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} にはアルファベット文字が含まれている必要があります。`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} には文字または数字を含める必要があります。`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} には文字またはスペースを含める必要があります。`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} には記号が含まれている必要があります。`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} には大文字を含める必要があります。`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} には小文字を含める必要があります。`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} には数字が含まれている必要があります。`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} はシンボルでなければなりません。`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} には大文字しか使用できません`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} には小文字しか使用できません。`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)}は${date(args[0])}より前の日付である必要があります。`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)}は過去の日付である必要があります。`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `このフィールドは正しく構成されていないため、送信できません。`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)}は${a}と${b}の間にある必要があります。`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)}が一致しません。`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)}は有効な日付ではありません。${\n        args[0]\n      }の形式を使用してください。`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'このフィールドは正しく構成されておらず、送信できません。'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)}は${date(args[0])}と${date(\n      args[1]\n    )}の間にある必要があります。`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: '有効なメールアドレスを入力してください。',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)}は${list(args)}で終わっていません。`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)}は許可された値ではありません。`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)}は少なくとも1文字である必要があります。`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)}は${max}文字以下である必要があります。`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} の長さは ${max} 文字でなければなりません。`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)}は${min}文字以上である必要があります。`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)}は${min}から${max}文字の間でなければなりません。`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)}は許可された値ではありません。`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `${name}は${args[0]}を超えることはできません。`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)}は${args[0]}以下である必要があります。`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'ファイル形式は許可されていません。'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)}は${args[0]}である必要があります。`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `${name}は${args[0]}未満にすることはできません。`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)}は少なくとも${args[0]}である必要があります。`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}”は許可された${name}ではありません。`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)}は数値でなければなりません。`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join('または')}${labels}が必要です。`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)}は必須です。`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)}は${list(args)}で始まっていません。`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `有効な URL を入力してください。`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: '選択した日付は無効です。',\n}\n\nexport const ja = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on a button for adding additional items.\n   */\n  add: 'қосу',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Жою',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Барлығын жою',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Кешіріңіз, барлық өрістер дұрыс толтырылмаған.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Жіберу',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Ешбір файл таңдалмады',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Жоғары жылжу',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Төмен жылжытыңыз',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Жүктеу...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Көбірек жүктеңіз',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: 'Келесі',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: 'Алдыңғы',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Барлық мәндерді қосыңыз',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Таңдалған мәндерді қосыңыз',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Барлық мәндерді алып тастаңыз',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Таңдалған мәндерді алып тастаңыз',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Күнді таңдаңыз',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Өзгерту күні',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'Жабу',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Ашық',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `қабылдаңыз ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} кейін болуы керек ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} болашақта болуы керек.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} тек алфавиттік таңбаларды қамтуы мүмкін.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} тек әріптер мен сандардан тұруы мүмкін.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} тек әріптер мен бос орындар болуы мүмкін.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} алфавиттік таңбалардан тұруы керек.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} құрамында әріптер немесе сандар болуы керек.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} құрамында әріптер немесе бос орындар болуы керек.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} символы болуы керек.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} құрамында бас әріптер болуы керек.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} кіші әріп болуы керек.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} сандардан тұруы керек.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} символы болуы керек.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} тек бас әріптерден тұруы мүмкін.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} құрамында тек кіші әріптер болуы мүмкін.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} бұрын болуы керек ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} өткенде болуы керек.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Бұл өріс қате конфигурацияланған және оны жіберу мүмкін емес.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} арасында болуы керек ${a} және ${b}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} сәйкес келмейді.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} жарамды күн емес, пішімді пайдаланыңыз ${args[0]}`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'Бұл өріс қате конфигурацияланған және оны жіберу мүмкін емес'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} арасында болуы керек ${date(args[0])} және ${date(\n      args[1]\n    )}`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Өтінеміз қолданыстағы электронды пошта адресін енгізіңіз.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} -мен бітпейді ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} рұқсат етілген мән емес.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} кем дегенде бір таңба болуы керек.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} кем немесе тең болуы керек ${max} кейіпкерлер.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} ${max} таңбалары болуы керек.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} артық немесе тең болуы керек ${min} кейіпкерлер.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)} арасында болуы керек ${min} және ${max} кейіпкерлер.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} рұқсат етілген мән емес.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `артық болуы мүмкін емес ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} кем немесе тең болуы керек ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Файл пішімдері рұқсат етілмейді.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} типте болуы керек: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `кем болуы мүмкін емес ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)} кем дегенде болуы керек ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}” рұқсат етілмейді ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} сан болуы керек.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' не ')} қажет.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} талап етіледі.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} -ден басталмайды ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Жарамды URL мекенжайын енгізіңіз.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'Таңдалған күн жарамсыз.',\n}\n\nexport const kk = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on buttons for adding new items.\n   */\n  add: '추가',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: '제거',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: '모두 제거',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: '모든 값을 채워주세요',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: '제출하기',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: '선택된 파일이 없습니다',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: '위로 이동',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: '아래로 이동',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: '로드 중...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: '더 불러오기',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: '다음',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: '이전',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: '모든 값 추가',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: '선택한 값 추가',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: '모든 값 제거',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: '선택한 값 제거',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: '날짜 선택',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: '날짜 변경',\n  /**\n   * Shown when there is something to close\n   */\n  close: '닫기',\n  /**\n   * Shown when there is something to open.\n   */\n  open: '열기',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `${name} 올바른 값을 선택 해주세요`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} ${date(args[0])} 이후여야 합니다`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} 미래의 날짜여야합니다`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} 알파벳 문자만 포함할 수 있습니다`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} 문자와 숫자만 포함될 수 있습니다`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} 문자와 공백만 포함할 수 있습니다.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} 에는 알파벳 문자가 포함되어야 합니다.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} 에는 문자나 숫자가 포함되어야 합니다.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} 에는 문자나 공백이 포함되어야 합니다.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} 에는 기호를 포함해야 합니다.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} 는 대문자를 포함해야 합니다.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} 는 소문자를 포함해야 합니다.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} 에는 숫자가 포함되어야 합니다.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} 는 기호여야 합니다.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} 는 대문자만 포함할 수 있습니다.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} 는 소문자만 포함할 수 있습니다.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} ${date(args[0])} 이전여야 합니다`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} 과거의 날짜여야합니다`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `잘못된 구성으로 제출할 수 없습니다`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} ${a}와 ${b} 사이여야 합니다`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} 일치하지 않습니다`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} 유효한 날짜가 아닙니다. ${\n        args[0]\n      }과 같은 형식을 사용해주세요`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return '잘못된 구성으로 제출할 수 없습니다'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} ${date(args[0])}에서 ${date(args[1])} 사이여야 합니다`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: '올바른 이메일 주소를 입력해주세요',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} ${list(args)}로 끝나지 않습니다`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} 허용되는 값이 아닙니다`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} 하나 이상의 문자여야 합니다`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} ${max}자 이하여야 합니다`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} 는 ${max} 자 길이여야 합니다.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} ${min} 문자보다 크거나 같아야 합니다`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)} ${min}에서 ${max}자 사이여야 합니다`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} 허용되는 값이 아닙니다`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `${args[0]} ${name} 초과할 수 없습니다`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} ${args[0]}보다 작거나 같아야 합니다`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return '파일 형식이 허용되지 않습니다'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} ${args[0]} 유형이어야 합니다`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `${args[0]} ${name}보다 작을 수 없습니다`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)} ${args[0]} 이상이어야 합니다`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `${value}\" 허용되지 않는 ${name}입니다`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} 숫자여야 합니다`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' 또는 ')}가 필요합니다.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} 필수 값입니다`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} ${list(args)}로 시작하지 않습니다`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `유효한 URL을 입력하십시오.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: '선택한 날짜가 잘못되었습니다.',\n}\n\nexport const ko = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * By the given quantity it returns singular or plural with the correct suffix in Lithuanian\n */\nfunction getByQuantity(\n  quantity: number,\n  vienetas: string,\n  vienetai: string,\n  vienetu: string\n): string {\n  const lastTwoDigits = quantity.toString().slice(-2)\n  const parsedQuantity = parseInt(lastTwoDigits)\n\n  if (\n    (parsedQuantity > 10 && parsedQuantity < 20) ||\n    parsedQuantity % 10 === 0\n  ) {\n    return vienetu\n  }\n\n  if (parsedQuantity === 1 || parsedQuantity % 10 === 1) {\n    return vienetas\n  }\n\n  return vienetai\n}\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on a button for adding additional items.\n   */\n  add: 'Pridėti',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Pašalinti',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Pašalinti visus',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Atsiprašome, ne visi laukai užpildyti teisingai.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Pateikti',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Nepasirinktas joks failas',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Aukštyn',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Žemyn',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Kraunama...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Daugiau',\n  /**\n   * Show on buttons that navigate state forward\n   */\n  next: 'Kitas',\n  /**\n   * Show on buttons that navigate state backward\n   */\n  prev: 'Ankstesnis',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Pridėti visas reikšmes',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Pridėti pasirinktas reikšmes',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Pašalinti visas reikšmes',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Pašalinti pasirinktas reikšmes',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Pasirinkti datą',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Pakeisti datą',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'Uždaryti',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Atidaryti',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Prašome priimti ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} turi būti po ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} turi būti ateityje.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} gali būti tik abėcėlės simboliai.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} gali būti tik raidės ir skaičiai.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} gali būti tik raidės ir tarpai.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} turi būti abėcėlės simbolių.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} turi būti raidžių arba skaičių.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} turi būti raidžių arba tarpų.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} turi būti simbolių.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} turi būti didžioji raidė.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} turi būti mažoji raidė.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} turi būti skaičių.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} turi būti simbolis.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} turi būti tik didžiosios raidės.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} turi būti tik mažosios raidės.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} turi būti prieš ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} turi būti praeityje.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Šis laukas buvo sukonfigūruotas neteisingai ir jo negalima pateikti.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} turi būti tarp ${a} ir ${b}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} nesutampa.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} nėra tinkama data, naudokite formatą ${args[0]}`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'Šis laukas buvo sukonfigūruotas neteisingai ir jo negalima pateikti'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} turi būti tarp ${date(args[0])} ir ${date(args[1])}`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Įveskite teisingą el. pašto adresą.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} nesibaigia su ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} nėra leistina reikšmė.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} turi būti bent vienas simbolis.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} turi būti mažiau arba lygiai ${max} ${getByQuantity(\n        max,\n        'simbolis',\n        'simboliai',\n        'simbolių'\n      )}.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} turi būti iš ${max} ${getByQuantity(\n        max,\n        'simbolio',\n        'simbolių',\n        'simbolių'\n      )}.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} turi būti daugiau arba lygiai ${min} ${getByQuantity(\n        min,\n        'simbolis',\n        'simboliai',\n        'simbolių'\n      )}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)} turi būti tarp ${min} ir ${max} simbolių.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} nėra leistina reikšmė.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `Negali turėti daugiau nei ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} turi būti mažiau arba lygiai ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Neleidžiami jokie failų formatai.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} turi būti tokio tipo: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `Negali turėti mažiau nei ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `Turi būti bent ${args[0]} ${name} .`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}” nėra leidžiamas ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} turi būti skaičius.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' arba ')} yra privaloma.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} yra privaloma.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} neprasideda su ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Įveskite teisingą URL.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'Pasirinkta data yra netinkama.',\n}\n\nexport const lt = { ui, validation }\n","import { FormKitValidationMessages } from '@formkit/validation'\n\n/**\nHere we can import additional helper functions to assist in formatting our\nlanguage. Feel free to add additional helper methods to libs/formats if it\nassists in creating good validation messages for your locale.\n*/\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on a button for adding additional items.\n   */\n  add: 'Pievienot',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Noņemt',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Noņemt visus',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Piedodiet, visi lauki nav aizpildīti.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Iesniegt',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Nav izvēlēts fails',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Uz augšu',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Uz leju',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Ielādējas...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Ielādēt vēl',\n  /**\n   * Show on buttons that navigate state forward\n   */\n  next: 'Tālāk',\n  /**\n   * Show on buttons that navigate state backward\n   */\n  prev: 'Atpakaļ',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Pievienot visas vērtības',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Pievienojiet izvēlēto vērtību',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Noņemt visas vērtības',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Noņemt izvēlētās vērtības',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Izvēlieties datumu',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Mainīt datumu',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'Aizvērt',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Atvērt',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Lūdzu apstipriniet ${name}`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${name} jābūt pēc ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${name} jābūt pēc šodienas datuma.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${name} var saturēt tikai alfabētiskās rakstzīmes.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${name} var saturēt tikai burtus un ciparus.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${name} var saturēt tikai burtus un atstarpes.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${name} jābūt pirms ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${name} jābūt pirms šodienas datuma.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Šis lauks tika aizpildīts nepareizi un nevar tikt iesniegts.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${name} jābūt starp ${a} un ${b}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${name} nesakrīt.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${name} nav pareizs datums, lūdzu lietojiet formātu ${args[0]}`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'Šis lauks tika aizpildīts nepareizi un nevar tikt iesniegts.'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${name} jābūt starp ${date(args[0])} un ${date(args[1])}`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Lūdzu ierakstiet pareizu e-pasta adresi.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${name} nebeidzas ar ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${name} nav atļauta vērtība.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${name} jābūt vismaz vienam simbolam.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${name} jābūt mazāk par vai ${max} simboliem.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${name} jābūt ${max} simbolu garumā.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${name} jābūt vismaz ${min} simboliem.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${name} jābūt starp ${min} un ${max} simboliem.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${name} nav atļauta vērtība.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `Nevar būt vairāk par ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${name} nevar būt mazāk par ${args[0]} vai ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Atļauti nenoteikti faila formāti.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} faila formāti var būt šādi: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `Nevar būt mazāk par ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `Jābūt vismaz ${args[0]} ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}” nav atļauta vērtība iekš ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${name} jābūt ciparam.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${name} ir obligāti jāaizpilda`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${name} nesākas ar ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Lūdzu pievienojiet pareizu URL.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'Izvēlētais datums ir nepareizs.',\n}\n\nexport const lv = { ui, validation }\n","import { FormKitValidationMessages } from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on a button for adding additional items.\n   */\n  add: 'Нэмэх',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Хасах',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Бүгдийг хасах',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Уучлраарай, зарим нүдэн дахь өгөгдөл дутуу байна.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Илгээх',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Файл сонгоогүй байна',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Дээшээ',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Доошоо',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Ачааллаж байна...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Нэмж ачааллах',\n  /**\n   * Show on buttons that navigate state forward\n   */\n  next: 'Дараагийн',\n  /**\n   * Show on buttons that navigate state backward\n   */\n  prev: 'Өмнөх',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Бүх утгуудыг нэмэх',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Сонгогдсон утгуудыг нэмэх',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Бүх утгуудыг устгах',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Сонгогдсон утгуудыг хасах',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Огноо сонгох',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Огноо өөрчлөх',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'Хаах',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Нээлттэй',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `${name} утгыг зөвшөөрнө үү.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} нь ${date(args[0])}-ны дараа орох ёстой.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} утга ирээдүйг заах ёстой.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} зөвхөн үсэг агуулах ёстой.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} зөвхөн үсэг болон тоог агуулах ёстой.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} зөвхөн үсэг болон зай агуулах ёстой.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} нь ${date(args[0])}-ны өмнө байх ёстой.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} өнгөрсөн огноо байх ёстой.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Энэ нүдэн дэхь өгөгдөл буруу учраас илгээх боломжгүй.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} нь заавал ${a}, ${b} хоёрын дунд байх ёстой.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} таарахгүй байна.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} нь хүчинтэй огноо биш тул ${\n        args[0]\n      } гэсэн огноог ашиглаарай.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'Энэхүү нүд буруу тул цааш илгээх боломжгүй.'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} нь заавал ${date(args[0])}, ${date(\n      args[1]\n    )} хоёр огноон дунд байх ёстой.`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Та хүчинтэй имейл хаягаа оруулна уу.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} нь ${list(args)} гэсэн утгаар төгсөөгүй байна.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} нь зөвшөөрөгдөх утга биш.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} дээр хаяж нэг үсэг байх ёстой`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)}-н урт нь ${max}-ээс ихгүй байх ёстой.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} нь ${max} урт байвал зүгээр.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)}-н урт нь ${min}-ээс их буюу тэнцүү байж болно.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)}-н урт нь ${min}, ${max} хоёрын дунд байх ёстой.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} нь зөвшөөрөгдөх утга биш.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `${name} нь ${args[0]}-аас их байж болохгүй.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} нь ${args[0]}-тай тэнцүү эсвэл бага байх ёстой.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Файлын формат буруу.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} төрөл нь ${args[0]} байх ёстой.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `${name} нь ${args[0]}-аас их байж болохгүй.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${name} нь дор хаяж ${args[0]}-тай тэнцүү байх ёстой.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}” бол зөвшөөрөгдөх ${name} гэсэн утга биш.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} зөвхөн тоо байх ёстой.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} байх ёстой.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} нь ${list(args)}-ээр эхлээгүй байна.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Хүчннтай URL оруулна уу.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'Сонгосон огноо буруу байна.',\n}\n\nexport const mn = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on a button for adding additional items.\n   */\n  add: 'Legg til',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Fjern',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Fjern alle',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Beklager, noen felter er ikke fylt ut korrekt.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Send inn',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Ingen fil valgt',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Flytt opp',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Flytt ned',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Laster...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Last mer',\n  /**\n   * Show on buttons that navigate state forward\n   */\n  next: 'Neste',\n  /**\n   * Show on buttons that navigate state backward\n   */\n  prev: 'Forrige',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Legg til alle verdier',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Legg til valgte verdier',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Fjern alle verdier',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Fjern valgte verdier',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Velg dato',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Endre dato',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Vennligst aksepter ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} må være senere enn ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} må være i fremtiden.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} kan bare inneholde alfabetiske tegn.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} kan bare inneholde bokstaver og tall.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} kan bare inneholde bokstaver og mellomrom.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} must contain alphabetical characters.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} must contain letters and numbers.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} must contain letters and spaces.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} must contain symbol.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} must contain uppercase.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} must contain lowercase.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} must contain number.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} can only contain symbol.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} can only contain uppercase.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} can only contain lowercase.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} må være tidligere enn ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} må være i fortiden.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Dette feltet er feilkonfigurert og kan ikke innsendes.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} må være mellom ${a} og ${b}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} stemmer ikke overens.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} er ikke en gyldig dato, vennligst bruk formatet ${\n        args[0]\n      }`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'Dette feltet er feilkonfigurert og kan ikke innsendes.'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} må være mellom ${date(args[0])} og ${date(args[1])}`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Vennligst oppgi en gyldig epostadresse.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} slutter ikke med ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} er ikke en tillatt verdi.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} må ha minst ett tegn.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} må ha mindre enn eller nøyaktig ${max} tegn.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} skal være ${max} tegn langt.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} må ha mer enn eller nøyaktig ${min} tegn.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)} må ha mellom ${min} og ${max} tegn.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} er ikke en tillatt verdi.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `Kan ikke ha mer enn ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} må være mindre enn eller nøyaktig ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Ingen tillatte filformater.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} må være av typen: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `Kan ikke ha mindre enn ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)} må være minst ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}” er ikke en tillatt ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} må være et tall.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' eller ')} er nødvendig.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} er påkrevd.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} starter ikke med ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Vennligst inkluder en gyldig url.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'Den valgte datoen er ugyldig.',\n}\n\nexport const nb = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on buttons for adding new items.\n   */\n  add: 'Toevoegen',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Verwijderen',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Alles verwijderen',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Sorry, niet alle velden zijn correct ingevuld.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Versturen',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Geen bestand gekozen',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Naar boven gaan',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Naar beneden verplaatsen',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Aan het laden...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Meer laden',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: 'Vervolgens',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: 'Voorgaand',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Alle waarden toevoegen',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Geselecteerde waarden toevoegen',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Alle waarden verwijderen',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Geselecteerde waarden verwijderen',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Kies een datum',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Datum wijzigen',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'Sluiten',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Open',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Accepteer de ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} moet na ${date(args[0])} zijn.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} moet in de toekomst liggen.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} mag alleen alfabetische tekens bevatten.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} mag alleen letters en cijfers bevatten.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} mag alleen letters en spaties bevatten.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} moet alfabetische tekens bevatten.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} moet letters of cijfers bevatten.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} moet letters of spaties bevatten.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} moet een symbool bevatten.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} moet hoofdletters bevatten.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} moet kleine letters bevatten.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} moet cijfers bevatten.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} moet een symbool zijn.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} mag alleen hoofdletters bevatten.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} mag alleen kleine letters bevatten.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} moet vóór ${date(args[0])} vallen.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} moet in het verleden liggen.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Dit veld is onjuist geconfigureerd en kan niet worden verzonden.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} moet tussen ${a} en ${b} liggen.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} komt niet overeen.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} is geen geldige datum, gebruik de notatie ${args[0]}`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'Dit veld is onjuist geconfigureerd en kan niet worden verzonden'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} moet tussen ${date(args[0])} en ${date(args[1])} liggen`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Vul een geldig e-mailadres in.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} eindigt niet met ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} is geen toegestane waarde.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} moet minimaal één teken zijn.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} mag maximaal ${max} tekens lang zijn.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} moet ${max} tekens lang zijn.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} moet minimaal ${min} tekens lang zijn.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)} moet tussen de ${min} en ${max} tekens zijn.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} is geen toegestane waarde.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `Mag niet meer dan ${args[0]} ${name} hebben.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} moet kleiner zijn dan of gelijk zijn aan ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Geen bestandsformaten toegestaan.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} moet van het type: ${args[0]} zijn`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `Mag niet minder dan ${args[0]} ${name} hebben.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)} moet minimaal ${args[0]} zijn.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `\"${value}\" is geen toegestane ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} moet een getal zijn.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' of ')} is vereist.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} is verplicht.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} begint niet met ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Voer een geldige URL in.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'De geselecteerde datum is ongeldig.',\n}\n\nexport const nl = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on buttons for adding new items.\n   */\n  add: 'Dodaj',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Usuń',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Usuń wszystko',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Nie wszystkie pola zostały wypełnione poprawnie.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Wyślij',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Nie wybrano pliku',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Przesuń w górę',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Przesuń w dół',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Ładowanie...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Załaduj więcej',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: 'Kolejny',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: 'Poprzednia',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Dodaj wszystkie wartości',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Dodaj wybrane wartości',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Usuń wszystkie wartości',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Usuń wybrane wartości',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Wybierz datę',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Zmień datę',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'Zamknij',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Otwórz',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Proszę zaakceptować ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} musi być po ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} musi być w przyszłości.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `Pole ${s(name)} może zawierać tylko znaki alfabetyczne.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `Pole ${s(name)} może zawierać tylko znaki alfanumeryczne.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `Pole ${s(name)} mogą zawierać tylko litery i spacje.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} musi zawierać znaki alfabetyczne.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} musi zawierać litery lub cyfry.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} musi zawierać litery lub spacje.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} musi zawierać symbol.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} musi zawierać wielkie litery.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} musi zawierać małe litery.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} musi zawierać liczby.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} musi być symbolem.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} może zawierać tylko wielkie litery.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} może zawierać tylko małe litery.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} musi być przed ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} musi być w przeszłości.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Pole zostało wypełnione niepoprawnie i nie może zostać wysłane.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `Wartość pola ${s(name)} musi być pomiędzy ${a} i ${b}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} nie pokrywa się.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `Wartość pola ${s(\n        name\n      )} nie jest poprawną datą, proszę użyć formatu ${args[0]}`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'To pole zostało wypełnione niepoprawnie i nie może zostać wysłane'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `Data w polu ${s(name)} musi być pomiędzy ${date(args[0])} i ${date(\n      args[1]\n    )}`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Proszę wpisać poprawny adres email.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `Pole ${s(name)} nie kończy się na ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `Pole ${s(name)} nie jest dozwoloną wartością.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `Pole ${s(name)} musi posiadać minimum jeden znak.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `Pole ${s(name)} musi zawierać ${max} lub mniej znaków.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `Pole ${s(name)} musi zawierać ${min} lub więcej znaków.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `Pole ${s(name)} musi mieć ${min} znaków.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `Pole ${s(name)} musi mieć ${min}-${max} znaków.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `Pole ${s(name)} zawiera niedozwolone znaki.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `Nie można mieć więcej niż ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `Wartość pola ${s(name)} musi być mniejsza lub równa ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Nie podano dozwolonych typów plików.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} musi być typem: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `Musisz podać więcej niż ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return ` Musisz podać conajmniej ${args[0]} ${s(name)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `Wartość pola ${name} jest niedozwolona.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} musi być numerem.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' lub ')} wymagany jest.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `Pole ${s(name)} jest wymagane.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `Wartośc pola ${s(name)} nie zaczyna się od ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Wprowadź prawidłowy adres URL.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'Wybrana data jest nieprawidłowa.',\n}\n\nexport const pl = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on buttons for adding new items.\n   */\n  add: 'Incluir',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Remover',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Remover todos',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Desculpe, alguns campos não foram preenchidos corretamente.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Enviar',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Nenhum arquivo selecionado.',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Mover para cima',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Mover para baixo',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Carregando...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Carregar mais',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: 'Próximo',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: 'Anterior',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Adicione todos os valores',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Adicionar valores selecionados',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Remover todos os valores',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Remover valores selecionados',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Escolha a data',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Data da alteração',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'Fechar',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Aberto',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Por favor aceite o ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} precisa ser depois de ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} precisa ser no futuro.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} precisa conter apenas letras.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} pode conter apenas letras e números.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} pode conter apenas números e espaços.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} deve conter caracteres alfabéticos.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} deve conter letras ou números.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} deve conter letras ou espaços.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} deve conter um símbolo.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} deve conter letras maiúsculas.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} deve conter letras minúsculas.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} deve conter números.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} deve ser um símbolo.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} só pode conter letras maiúsculas.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} só pode conter letras minúsculas.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} precisa ser antes de ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} precisa ser no passado.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Este campo não foi configurado corretamente e não pode ser submetido.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} precisa ser entre ${a} e ${b}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} não é igual.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} não é uma data válida, por favor use este formato ${\n        args[0]\n      }`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'Este campo não foi configurado corretamente e não pode ser submetido.'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} precisa ser entre ${date(args[0])} e ${date(args[1])}`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Por favor, insira um endereço de email válido.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} não termina com ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} não é um valor permitido.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = first <= second ? first : second\n    const max = second >= first ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} precisa conter ao menos um caractere.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} precisa ser menor ou igual a ${max} caracteres.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} precisa conter ${max} caracteres.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} precisa ser maior ou igual a ${min} caracteres.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)} precisa ter entre ${min} e ${max} caracteres.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} não é um valor permitido.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `Não pode ter mais de ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} precisa ser menor ou igual a ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Não há formatos de arquivos permitidos.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} precisa ser do tipo: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `Não pode ter menos de ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)} precisa ser pelo menos ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}” não é um(a) ${name} permitido(a).`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} precisa ser um número.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' ou ')} é necessário.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} é obrigatório.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} não começa com ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Por favor, insira uma url válida.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'A data selecionada é inválida.',\n}\n\nexport const pt = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on buttons for adding new items.\n   */\n  add: 'Adăugare',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Elimină',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Elimină tot',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Pare rău, unele câmpuri nu sunt corect completate.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Trimite',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Nu este selectat nici un fișier',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Mutare în sus',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Mutare în jos',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Se încarcă...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Încărcați mai mult',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: 'Urmatorul',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: 'Precedent',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Adăugați toate valorile',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Adăugarea valorilor selectate',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Eliminați toate valorile',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Eliminați valorile selectate',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Alege data',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Modificați data',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'Închide',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Deschis',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Te rog acceptă ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} trebuie să fie după ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} trebuie sa fie în viitor.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} poate conține doar caractere alafetice.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} poate conține doar litere și numere.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} poate conține doar litere și spații.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} trebuie să conțină caractere alfabetice.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} trebuie să conțină litere sau numere.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} trebuie să conțină litere sau spații.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} trebuie să conțină simbol.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} trebuie să conțină majuscule.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} trebuie să conțină litere mici.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} trebuie să conțină numere.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} trebuie să fie un simbol.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} poate conține doar litere mari.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} poate conține doar litere mici.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} trebuie să preceadă ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} trebuie să fie în trecut.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Câmpul a fost configurat incorect și nu poate fi trimis.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} trebuie să fie între ${a} și ${b}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} nu se potrivește.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} nu este validă, te rog foloște formatul ${args[0]}`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'Câmpul a fost incorect configurat și nu poate fi trimis.'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} trebuie să fie între ${date(args[0])} și ${date(\n      args[1]\n    )}`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Te rog folosește o adresă de email validă.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} nu se termină cu ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} nu este o valoare acceptată.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} trebuie sa conțină cel puțin un caracter.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} trebuie sa aibă cel mult ${max} caractere.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} ar trebui să aibă ${max} caractere lungi.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} trebuie să aibă cel puțin ${min} caractere.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)} trebuie să aibă între ${min} și ${max} caractere.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} nu este o valoare acceptată.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `Nu poate avea mai mult decat ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} trebuie să fie cel mult egal cu ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Tipul de fișier neacceptat.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} trebuie să fie de tipul: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `Nu poate avea mai puțin decât ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)} trebuie să fie cel puțin ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}” nu este o valoare acceptă pentru ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} trebuie să fie un număr.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' sau ')} este necesar.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} este necesar.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} nu începe cu ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Introduceți o adresă URL validă.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'Data selectată este nevalidă.',\n}\n\nexport const ro = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on buttons for adding new items.\n   */\n  add: 'Добавить',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Удалить',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Убрать все',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Извините, не все поля заполнены верно.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Отправить',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Файл не выбран',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Переместить вверх',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Переместить вниз',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Загрузка...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Загрузить больше',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: 'Следующий',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: 'Предыдущий',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Добавить все значения',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Добавить выбранные значения',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Удалить все значения',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Удалить выбранные значения',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Выберите дату',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Изменить дату',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'Закрыть',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Открыть',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Пожалуйста, примите ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `Дата ${s(name)} должна быть позже ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `Дата ${s(name)} должна быть в будущем.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `Поле ${s(name)} может содержать только буквы.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `Поле ${s(name)} может содержать только буквы и цифры.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} могут содержать только буквы и пробелы.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} должен содержать алфавитные символы.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} должен содержать буквы или цифры.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} должно содержать буквы или пробелы.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} должен содержать символ.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} должно содержать прописные буквы.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} должно содержать строчные буквы.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} должен содержать числа.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} должен быть символом.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} может содержать только прописные буквы.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} может содержать только буквы нижнего регистра.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `Дата ${s(name)} должна быть раньше ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `Дата ${s(name)} должна быть в прошлом.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Это поле заполнено неверно и не может быть отправлено.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `Поле ${s(name)} должно быть между ${a} и ${b}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `Поле ${s(name)} не совпадает.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `Поле ${s(\n        name\n      )} имеет неверную дату. Пожалуйста, используйте формат ${args[0]}`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'Это поле заполнено неверно и не может быть отправлено.'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `Дата ${s(name)} должна быть между ${date(args[0])} и ${date(\n      args[1]\n    )}`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Пожалуйста, введите действительный электронный адрес.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `Поле ${s(name)} не должно заканчиваться на ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `Поле ${s(name)} имеет неподустимое значение.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `Поле ${s(name)} должно содержать минимум один символ.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `Длина поля ${s(\n        name\n      )} должна быть меньше или равна ${max} символам.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `Длина ${s(name)} должна составлять ${max} символов.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `Длина поля ${s(\n        name\n      )} должна быть больше или равна ${min} символам.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `Длина поля ${s(name)} должна быть между ${min} и ${max} символами.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `Поле ${s(name)} имеет недопустимое значение.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `Не может быть выбрано больше, чем ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `Поле ${s(name)} должно быть меньше или равно ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Не указаны поддержиавемые форматы файла.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `Формат файла в поле ${s(name)} должен быть: ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `Не может быть выбрано меньше, чем ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `Поле ${s(name)} должно быть не менее, чем ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}” не поддерживается в поле ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `Поле ${s(name)} должно быть числом.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' или ')} требуется.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `Поле ${s(name)} обязательно для заполнения.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `Поле ${s(name)} должно начинаться с ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Пожалуйста, введите действительный URL-адрес.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'Выбранная дата недействительна.',\n}\n\nexport const ru = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on a button for adding additional items.\n   */\n  add: 'Pridať',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Odstrániť',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Odstrániť všetko',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Prepáčte, ale nie všetky polia sú vyplnené správne.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Odoslať',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Nebol vybraný žiadny súbor',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Posunúť hore',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Posunúť dole',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Načítavanie...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Načítať viac',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: 'Ďalšie',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: 'Predošlý',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Pridajte všetky hodnoty',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Pridajte vybrané hodnoty',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Odstrániť všetky hodnoty',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Odstrániť vybrané hodnoty',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Vyberte dátum',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Zmena dátumu',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'Zavrieť',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Otvorené',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Prosím zaškrtnite ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} musí byť za ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} musí byť v budúcnosti.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} môže obsahovať iba písmená.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} môže obsahovať iba písmená a čísla.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} môže obsahovať iba písmená a medzery.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} musí obsahovať abecedné znaky.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} musí obsahovať písmená alebo číslice.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} musí obsahovať písmená alebo medzery.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} musí obsahovať symbol.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} musí obsahovať veľké písmená.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} musí obsahovať malé písmená.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} musí obsahovať čísla.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} musí byť symbol.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} môže obsahovať iba veľké písmená.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} môže obsahovať len malé písmená.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} musí byť pred ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} musí byť v minulosti.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Toto pole bolo nesprávne nakonfigurované a nemôže byť odoslané.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} musí byť medzi ${a} and ${b}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} does not match.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} nie je platným dátumom, prosím, použite formát ${\n        args[0]\n      }`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'Toto pole bolo nesprávne nakonfigurované a nemôže byť odoslané.'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} musí byť medzi ${date(args[0])} a ${date(args[1])}`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Prosím, zadajte platnú emailovú adresu.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} nekončí na ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} nie je povolená hodnota.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} musí mať najmenej jeden znak.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} musí byť menšie alebo rovné ako ${max} znakov.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} by mala mať dĺžku ${max} znakov.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} musí byť väčšie alebo rovné ako ${min} znakov.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)} musí byť medzi ${min} až ${max} znakov.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} nie je povolená hodnota.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `Nie je možné použiť viac než ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} musí byť menšie alebo rovné ako ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Nie sú povolené formáty súborov.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} musí byť typu: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `Nemôže byť menej než ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)} musí byť minimálne ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}” nie je povolené hodnota pre ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} musí byť číslo.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' alebo ')} je potrebný.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} je povinné.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} nezačíná s ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Zadajte platnú adresu URL.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'Vybraný dátum je neplatný.',\n}\n\nexport const sk = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on buttons for adding new items.\n   */\n  add: 'Dodaj',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Odstrani',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Odstrani vse',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Nekatera polja niso pravilno izpolnjena.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Pošlji',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Nobena datoteka ni izbrana',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Premakni se navzgor',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Premakni se navzdol',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Nalaganje...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Naloži več',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: 'Naslednji',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: 'Prejšnji',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Dodajte vse vrednosti',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Dodajanje izbranih vrednosti',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Odstranite vse vrednosti',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Odstrani izbrane vrednosti',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Izberite datum',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Spremeni datum',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'Zapri',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Odpri',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Prosimo popravite ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} mora biti po ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} mora biti v prihodnosti.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} lahko vsebuje samo znake abecede.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} lahko vsebuje samo črke in številke.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} lahko vsebuje samo črke in presledke.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} mora vsebovati abecedne znake.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} mora vsebovati črke ali številke.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} mora vsebovati črke ali presledke.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} mora vsebovati simbol.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} mora vsebovati velike črke.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} mora vsebovati male črke.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} mora vsebovati številke.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} mora biti simbol.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} lahko vsebuje le velike črke.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} lahko vsebuje le male črke.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} mora biti pred ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} mora biti v preteklosti.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `To polje je narobe nastavljeno in ne mora biti izpolnjeno.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} mora biti med ${a} in ${b}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} se ne ujema.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} ni pravilen datum, prosimo uporabite format ${args[0]}`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'To polje je narobe nastavljeno in ne mora biti izpolnjeno.'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} mora biti med ${date(args[0])} in ${date(args[1])}`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Vnesite veljaven e-poštni naslov.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} se mora kočati z ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} ni dovoljena vrednost.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} mora vsebovati vsaj en znak.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} mora vsebovati največ ${max} znakov.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} mora biti dolg ${max} znakov.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} mora vsebovati vsaj ${min} znakov.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)} mora vsebovati med ${min} in ${max} znakov.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} ni dovoljena vrednost.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `Največ je ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} je lahko največ ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Nobena vrsta datoteke ni dovoljena.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} mora biti tipa: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `Najmanj ${args[0]} ${name} je dovoljenih.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)} mora biti vsaj ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}” ni dovoljen(a/o) ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} mora biti številka.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' ali ')} zahtevan je.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} je zahtevan(o/a).`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} se mora začeti z ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Vnesite veljaven URL.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'Izbrani datum je neveljaven.',\n}\n\nexport const sl = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on a button for adding additional items.\n   */\n  add: 'Dodaj',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Ukloni',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Ukloni sve',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Pojedina polja nisu ispravno ispunjena.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Pošalji',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Fajl nije odabran',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Pomerite se gore',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Pomeri se dole',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Učitavanje...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Učitaj više',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: 'Sledeća',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: 'Prethodna',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Dodajte sve vrednosti',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Dodajte izabrane vrednosti',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Uklonite sve vrednosti',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Uklonite izabrane vrednosti',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Izaberite datum',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Promenite datum',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'Zatvori',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Otvori',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Molimo prihvatite ${name}`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} mora biti posle ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} mora biti u budućnosti.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} može da sadrži samo abecedne znakove.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} može da sadrži samo slova i brojeve.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} može da sadrži samo slova i razmake.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} mora da sadrži abecedne znakove.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} mora da sadrži slova ili brojeve.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} mora da sadrži slova ili razmake.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} mora da sadrži simbol.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} mora da sadrži velika slova.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} mora da sadrži mala slova.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} mora da sadrži brojeve.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} mora biti simbol.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} može da sadrži samo velika slova.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} može da sadrži samo mala slova.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} mora biti pre ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} mora biti u prošlosti.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Ovo polje je pogrešno konfigurisano i ne može se poslati.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} mora biti između ${a} i ${b}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} se ne podudara.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} nije važeći datum, molimo Vas koristite format ${\n        args[0]\n      }`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'Ovo polje je pogrešno konfigurisano i ne može se poslati'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} mora biti između ${date(args[0])} i ${date(args[1])}`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Unesite ispravnu e-mail adresu.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} se ne završava sa ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} nije dozvoljena vrednost`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} mora biti najmanje jedan karakter.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} mora biti manji ili jednaki od ${max} karaktera.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} treba da bude ${max} znakova dugačak.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} mora biti veći ili jednaki od ${min} karaktera.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)} mora biti između ${min} i ${max} karaktera.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} nije dozvoljena vrednost.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `Ne može imati više od ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} mora biti manji ili jednaki od ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Nisu dozvoljeni formati datoteka.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} mora biti tipa: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `Ne može imati manje od ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)} mora da ima najmanje ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}” nije dozvoljeno ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} mora biti broj.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' или ')} потребан је.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} je obavezno polje.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} ne počinje sa ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Unesite važeću URL adresu.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'Izabrani datum je nevažeći.',\n}\n\nexport const sr = { ui, validation }\n","// Please copy and paste the file your just downloaded here\nimport {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Ta bort',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Ta bort alla',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Tyvärr är inte alla fält korrekt ifyllda',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Skicka',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Ingen fil vald',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Flytta upp',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Flytta ner',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Laddar...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Ladda mer',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: 'Nästa',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: 'Föregående',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Lägg till alla värden',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Lägg till valda värden',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Ta bort alla värden',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Ta bort valda värden',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Välj datum',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Ändra datum',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'Stäng',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Öppna',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Var god acceptera ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} måste vara efter ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} måste vara framåt i tiden.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} kan enbart innehålla bokstäver i alfabetet.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} kan bara innehålla bokstäver och siffror.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} kan bara innehålla bokstäver och blanksteg.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} måste innehålla alfabetiska tecken.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} måste innehålla bokstäver eller siffror.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} måste innehålla bokstäver eller mellanslag.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} måste innehålla symbol.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} måste innehålla versaler.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} måste innehålla gemener.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} måste innehålla siffror.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} måste vara en symbol.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} kan bara innehålla versaler.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} kan bara innehålla små bokstäver.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} måste vara före ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} måste vara bakåt i tiden.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Det här fältet ställdes inte in korrekt och kan inte användas.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} måste vara mellan ${a} och ${b}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} matchar inte.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} är inte ett giltigt datum, var god använd formatet ${\n        args[0]\n      }`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'Det här fältet ställdes inte in korrekt och kan inte användas'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} måste vara mellan ${date(args[0])} och ${date(args[1])}`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Var god fyll i en giltig e-postadress.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} slutar inte med ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} är inte ett godkänt värde.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} måste ha minst ett tecken.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} måste vara ${max} tecken eller färre.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} bör vara ${max} tecken långa.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} måste vara ${min} tecken eller fler.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)} måste vara mellan ${min} och ${max} tecken.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} är inte ett godkänt värde.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `Kan inte ha mer än ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} måste vara ${args[0]} eller mindre.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Inga filtyper tillåtna.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} måste vara av filtypen: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `Kan inte ha mindre än ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)} måste vara minst ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}” är inte ett godkänt ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} måste vara en siffra.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' eller ')} krävs.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} är obligatoriskt.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} börjar inte med ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Ange en giltig URL.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'Det valda datumet är ogiltigt.',\n}\n\nexport const sv = { ui, validation }\n","import { FormKitValidationMessages } from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on a button for adding additional items.\n   */\n  add: 'Aumenta',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Hasai',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Hasai Hotu',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Deskulpa, iha informasaun neebe sala iha formuláriu',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Submete',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Seidauk hili file',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Muda ba leten',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Muda ba kotuk',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Hein lai...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Foti tan',\n  /**\n   * Show on buttons that navigate state forward\n   */\n  next: 'Ba oin',\n  /**\n   * Show on buttons that navigate state backward\n   */\n  prev: 'Ba kotuk',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Aumenta hotu',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Aumenta buat neebe hili ona',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Hasai hotu',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Hasai buat neebe hili ona',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Hili data',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Troka data',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Favor ida simu ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} tenki depoid ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} tenki iha futuru.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} bele uza letra deit.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} bele uza letra ka numeru deit.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} bele uza letra ka numeru deit.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} tenki antes ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} tenki antes ohin loron.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Informasaun nee la loos no la bele submete.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} tenki iha klaran entre ${a} no ${b}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} la hanesan.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} la loos, favor ida hakerek tuir ${args[0]}`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'Informasaun nee la loos no la bele submete.'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} tenki iha ${date(args[0])} no ${date(\n      args[1]\n    )} nia klaran`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Favor hakerek endresu email neebe loos.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} la remata ho ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `la bele uza ${s(name)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} tenki iha letra ida ka liu.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} tenki badak liu ${max} letra.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} tenki iha letra ${max}.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} tenki iha letra ${min} ka liu.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)} tenki iha letra ${min} too ${max}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `la bele uza ${s(name)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `La bele iha ${args[0]} ka liu ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} tenki kiik liu ka hanesan ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return `La bele simu 'format' ida.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} tenki iha tipo: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `Presiza ${args[0]} ${name} ka liu.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${name} tenki ${args[0]} ka liu.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `La bele uza “${value}” ba ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} tenki numeru.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `Presiza ${s(name)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} la komesa ho ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Favor hakerek URL neebe loos.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'Data la loos.',\n}\n\nexport const tet = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on a button for adding additional items.\n   */\n  add: 'Илова кардан',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Хориҷ кардан',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Ҳамаро хориҷ кунед',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Бубахшед, на ҳама майдонҳо дуруст пур карда шудаанд.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Пешниҳод кунед',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Ягон файл интихоб нашудааст',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Ба боло ҳаракат кунед',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Ба поён ҳаракат кунед',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Дар ҳоли боргузорӣ',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Бештар бор кунед',\n  /**\n   * Show on buttons that navigate state forward\n   */\n  next: 'Баъдӣ',\n  /**\n   * Show on buttons that navigate state backward\n   */\n  prev: 'Гузашта',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Ҳама арзишҳоро илова кунед',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Илова кардани арзишҳои интихобшуда',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Ҳама арзишҳоро хориҷ кунед',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Арзишҳои интихобшударо хориҷ кунед',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Сана интихоб кунед',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Тағйир додани сана',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Лутфан ${name}-ро қабул кунед`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} бояд пас аз ${date(args[0])} бошад.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} бояд дар оянда бошад.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} метавонад танҳо аломатҳои алифборо дар бар гирад.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} метавонад танҳо ҳарфҳо ва рақамҳоро дар бар гирад.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} метавонад танҳо ҳарфҳо ва фосилаҳоро дар бар гирад.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} must contain alphabetical characters.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} must contain letters and numbers.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} must contain letters and spaces.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} must contain symbol.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} must contain uppercase.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} must contain lowercase.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} must contain number.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} can only contain symbol.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} can only contain uppercase.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} can only contain lowercase.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} бояд пеш аз ${date(args[0])} бошад.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} бояд дар гузашта бошад.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Ин майдон нодуруст танзим шудааст ва онро пешниҳод кардан ғайриимкон аст.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} бояд дар байни ${a} ва ${b} бошад.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} мувофиқат намекунад.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} санаи дуруст нест, лутфан формати ${\n        args[0]\n      }-ро истифода баред`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'Ин майдон нодуруст танзим шудааст ва онро пешниҳод кардан ғайриимкон аст'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} бояд дар байни ${date(args[0])} ва ${date(\n      args[1]\n    )} бошад`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Лутфан нишонаи имейли амалкунандаро ворид намоед.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} бо ${list(args)} ба охир намерасад.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} арзиши иҷозатдодашуда нест.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} бояд ҳадди аққал як аломат бошад.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} бояд аз ${max} аломат камтар ё баробар бошад.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} бояд ${max} аломат бошад.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} бояд аз ${min} аломат зиёд ё баробар бошад.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)} бояд дар байни ${min} ва ${max} аломат бошад.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} арзиши иҷозатдодашуда нест.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `Зиёда аз ${args[0]} ${name} дошта наметавонад.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} бояд аз ${args[0]} камтар ё баробар бошад.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Ягон формати файл иҷозат дода намешавад.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} бояд чунин намуд бошад: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `Камтар аз ${args[0]} ${name} дошта наметавонад.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)} бояд ҳадди аққал ${args[0]} бошад.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `\"${value}\" ${name} иҷозат дода намешавад.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} бояд рақам бошад.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' ё ')} зарур а`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} лозим аст.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} бо ${list(args)} оғоз намешавад.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Лутфан URL-и дурустро дохил кунед.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'Санаи интихобшуда нодуруст аст.',\n}\n\nexport const tg = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on buttons for adding new items.\n   */\n  add: 'เพิ่ม',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'เอาออก',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'เอาออกทั้งหมด',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'ขออภัย ข้อมูลบางช่องที่กรอกไม่ถูกต้อง',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'ส่ง',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'ยังไม่ได้เลือกไฟล์',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'เลื่อนขึ้น',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'เลื่อนลง',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'กำลังโหลด...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'โหลดเพิ่มเติม',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: 'ถัดไป',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: 'ก่อนหน้า',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'เพิ่มค่าทั้งหมด',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'เพิ่มค่าที่เลือก',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'ลบค่าทั้งหมด',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'ลบค่าที่เลือก',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'เลือกวันที่',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'เปลี่ยนวันที่',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'ปิด',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'เปิด',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `กรุณายอมรับ ${name}`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} จะต้องเป็นวันที่หลังจาก ${date(args[0])}`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} จะต้องเป็นวันที่ที่ยังไม่มาถึง`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} สามารถเป็นได้แค่ตัวอักษรเท่านั้น`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} สามารถเป็นได้แค่ตัวอักษรและตัวเลขเท่านั้น`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} สามารถเป็นได้แค่ตัวอักษรและเว้นวรรคเท่านั้น`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} ต้องมีตัวอักษรตัวอักษร`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} ต้องมีตัวอักษรหรือตัวเลข`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} ต้องมีตัวอักษรหรือช่องว่าง`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} ต้องมีสัญลักษณ์`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} ต้องมีตัวพิมพ์ใหญ่`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} ต้องมีตัวพิมพ์เล็ก`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} ต้องมีตัวเลข`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} จะต้องเป็นสัญลักษณ์`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} เท่านั้นที่สามารถมีตัวอักษรตัวพิมพ์ใหญ่`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} เท่านั้นที่สามารถมีตัวอักษรตัวพิมพ์เล็ก`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} จะต้องเป็นวันที่ที่มาก่อน ${date(args[0])}`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} จะต้องเป็นวันที่ที่ผ่านมาแล้ว`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `ช่องนี้ถูกตั้งค่าอย่างไม่ถูกต้อง และจะไม่สามารถส่งข้อมูลได้`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} จะต้องเป็นค่าระหว่าง ${a} และ ${b}`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} ไม่ตรงกัน`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} ไม่อยู่ในรูปแบบวันที่ที่ถูกต้อง กรุณากรอกตามรูปแบบ ${\n        args[0]\n      }`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'ช่องนี้ถูกตั้งค่าอย่างไม่ถูกต้อง และจะไม่สามารถส่งข้อมูลได้'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} จะต้องเป็นวันที่ระหว่าง ${date(args[0])} และ ${date(\n      args[1]\n    )}`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'กรุณากรอกที่อยู่อีเมลทีถูกต้อง',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} จะต้องลงท้ายด้วย ${list(args)}`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} ไม่ใช่ค่าที่อนุญาตให้กรอก`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} จะต้องมีความยาวอย่างน้อยหนึ่งตัวอักษร`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} จะต้องมีความยาวไม่เกิน ${max} ตัวอักษร`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} ควรจะเป็น ${max} ตัวอักษรยาว`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} จะต้องมีความยาว ${min} ตัวอักษรขึ้นไป`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)} จะต้องมีความยาวระหว่าง ${min} และ ${max} ตัวอักษร`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} ไม่ใช่ค่าที่อนุญาตให้กรอก`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `ไม่สามารถเลือกมากกว่า ${args[0]} ${name} ได้`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} จะต้องมีค่าไม่เกิน ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'ไม่มีประเภทของไฟล์ที่อนุญาต'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} จะต้องเป็นไฟล์ประเภท ${args[0]} เท่านั้น`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `ไม่สามารถเลือกน้อยกว่า ${args[0]} ${name} ได้`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)} จะต้องมีค่าอย่างน้อย ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}” ไม่ใช่ค่า ${name} ที่อนุญาตให้กรอก`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} จะต้องเป็นตัวเลขเท่านั้น`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' หรือ ')} ต้องการ.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `กรุณากรอก ${s(name)}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} จะต้องเริ่มต้นด้วย ${list(args)}`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `กรุณาระบุที่อยู่ลิงก์ให้ถูกต้อง`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'วันที่ที่เลือกไม่ถูกต้อง',\n}\n\nexport const th = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on buttons for adding new items.\n   */\n  add: 'Ekle',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Kaldır',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Hepsini kaldır',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Maalesef, tüm alanlar doğru doldurulmadı.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Gönder',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Dosya yok',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Yukarı Taşı',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Aşağı taşı',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Yükleniyor...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Daha fazla yükle',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: 'Sonraki',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: 'Önceki',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Tüm değerleri ekle',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Seçili değerleri ekle',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Tüm değerleri kaldır',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Seçili değerleri kaldır',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Tarih seçin',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Tarihi değiştir',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'Kapat',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Açık',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Lütfen ${name}'yi kabul edin.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} ${date(args[0])}'den sonra olmalıdır.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} gelecekte bir zaman olmalıdır.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} sadece alfabetik karakterler içerebilir.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} sadece alfabetik karakterler ve sayı içerebilir.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} yalnızca harf ve boşluk içerebilir.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} alfabetik karakterler içermelidir.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} harf veya rakamı içermelidir.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} harf veya boşluk içermelidir.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} sembol içermelidir.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} büyük harf içermelidir.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} küçük harf içermelidir.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} sayı içermelidir.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} bir sembol olmalıdır.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} yalnızca büyük harfler içerebilir.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} yalnızca küçük harfler içerebilir.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} ${date(args[0])} tarihinden önce olmalı.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} geçmişte olmalı.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Alan yanlış yapılandırılmış ve gönderilemez.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} ${a} ve ${b} aralığında olmalı.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} eşleşmiyor.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} geçerli bir tarih değil, lütfen ${\n        args[0]\n      } biçimini kullanın.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'Alan yanlış yapılandırılmış ve gönderilemez.'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)}, ${date(args[0])} ve ${date(args[1])} aralığında olmalı.`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Lütfen geçerli bir e-mail adresi girin.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} ${list(args)} ile bitmiyor.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} izin verilen bir değer değil.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} en azından bir karakter uzunluğunda olmalı.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} ${max}'e eşit veya daha küçük olmalı.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} ${max} karakter uzunluğunda olmalıdır.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} ${min}'e eşit veya daha büyük olmalı.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)}, ${min} ve ${max} karakter uzunluğu aralığında olmalı.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} izin verilen bir değer değil.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `${name}'in uzunluğu ${args[0]}'dan daha uzun olamaz.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} en azından ${args[0]} uzunluğunda veya ona eşit olmalı.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Hiçbir dosya türüne izin verilmez.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} şu tiplerden biri olmalı: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `${name}'in uzunluğu ${args[0]}'dan daha kısa olamaz.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)} en azından ${args[0]} uzunluğunda olmalı.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}” ${name} olamaz.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} sayı olmalı.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' veya ')} gereklidir.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} gerekli.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} ${list(args)} ile başlamıyor.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Lütfen geçerli bir URL girin.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'Seçilen tarih geçersiz.',\n}\n\nexport const tr = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on a button for adding additional items.\n   */\n  add: 'Додати',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Видалити',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Видалити все',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Вибачте, не всі поля заповнені правильно.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Відправити',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Файл не вибрано',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Рухатися вгору',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Пересунути вниз',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Завантаження...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Завантажте більше',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: 'Наступний',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: 'Попередній',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Додати всі значення',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Додати вибрані значення',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Вилучити всі значення',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Вилучити вибрані значення',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Виберіть дату',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Змінити дату',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'Закрити',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Відкрити',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Будь ласка, прийміть ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `Дата ${s(name)} повинна бути пізніше за ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `Дата ${s(name)} має бути в майбутньому.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `Поле ${s(name)} може містити лише літери.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `Поле ${s(name)} може містити лише літери та цифри.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `Поле ${s(name)} може містити лише літери та пробіли.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} повинен містити алфавітні символи.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} повинен містити букви або цифри.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} повинен містити літери або пробіли.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} повинен містити символ.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} повинен містити великі регістри.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} повинен містити малі регістри.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} повинен містити цифри.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} має бути символом.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} може містити лише великі літери.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} може містити лише малі літери.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `Дата ${s(name)} повинна бути раніше за ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `Дата ${s(name)} повинна бути в минулому.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Це поле заповнено неправильно і не може бути надіслано.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `Поле ${s(name)} повинно бути між ${a} та ${b}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `Поле ${s(name)} не збігається.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `Поле ${s(\n        name\n      )} має неправильну дату. Будь ласка, використовуйте формат ${args[0]}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'Це поле заповнено неправильно і не може бути надіслано.'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `Дата ${s(name)} повинна бути між ${date(args[0])} та ${date(\n      args[1]\n    )}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Будь ласка, введіть дійсну електронну адресу.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `Поле ${s(name)} не повинно закінчуватися на ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `Поле ${s(name)} має неприпустиме значення.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `Поле ${s(name)} має містити щонайменше один символ.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `Довжина поля ${s(\n        name\n      )} повинна бути меншою або дорівнювати ${max} символам.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} має бути довжиною ${max} символів.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `Довжина поля ${s(\n        name\n      )} повинна бути більшою або дорівнювати ${min} символам.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `Довжина поля ${s(\n      name\n    )} повинна бути між ${min} та ${max} символами.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `Поле ${s(name)} має неприпустиме значення.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `Не може бути вибрано більше ніж ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `Поле ${s(name)} має бути менше або дорівнювати ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Не вказано дозволені типи файлів.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `Тип файлу в полі ${s(name)} має бути: ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `Не може бути вибрано менше ніж ${args[0]} ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `Поле ${s(name)} має бути не менше ніж ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}” не дозволено в полі ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `Поле ${s(name)} має бути числом.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' або ')} потрібно.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `Поле ${s(name)} є обов'язковим.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `Поле ${s(name)} має починатися з ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Будь ласка, введіть коректну URL-адресу.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'Вибрана дата недійсна.',\n}\n\nexport const uk = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on a button for adding additional items.\n   */\n  add: \"Qo'shish\",\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: \"O'chirish\",\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: \"Hammasini o'chirish\",\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: \"Kechirasiz, barcha maydonlar to'g'ri to'ldirilmagan.\",\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Yuborish',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Hech qanday fayl tanlanmagan',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Yuqoriga ko’taring',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Pastga siljish',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Yuklanmoqda...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Ko’proq yuklang',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: 'Keyingi',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: 'Oldingi',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: `Barcha qiymatlarni qo'shish`,\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: `Tanlangan qiymatlarni qoʻshish`,\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Barcha qiymatlarni olib tashlang',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Tanlangan qiymatlarni olib tashlash',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Sanani tanlang',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: `O'zgartirish sanasi`,\n  /**\n   * Shown when there is something to close\n   */\n  close: 'Yopish',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Ochiq',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `${name} ni qabul qiling.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} ${date(args[0])} dan keyin bo'lishi kerak.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} kelajakda bo'lishi kerak.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(\n      name\n    )} faqat alifbo tartibidagi belgilardan iborat bo'lishi mumkin.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} faqat harflar va raqamlardan iborat bo'lishi mumkin.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} faqat harf va bo'shliqlardan iborat bo'lishi mumkin.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} alfavit belgilarini o'z ichiga olishi kerak.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} harflar yoki raqamlarni o'z ichiga olishi kerak.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} harflar yoki bo'shliqlar bo'lishi kerak.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} belgisi bo'lishi kerak.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} katta harfni o'z ichiga olishi kerak.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} kichik harflarni o'z ichiga olishi kerak.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} raqamlarini o'z ichiga olishi kerak.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} belgisi bo'lishi kerak.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} faqat katta harflarni o'z ichiga olishi mumkin.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} faqat kichik harflarni o'z ichiga olishi mumkin.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} ${date(args[0])} dan oldin bo'lishi kerak`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} o'tmishda bo'lishi kerak.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Bu maydon noto'g'ri sozlangan va uni yuborib bo'lmaydi.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} ${a} va ${b} orasida bo'lishi kerak.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} mos emas.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} haqiqiy sana emas, iltimos ${\n        args[0]\n      } formatidan foydalaning`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return \"Bu maydon noto'g'ri sozlangan va uni yuborib bo'lmaydi\"\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} ${date(args[0])} va ${date(\n      args[1]\n    )} oralig'ida bo'lishi kerak`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Iltimos amaldagi e-mail manzilingizni kiriting.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} ${list(args)} bilan tugamaydi.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} ruxsat etilgan qiymat emas.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} kamida bitta belgidan iborat bo'lishi kerak.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} ${max} ta belgidan kam yoki teng bo'lishi kerak.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} bo'lishi kerak ${max} belgilar uzun.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} ${min} ta belgidan ko'p yoki teng bo'lishi kerak.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(\n      name\n    )} ${min} va ${max} gacha belgilardan iborat bo'lishi kerak.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} ruxsat etilgan qiymat emas.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `${args[0]} ${name} dan ortiq bo'lishi mumkin emas.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} ${args[0]} dan kichik yoki teng bo'lishi kerak.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Fayl formatlariga ruxsat berilmagan.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} quyidagi turdagi bo'lishi kerak: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `${args[0]} ${name} dan kam bo'lmasligi kerak.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)} kamida ${args[0]} bo'lishi kerak.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `\"${value}\" ruxsat berilmagan ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} raqam bo'lishi kerak.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' yoki ')} kerak.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} talab qilinadi.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} ${list(args)} bilan boshlanmaydi.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Iltimos, tegishli URL manzilini kiriting.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'Tanlangan sana yaroqsiz.',\n}\n\nexport const uz = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on buttons for adding new items.\n   */\n  add: 'Thêm',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: 'Xoá',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: 'Xoá tất cả',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: 'Xin lỗi, không phải tất cả các trường đều được nhập đúng.',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: 'Gửi',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: 'Chưa chọn file',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: 'Di chuyển lên',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: 'Di chuyển xuống',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: 'Đang tải...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: 'Tải thêm',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: 'Tiếp',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: 'Trước',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: 'Thêm tất cả các giá trị',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: 'Thêm các giá trị đã chọn',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: 'Loại bỏ tất cả các giá trị',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: 'Loại bỏ các giá trị đã chọn',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: 'Chọn ngày',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: 'Thay đổi ngày',\n  /**\n   * Shown when there is something to close\n   */\n  close: 'Đóng',\n  /**\n   * Shown when there is something to open.\n   */\n  open: 'Mở',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `Hãy đồng ý với ${name}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} phải sau ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} phải trong tương lai.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} có thể chỉ bao gồm các chữ cái alphabet.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} có thể chỉ bao gồm các chữ cái và chữ số.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} chỉ có thể chứa các chữ cái và khoảng trắng.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} phải chứa các ký tự chữ cái.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} phải chứa chữ cái hoặc số.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} phải chứa chữ cái hoặc dấu cách.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} phải chứa ký hiệu.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} phải chứa chữ hoa.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} phải chứa chữ thường.`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} phải chứa số.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} phải là một ký hiệu.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} chỉ có thể chứa chữ hoa.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} chỉ có thể chứa chữ thường.`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} phải trước ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} phải trong quá khứ.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `Trường này đã được thiết lập sai và không thể gửi.`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} phải ở giữa ${a} và ${b}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} không khớp.`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} không phải ngày hợp lệ, hãy sử dụng định dạng ${\n        args[0]\n      }`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return 'Trường này đã được thiết lập sai và không thể gửi.'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} phải ở giữa khoảng từ ${date(args[0])} đến ${date(\n      args[1]\n    )}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: 'Hãy nhập một địa chỉ email hợp lệ.',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} không kết thúc với ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} không phải một giá trị được cho phép.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} phải có độ dài tối thiểu một ký tự.`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} phải có độ dài tối đa ${max} ký tự.`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} nên dài ${max} ký tự.`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} phải có độ dài tối thiểu ${min} ký tự.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(\n      name\n    )} phải có độ dài tối đa trong khoảng từ ${min} đến ${max} ký tự.`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} không phải một giá trị được cho phép.`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `${name} không thể lớn hơn ${args[0]}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} phải tối đa bằng ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return 'Định dạng tệp tin này không được phép.'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} phải là một trong các dạng: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `${name} không thể nhỏ hơn ${args[0]}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)} phải tối thiểu bằng ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `\"${value}\" không phải giá trị ${name} được phép.`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} phải là một số.`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join(' hoặc ')} cần có.`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} là bắt buộc.`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} không bắt đầu với ${list(args)}.`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `Vui lòng nhập một URL hợp lệ.`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: 'Ngày đã chọn không hợp lệ.',\n}\n\nexport const vi = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on a button for adding additional items.\n   */\n  add: '添加',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: '移除',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: '移除全部',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: '抱歉，部分字段未被正确填写。',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: '提交',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: '未选择文件',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: '上移',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: '下移',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: '加载中...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: '加载更多',\n  /**\n   * Shown on buttons that navigate state forward\n   */\n  next: '下一步',\n  /**\n   * Shown on buttons that navigate state backward\n   */\n  prev: '上一步',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: '添加所有值',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: '添加所选值',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: '移除所有值',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: '移除所选值',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: '选择日期',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: '更改日期',\n  /**\n   * Shown when there is something to close\n   */\n  close: '关闭',\n  /**\n   * Shown when there is something to open.\n   */\n  open: '打开',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `请接受${name}。`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)}必须晚于${date(args[0])}。`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)}必须是未来的日期。`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)}只能包含英文字母。`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)}只能包含字母和数字。`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)}只能包含字母和空格。`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter.\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n   */\n  contains_alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n    return `${s(name)} 必须包含字母字符`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n   */\n  contains_alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n    return `${s(name)} 必须包含字母或数字。`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n   */\n  contains_alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n    return `${s(name)} 必须包含字母或空格。`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no symbol\n   * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n   */\n  contains_symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n    return `${s(name)} 必须包含符号。`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no uppercase\n   * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n   */\n  contains_uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} 必须包含大写字母。`\n    /* </i18n> */\n  },\n\n  /**\n   * The value have no lowercase\n   * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n   */\n  contains_lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} 必须包含小写字母。`\n    /* </i18n> */\n  },\n\n  /**\n   *  The value have no numeric\n   * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n   */\n  contains_numeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n    return `${s(name)} 必须包含数字。`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not symbol\n   * @see {@link https://formkit.com/essentials/validation#symbol}\n   */\n  symbol({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n    return `${s(name)} 必须是符号。`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not uppercase\n   * @see {@link https://formkit.com/essentials/validation#uppercase}\n   */\n  uppercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n    return `${s(name)} 只能包含大写字母。`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not lowercase\n   * @see {@link https://formkit.com/essentials/validation#lowercase}\n   */\n  lowercase({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n    return `${s(name)} 只能包含小写字母。`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)}必须早于${date(args[0])}。`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)}必须是过去的日期。`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `该字段未被正确设置而无法提交。`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)}必须在${a}和${b}之间。`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)}不匹配。`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)}不是合法日期，请使用 ${args[0]} 格式`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return '该字段未被正确设置而无法提交'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)}必须在${date(args[0])}和${date(args[1])}之间`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: '请输入合法的电子邮件地址。',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)}必须以${list(args)}结尾。`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)}是不允许的。`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)}至少要有一个字符。`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)}必须少于或等于${max}个字符。`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)}必须包含${max}个字符。`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)}必须多于或等于${min}个字符。`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)}必须介于${min}和${max}个字符之间。`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)}是不允许的。`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `${name}不得多于${args[0]}个值。`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${name}不得大于${args[0]}。`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return '没有允许的文件格式。'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)}的类型必须为：${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `${name}不得少于${args[0]}个值。`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${s(name)}不得小于${args[0]}。`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `\"${value}\"不是一个合法的${name}。`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)}必须为数字。`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join('或')}${labels}需要。`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)}不得留空。`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)}必须以${list(args)}开头。`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `请输入有效的 URL。`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: '所选日期无效。',\n}\n\nexport const zh = { ui, validation }\n","import {\n  FormKitValidationMessages,\n  createMessageName,\n} from '@formkit/validation'\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\nimport { sentence as s, list, date, order } from '../formatters'\nimport { FormKitLocaleMessages } from '../i18n'\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui: FormKitLocaleMessages = {\n  /**\n   * Shown on a button for adding additional items.\n   */\n  add: '新增',\n  /**\n   * Shown when a button to remove items is visible.\n   */\n  remove: '移除',\n  /**\n   * Shown when there are multiple items to remove at the same time.\n   */\n  removeAll: '移除全部',\n  /**\n   * Shown when all fields are not filled out correctly.\n   */\n  incomplete: '很抱歉，部分欄位填寫錯誤',\n  /**\n   * Shown in a button inside a form to submit the form.\n   */\n  submit: '提交',\n  /**\n   * Shown when no files are selected.\n   */\n  noFiles: '尚未選取檔案',\n  /**\n   * Shown on buttons that move fields up in a list.\n   */\n  moveUp: '上移',\n  /**\n   * Shown on buttons that move fields down in a list.\n   */\n  moveDown: '下移',\n  /**\n   * Shown when something is actively loading.\n   */\n  isLoading: '載入中...',\n  /**\n   * Shown when there is more to load.\n   */\n  loadMore: '載入更多',\n  /**\n   * Show on buttons that navigate state forward\n   */\n  next: '下一個',\n  /**\n   * Show on buttons that navigate state backward\n   */\n  prev: '上一個',\n  /**\n   * Shown when adding all values.\n   */\n  addAllValues: '加入全部的值',\n  /**\n   * Shown when adding selected values.\n   */\n  addSelectedValues: '加入選取的值',\n  /**\n   * Shown when removing all values.\n   */\n  removeAllValues: '移除全部的值',\n  /**\n   * Shown when removing selected values.\n   */\n  removeSelectedValues: '移除選取的值',\n  /**\n   * Shown when there is a date to choose.\n   */\n  chooseDate: '選擇日期',\n  /**\n   * Shown when there is a date to change.\n   */\n  changeDate: '變更日期',\n  /**\n   * Shown when there is something to close\n   */\n  close: '關閉',\n  /**\n   * Shown when there is something to open.\n   */\n  open: '開放',\n}\n\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation: FormKitValidationMessages = {\n  /**\n   * The value is not an accepted value.\n   * @see {@link https://formkit.com/essentials/validation#accepted}\n   */\n  accepted({ name }): string {\n    /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n    return `請接受 ${name}`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not after\n   * @see {@link https://formkit.com/essentials/validation#date-after}\n   */\n  date_after({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n      return `${s(name)} 必須晚於 ${date(args[0])}`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} 必須晚於今日`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a letter.\n   * @see {@link https://formkit.com/essentials/validation#alpha}\n   */\n  alpha({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n    return `${s(name)} 欄位儘能填寫英文字母`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not alphanumeric\n   * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n   */\n  alphanumeric({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n    return `${s(name)} 欄位僅能填寫英文字母與數字`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not letter and/or spaces\n   * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n   */\n  alpha_spaces({ name }) {\n    /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n    return `${s(name)} 欄位儘能填寫英文字母與空白`\n    /* </i18n> */\n  },\n\n  /**\n   * The date is not before\n   * @see {@link https://formkit.com/essentials/validation#date-before}\n   */\n  date_before({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n      return `${s(name)} 必須早於 ${date(args[0])}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n    return `${s(name)} 必須早於今日`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not between two numbers\n   * @see {@link https://formkit.com/essentials/validation#between}\n   */\n  between({ name, args }) {\n    if (isNaN(args[0]) || isNaN(args[1])) {\n      /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n      return `欄位值錯誤，無法提交`\n      /* </i18n> */\n    }\n    const [a, b] = order(args[0], args[1])\n    /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n    return `${s(name)} 必須介於 ${a} 和 ${b}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The confirmation field does not match\n   * @see {@link https://formkit.com/essentials/validation#confirm}\n   */\n  confirm({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n    return `${s(name)} 與目標不一致`\n    /* </i18n> */\n  },\n\n  /**\n   * The value is not a valid date\n   * @see {@link https://formkit.com/essentials/validation#date-format}\n   */\n  date_format({ name, args }) {\n    if (Array.isArray(args) && args.length) {\n      /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n      return `${s(name)} 不是有效的日期，請使用 ${args[0]} 格式`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n    return '欄位值錯誤，無法提交'\n    /* </i18n> */\n  },\n\n  /**\n   * Is not within expected date range\n   * @see {@link https://formkit.com/essentials/validation#date-between}\n   */\n  date_between({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n    return `${s(name)} 必須介於 ${date(args[0])} 和 ${date(args[1])}`\n    /* </i18n> */\n  },\n\n  /**\n   * Shown when the user-provided value is not a valid email address.\n   * @see {@link https://formkit.com/essentials/validation#email}\n   */\n  email: '請輸入有效的 email',\n\n  /**\n   * Does not end with the specified value\n   * @see {@link https://formkit.com/essentials/validation#ends-with}\n   */\n  ends_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n    return `${s(name)} 的結尾必須是 ${list(args)}`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#is}\n   */\n  is({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n    return `${s(name)} 欄位的值不合規則`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not match specified length\n   * @see {@link https://formkit.com/essentials/validation#length}\n   */\n  length({ name, args: [first = 0, second = Infinity] }) {\n    const min = Number(first) <= Number(second) ? first : second\n    const max = Number(second) >= Number(first) ? second : first\n    if (min == 1 && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n      return `${s(name)} 欄位必須至少包含一個字`\n      /* </i18n> */\n    }\n    if (min == 0 && max) {\n      /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n      return `${s(name)} 的字數必須小於等於 ${max}`\n      /* </i18n> */\n    }\n    if (min === max) {\n      /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n      return `${s(name)} 的字數必須為 ${max}`\n      /* </i18n> */\n    }\n    if (min && max === Infinity) {\n      /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n      return `${s(name)} 的字數必須大於等於 ${min}`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n    return `${s(name)} 的字數必須介於 ${min} 和 ${max}`\n    /* </i18n> */\n  },\n\n  /**\n   * Value is not a match\n   * @see {@link https://formkit.com/essentials/validation#matches}\n   */\n  matches({ name }) {\n    /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n    return `${s(name)} 欄位的值無效`\n    /* </i18n> */\n  },\n\n  /**\n   * Exceeds maximum allowed value\n   * @see {@link https://formkit.com/essentials/validation#max}\n   */\n  max({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n      return `不能超過 ${args[0]} 個 ${name}.`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n    return `${s(name)} 必須小於等於 ${args[0]}.`\n    /* </i18n> */\n  },\n\n  /**\n   * The (field-level) value does not match specified mime type\n   * @see {@link https://formkit.com/essentials/validation#mime}\n   */\n  mime({ name, args }) {\n    if (!args[0]) {\n      /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n      return '非有效的檔案格式'\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n    return `${s(name)} 可接受的檔案格式為: ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not fulfill minimum allowed value\n   * @see {@link https://formkit.com/essentials/validation#min}\n   */\n  min({ name, node: { value }, args }) {\n    if (Array.isArray(value)) {\n      /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n      return `不可少於 ${args[0]} 個 ${name}`\n      /* </i18n> */\n    }\n    /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n    return `${name} 必須大於等於 ${args[0]}`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not an allowed value\n   * @see {@link https://formkit.com/essentials/validation#not}\n   */\n  not({ name, node: { value } }) {\n    /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n    return `“${value}” 不是 ${name} 欄位可接受的值`\n    /* </i18n> */\n  },\n\n  /**\n   *  Is not a number\n   * @see {@link https://formkit.com/essentials/validation#number}\n   */\n  number({ name }) {\n    /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n    return `${s(name)} 欄位必須是數字`\n    /* </i18n> */\n  },\n\n  /**\n   * Require one field.\n   * @see {@link https://formkit.com/essentials/validation#require-one}\n   */\n  require_one: ({ name, node, args: inputNames }) => {\n    const labels = inputNames\n      .map((name) => {\n        const dependentNode = node.at(name)\n        if (dependentNode) {\n          return createMessageName(dependentNode)\n        }\n        return false\n      })\n      .filter((name) => !!name)\n    labels.unshift(name)\n    /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n    return `${labels.join('或')}${labels}需要。`\n    /* </i18n> */\n  },\n\n  /**\n   * Required field.\n   * @see {@link https://formkit.com/essentials/validation#required}\n   */\n  required({ name }) {\n    /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n    return `${s(name)} 是必要欄位`\n    /* </i18n> */\n  },\n\n  /**\n   * Does not start with specified value\n   * @see {@link https://formkit.com/essentials/validation#starts-with}\n   */\n  starts_with({ name, args }) {\n    /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n    return `${s(name)} 的開頭必須是 ${list(args)}`\n    /* </i18n> */\n  },\n\n  /**\n   * Is not a url\n   * @see {@link https://formkit.com/essentials/validation#url}\n   */\n  url() {\n    /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n    return `請輸入有效的 url`\n    /* </i18n> */\n  },\n  /**\n   * Shown when the date is invalid.\n   */\n  invalidDate: '選取的日期無效',\n}\n\nexport const zhTW = { ui, validation }\n","import { FormKitNode, FormKitPlugin, FormKitTextFragment } from '@formkit/core'\nimport { has } from '@formkit/utils'\n\n/**\n * Note: We are choosing not to implement via Intl.Locale because the support is\n * not yet good enough to be used without polyfill consideration, and that\n * polyfill is 36.3Kb min + gzip — larger than all of FormKit.\n *\n * https://formatjs.io/docs/polyfills/intl-locale/\n *\n * Instead we use a very minimal solution that should provide very good support\n * for all users, and we're happy to expand this package if we see areas where\n * localization is not quite good enough. Also, once support for Intl.Locale\n * becomes better, we would expect this package to switch much of it's\n * underlying locale parsing logic to nose native APIs.\n */\n\n/**\n * A registry of locale messages — this is simply a keyed/value object with\n * string keys (message name) and either string values (for simple returns) or\n * functions that receive a context object.\n *\n * @public\n */\nexport interface FormKitLocaleMessages {\n  [index: string]: string | ((...args: any[]) => string)\n}\n\n/**\n * A locale is just a collection of locale message registries, they are keyed\n * by the type (like a namespace) ex: \"validation\" or \"ui\". Plugin authors\n * can declare their own types too.\n *\n * @public\n */\nexport interface FormKitLocale {\n  ui: FormKitLocaleMessages\n  [index: string]: FormKitLocaleMessages\n}\n\n/**\n * The locale registry is just a key-value pair of locale indexes ('ar', 'en',\n * 'it', etc.) to their respective locales.\n *\n * @public\n */\nexport interface FormKitLocaleRegistry {\n  [index: string]: FormKitLocale\n}\n\n/**\n * A registry of all i18n nodes.\n */\nconst i18nNodes = new Set<FormKitNode>()\n\n/**\n * The currently active locale.\n */\nlet activeLocale: string | null = null\n\n/**\n * Create a new internationalization plugin for FormKit.\n *\n * @param registry - The registry of {@link @formkit/i18n#FormKitLocaleRegistry | FormKitLocales}.\n *\n * @returns {@link @formkit/core#FormKitPlugin | FormKitPlugin}\n *\n * @public\n */\nexport function createI18nPlugin(\n  registry: FormKitLocaleRegistry\n): FormKitPlugin {\n  return function i18nPlugin(node: FormKitNode) {\n    i18nNodes.add(node)\n    if (activeLocale) node.config.locale = activeLocale\n\n    node.on('destroying', () => i18nNodes.delete(node))\n    let localeKey = parseLocale(node.config.locale, registry)\n    let locale = localeKey ? registry[localeKey] : ({} as FormKitLocale)\n    /* If the locale prop changes, update the active locale */\n    node.on('prop:locale', ({ payload: lang }) => {\n      localeKey = parseLocale(lang, registry)\n      locale = localeKey ? registry[localeKey] : ({} as FormKitLocale)\n      // Run through all the messages in the store and update with new locale\n      node.store.touch()\n    })\n    node.on('prop:label', () => node.store.touch())\n    node.on('prop:validationLabel', () => node.store.touch())\n\n    /**\n     * Hook into the core text or t() hook to perform localization on the\n     * output of core functionality.\n     */\n    node.hook.text((fragment: FormKitTextFragment, next) => {\n      const key = fragment.meta?.messageKey || fragment.key\n      if (has(locale, fragment.type) && has(locale[fragment.type], key)) {\n        const t = locale[fragment.type][key]\n        if (typeof t === 'function') {\n          fragment.value = Array.isArray(fragment.meta?.i18nArgs)\n            ? t(...fragment.meta!.i18nArgs) // eslint-disable-line @typescript-eslint/no-non-null-assertion\n            : t(fragment)\n        } else {\n          fragment.value = t\n        }\n      }\n      return next(fragment)\n    })\n  }\n}\n\n/**\n * Parse ISO 639-1 and 639-2 to a valid locale key.\n *\n * @param locale - An ISO 639-1 and (optionally) ISO 639-2 language tag. For these are valid locale keys:\n * zh\n * zh-CN\n * zh-HK\n * en\n * en-GB\n *\n * @param availableLocales - An array of locales that may be valid.\n *\n * @public\n */\nfunction parseLocale(\n  locale: string,\n  availableLocales: FormKitLocaleRegistry\n): string | false {\n  if (has(availableLocales, locale)) {\n    return locale\n  }\n  const [lang] = locale.split('-')\n  if (has(availableLocales, lang)) {\n    return lang\n  }\n  for (const locale in availableLocales) {\n    return locale\n  }\n  return false\n}\n\n/**\n * Change the active locale of all FormKit instances (global).\n * @param locale - The locale to change to\n */\nexport function changeLocale(locale: string) {\n  activeLocale = locale\n  for (const node of i18nNodes) {\n    node.config.locale = locale\n  }\n}\n","/**\n * The official FormKit internationalization (i18n) plugin. This package\n * contains the locales and the plugin that integrates FormKit with these\n * locales. Read the {@link https://formkit.com/essentials/internationalization\n * | internationalization documentation} for usage instructions.\n *\n * @packageDocumentation\n */\n\nimport { ar } from './locales/ar'\nimport { az } from './locales/az'\nimport { bg } from './locales/bg'\nimport { bs } from './locales/bs'\nimport { ca } from './locales/ca'\nimport { cs } from './locales/cs'\nimport { da } from './locales/da'\nimport { de } from './locales/de'\nimport { el } from './locales/el'\nimport { en } from './locales/en'\nimport { es } from './locales/es'\nimport { fa } from './locales/fa'\nimport { fi } from './locales/fi'\nimport { fr } from './locales/fr'\nimport { fy } from './locales/fy'\nimport { he } from './locales/he'\nimport { hr } from './locales/hr'\nimport { hu } from './locales/hu'\nimport { id } from './locales/id'\nimport { is } from './locales/is'\nimport { it } from './locales/it'\nimport { ja } from './locales/ja'\nimport { kk } from './locales/kk'\nimport { ko } from './locales/ko'\nimport { lt } from './locales/lt'\nimport { lv } from './locales/lv'\nimport { mn } from './locales/mn'\nimport { nb } from './locales/nb'\nimport { nl } from './locales/nl'\nimport { pl } from './locales/pl'\nimport { pt } from './locales/pt'\nimport { ro } from './locales/ro'\nimport { ru } from './locales/ru'\nimport { sk } from './locales/sk'\nimport { sl } from './locales/sl'\nimport { sr } from './locales/sr'\nimport { sv } from './locales/sv'\nimport { tet } from './locales/tet'\nimport { tg } from './locales/tg'\nimport { th } from './locales/th'\nimport { tr } from './locales/tr'\nimport { uk } from './locales/uk'\nimport { uz } from './locales/uz'\nimport { vi } from './locales/vi'\nimport { zh } from './locales/zh'\nimport { zhTW } from './locales/zh-TW'\n\n/**\n * Export all of the plugin logic\n */\nexport * from './i18n'\n\n/**\n * Export all the available locales at once.\n *\n * @public\n */\nexport const locales = {\n  ar,\n  az,\n  bg,\n  bs,\n  ca,\n  cs,\n  da,\n  de,\n  el,\n  en,\n  es,\n  fa,\n  fi,\n  fr,\n  fy,\n  he,\n  hr,\n  hu,\n  id,\n  it,\n  ja,\n  kk,\n  ko,\n  lt,\n  lv,\n  nb,\n  nl,\n  pl,\n  pt,\n  ro,\n  ru,\n  sk,\n  sl,\n  sr,\n  sv,\n  tet,\n  tg,\n  th,\n  tr,\n  uk,\n  uz,\n  vi,\n  zh,\n  'zh-TW': zhTW,\n  is,\n  mn,\n}\n\n/**\n * Export each locale individually for people who want to cherry pick.\n */\nexport {\n  ar,\n  az,\n  bg,\n  bs,\n  ca,\n  cs,\n  da,\n  de,\n  el,\n  en,\n  es,\n  fa,\n  fi,\n  fr,\n  fy,\n  he,\n  hr,\n  hu,\n  id,\n  it,\n  ja,\n  kk,\n  ko,\n  lt,\n  lv,\n  nb,\n  nl,\n  pl,\n  pt,\n  ro,\n  ru,\n  sk,\n  sl,\n  sr,\n  sv,\n  tet,\n  tg,\n  th,\n  tr,\n  uk,\n  uz,\n  vi,\n  zh,\n  zhTW,\n  is,\n  mn,\n}\n\n/**\n * Export all formatter functions.\n */\nexport * from './formatters'\n"]}