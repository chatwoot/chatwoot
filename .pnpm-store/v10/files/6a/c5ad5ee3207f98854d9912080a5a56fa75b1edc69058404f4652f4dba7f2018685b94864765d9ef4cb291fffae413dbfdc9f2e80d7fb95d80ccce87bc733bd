{"version":3,"file":"group.js","sourceRoot":"","sources":["../lib/group.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;AAEb,sDAA+B;AAC/B,wDAAiC;AACjC,sDAA+B;AAC/B,mCAAkC;AAalC,SAAgB,KAAK,CAAC,UAAU,EAAE,IAAI;IACpC,eAAM,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;AACtC,CAAC;AAFD,sBAEC;AAED,kBAAO,CAAC,KAAK,EAAE,eAAM,CAAC,CAAC;AAEvB,IAAM,CAAC,GAAG,KAAK,CAAC,SAAS,CAAC;AAO1B,CAAC,CAAC,MAAM,GAAG;IACT,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAQF,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC;AAUlB,CAAC,CAAC,OAAO,GAAG,eAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;AAQpC,CAAC,CAAC,OAAO,GAAG;IACV,IAAI,OAAO,GACT,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC;QAC9B,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC;QAC5B,IAAI,CAAC,KAAK,CAAC,sBAAsB,CAAC;QAClC,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;IAEnC,IAAI,OAAO;QAAE,OAAO,kBAAO,CAAC,OAAO,CAAC,CAAC;AACvC,CAAC,CAAC;AAQF,CAAC,CAAC,KAAK,GAAG;IACR,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;IACvC,IAAI,KAAK;QAAE,OAAO,KAAK,CAAC;IACxB,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;IAC7B,IAAI,kBAAO,CAAC,OAAO,CAAC;QAAE,OAAO,OAAO,CAAC;AACvC,CAAC,CAAC;AA0BF,CAAC,CAAC,MAAM,GAAG,UAAU,OAAO;IAC1B,IAAI,GAAG,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;IAC5B,IAAI,EAAE,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;IACxB,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;IAExB,IAAI,EAAE;QAAE,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC;IAEpB,KAAK,IAAM,KAAK,IAAI,OAAO,EAAE;QAC3B,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE;YACxD,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI;gBAC/B,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,KAAK,CAAC;gBAC/B,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;YAClB,IAAI,KAAK,IAAI,IAAI;gBAAE,SAAS;YAC5B,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC;YAC5B,OAAO,GAAG,CAAC,KAAK,CAAC,CAAC;SACnB;KACF;IAED,OAAO,GAAG,CAAC;AACb,CAAC,CAAC;AAWF,CAAC,CAAC,IAAI,GAAG,eAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;AAWrC,CAAC,CAAC,QAAQ,GAAG,eAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;AAW7C,CAAC,CAAC,SAAS,GAAG,eAAM,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;AAQ/C,CAAC,CAAC,UAAU,GAAG;IAEb,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;AAChE,CAAC,CAAC","sourcesContent":["\"use strict\";\n\nimport inherit from \"inherits\";\nimport isEmail from \"./is-email\";\nimport newDate from \"new-date\";\nimport { Facade } from \"./facade\";\n\n/**\n * Initialize a new `Group` facade with a `dictionary` of arguments.\n *\n * @param {Object} dictionary - The object to wrap.\n * @param {string} [dictionary.userId] - The user to add to the group.\n * @param {string} [dictionary.groupId] - The ID of the group.\n * @param {Object} [dictionary.traits] - The traits of the group.\n * @param {Object} opts - Options about what kind of Facade to create.\n *\n * @augments Facade\n */\nexport function Group(dictionary, opts) {\n  Facade.call(this, dictionary, opts);\n}\n\ninherit(Group, Facade);\n\nconst g = Group.prototype;\n\n/**\n * Return the type of facade this is. This will always return `\"group\"`.\n *\n * @return {string}\n */\ng.action = function () {\n  return \"group\";\n};\n\n/**\n * An alias for {@link Group#action}.\n *\n * @function\n * @return {string}\n */\ng.type = g.action;\n\n/**\n * Get the group ID from `groupId`.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @return {string}\n */\ng.groupId = Facade.field(\"groupId\");\n\n/**\n * Get the time of creation of the group from `traits.createdAt`,\n * `traits.created`, `properties.createdAt`, or `properties.created`.\n *\n * @return {Date}\n */\ng.created = function () {\n  var created =\n    this.proxy(\"traits.createdAt\") ||\n    this.proxy(\"traits.created\") ||\n    this.proxy(\"properties.createdAt\") ||\n    this.proxy(\"properties.created\");\n\n  if (created) return newDate(created);\n};\n\n/**\n * Get the group's email from `traits.email`, falling back to `groupId` only if\n * it looks like a valid email.\n *\n * @return {string}\n */\ng.email = function () {\n  var email = this.proxy(\"traits.email\");\n  if (email) return email;\n  var groupId = this.groupId();\n  if (isEmail(groupId)) return groupId;\n};\n\n/**\n * Get the group's traits. This is identical to how {@link Facade#traits}\n * works, except it looks at `traits.*` instead of `options.traits.*`.\n *\n * Traits are gotten from `traits`, augmented with a property `id` with\n * the event's `groupId`.\n *\n * The parameter `aliases` is meant to transform keys in `traits` into new\n * keys. Each alias like `{ \"xxx\": \"yyy\" }` will take whatever is at `xxx` in\n * the traits, and move it to `yyy`. If `xxx` is a method of this facade, it'll\n * be called as a function instead of treated as a key into the traits.\n *\n * @example\n * var obj = { traits: { foo: \"bar\" }, anonymousId: \"xxx\" }\n * var group = new Group(obj)\n *\n * group.traits() // { \"foo\": \"bar\" }\n * group.traits({ \"foo\": \"asdf\" }) // { \"asdf\": \"bar\" }\n * group.traits({ \"sessionId\": \"rofl\" }) // { \"rofl\": \"xxx\" }\n *\n * @param {Object} aliases - A mapping from keys to the new keys they should be\n * transformed to.\n * @return {Object}\n */\ng.traits = function (aliases) {\n  var ret = this.properties();\n  var id = this.groupId();\n  aliases = aliases || {};\n\n  if (id) ret.id = id;\n\n  for (const alias in aliases) {\n    if (Object.prototype.hasOwnProperty.call(aliases, alias)) {\n      const value = this[alias] == null\n        ? this.proxy(\"traits.\" + alias)\n        : this[alias]();\n      if (value == null) continue;\n      ret[aliases[alias]] = value;\n      delete ret[alias];\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Get the group's name from `traits.name`.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @function\n * @return {string}\n */\ng.name = Facade.proxy(\"traits.name\");\n\n/**\n * Get the group's industry from `traits.industry`.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @function\n * @return {string}\n */\ng.industry = Facade.proxy(\"traits.industry\");\n\n/**\n * Get the group's employee count from `traits.employees`.\n *\n * This *should* be a number, but may not be if the client isn't adhering to\n * the spec.\n *\n * @function\n * @return {number}\n */\ng.employees = Facade.proxy(\"traits.employees\");\n\n/**\n * Get the group's properties from `traits` or `properties`, falling back to\n * simply an empty object.\n *\n * @return {Object}\n */\ng.properties = function () {\n  // TODO remove this function\n  return this.field(\"traits\") || this.field(\"properties\") || {};\n};\n"]}