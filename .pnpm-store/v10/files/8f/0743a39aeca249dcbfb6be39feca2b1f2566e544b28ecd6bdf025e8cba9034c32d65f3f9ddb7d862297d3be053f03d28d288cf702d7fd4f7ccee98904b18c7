{"version":3,"file":"getLCP.js","sources":["../../../../src/metrics/web-vitals/getLCP.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WINDOW } from '../../types';\nimport { bindReporter } from './lib/bindReporter';\nimport { getActivationStart } from './lib/getActivationStart';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { runOnce } from './lib/runOnce';\nimport { whenActivated } from './lib/whenActivated';\nimport type { LCPMetric, LCPReportCallback, MetricRatingThresholds, ReportOpts } from './types';\n\n/** Thresholds for LCP. See https://web.dev/articles/lcp#what_is_a_good_lcp_score */\nexport const LCPThresholds: MetricRatingThresholds = [2500, 4000];\n\nconst reportedMetricIDs: Record<string, boolean> = {};\n\n/**\n * Calculates the [LCP](https://web.dev/articles/lcp) value for the current page and\n * calls the `callback` function once the value is ready (along with the\n * relevant `largest-contentful-paint` performance entry used to determine the\n * value). The reported value is a `DOMHighResTimeStamp`.\n *\n * If the `reportAllChanges` configuration option is set to `true`, the\n * `callback` function will be called any time a new `largest-contentful-paint`\n * performance entry is dispatched, or once the final value of the metric has\n * been determined.\n */\nexport const onLCP = (onReport: LCPReportCallback, opts: ReportOpts = {}) => {\n  whenActivated(() => {\n    const visibilityWatcher = getVisibilityWatcher();\n    const metric = initMetric('LCP');\n    let report: ReturnType<typeof bindReporter>;\n\n    const handleEntries = (entries: LCPMetric['entries']) => {\n      const lastEntry = entries[entries.length - 1] as LargestContentfulPaint;\n      if (lastEntry) {\n        // Only report if the page wasn't hidden prior to LCP.\n        if (lastEntry.startTime < visibilityWatcher.firstHiddenTime) {\n          // The startTime attribute returns the value of the renderTime if it is\n          // not 0, and the value of the loadTime otherwise. The activationStart\n          // reference is used because LCP should be relative to page activation\n          // rather than navigation start if the page was prerendered. But in cases\n          // where `activationStart` occurs after the LCP, this time should be\n          // clamped at 0.\n          metric.value = Math.max(lastEntry.startTime - getActivationStart(), 0);\n          metric.entries = [lastEntry];\n          report();\n        }\n      }\n    };\n\n    const po = observe('largest-contentful-paint', handleEntries);\n\n    if (po) {\n      report = bindReporter(onReport, metric, LCPThresholds, opts.reportAllChanges);\n\n      const stopListening = runOnce(() => {\n        if (!reportedMetricIDs[metric.id]) {\n          handleEntries(po.takeRecords() as LCPMetric['entries']);\n          po.disconnect();\n          reportedMetricIDs[metric.id] = true;\n          report(true);\n        }\n      });\n\n      // Stop listening after input. Note: while scrolling is an input that\n      // stops LCP observation, it's unreliable since it can be programmatically\n      // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75\n      ['keydown', 'click'].forEach(type => {\n        if (WINDOW.document) {\n          // Wrap in a setTimeout so the callback is run in a separate task\n          // to avoid extending the keyboard/click handler to reduce INP impact\n          // https://github.com/GoogleChrome/web-vitals/issues/383\n          addEventListener(type, () => setTimeout(stopListening, 0), true);\n        }\n      });\n\n      onHidden(stopListening);\n    }\n  });\n};\n"],"names":["whenActivated","getVisibilityWatcher","initMetric","getActivationStart","observe","bindReporter","runOnce","WINDOW","onHidden"],"mappings":";;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAYA;AACO,MAAM,aAAa,GAA2B,CAAC,IAAI,EAAE,IAAI,EAAC;AACjE;AACA,MAAM,iBAAiB,GAA4B,EAAE,CAAA;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACa,MAAA,KAAA,GAAQ,CAAC,QAAQ,EAAqB,IAAI,GAAe,EAAE,KAAK;AAC7E,EAAEA,2BAAa,CAAC,MAAM;AACtB,IAAI,MAAM,iBAAA,GAAoBC,yCAAoB,EAAE,CAAA;AACpD,IAAI,MAAM,MAAO,GAAEC,qBAAU,CAAC,KAAK,CAAC,CAAA;AACpC,IAAI,IAAI,MAAM,CAAA;AACd;AACA,IAAI,MAAM,aAAc,GAAE,CAAC,OAAO,KAA2B;AAC7D,MAAM,MAAM,SAAU,GAAE,OAAO,CAAC,OAAO,CAAC,MAAA,GAAS,CAAC,CAAE,EAAA;AACpD,MAAM,IAAI,SAAS,EAAE;AACrB;AACA,QAAQ,IAAI,SAAS,CAAC,YAAY,iBAAiB,CAAC,eAAe,EAAE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,MAAM,CAAC,KAAA,GAAQ,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,YAAYC,qCAAkB,EAAE,EAAE,CAAC,CAAC,CAAA;AAChF,UAAU,MAAM,CAAC,OAAA,GAAU,CAAC,SAAS,CAAC,CAAA;AACtC,UAAU,MAAM,EAAE,CAAA;AAClB,SAAQ;AACR,OAAM;AACN,KAAK,CAAA;AACL;AACA,IAAI,MAAM,KAAKC,eAAO,CAAC,0BAA0B,EAAE,aAAa,CAAC,CAAA;AACjE;AACA,IAAI,IAAI,EAAE,EAAE;AACZ,MAAM,MAAO,GAAEC,yBAAY,CAAC,QAAQ,EAAE,MAAM,EAAE,aAAa,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAA;AACnF;AACA,MAAM,MAAM,aAAc,GAAEC,eAAO,CAAC,MAAM;AAC1C,QAAQ,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE;AAC3C,UAAU,aAAa,CAAC,EAAE,CAAC,WAAW,IAA2B,CAAA;AACjE,UAAU,EAAE,CAAC,UAAU,EAAE,CAAA;AACzB,UAAU,iBAAiB,CAAC,MAAM,CAAC,EAAE,CAAA,GAAI,IAAI,CAAA;AAC7C,UAAU,MAAM,CAAC,IAAI,CAAC,CAAA;AACtB,SAAQ;AACR,OAAO,CAAC,CAAA;AACR;AACA;AACA;AACA;AACA,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC,IAAA,IAAQ;AAC3C,QAAQ,IAAIC,YAAM,CAAC,QAAQ,EAAE;AAC7B;AACA;AACA;AACA,UAAU,gBAAgB,CAAC,IAAI,EAAE,MAAM,UAAU,CAAC,aAAa,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,CAAA;AAC1E,SAAQ;AACR,OAAO,CAAC,CAAA;AACR;AACA,MAAMC,iBAAQ,CAAC,aAAa,CAAC,CAAA;AAC7B,KAAI;AACJ,GAAG,CAAC,CAAA;AACJ;;;;;"}