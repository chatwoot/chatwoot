{"version":3,"file":"utils.cjs.development.js","sources":["../src/debounce.ts","../src/helpers.ts","../src/url.ts","../src/types/message.ts","../src/email.ts","../src/string.ts","../src/math.ts","../src/canned.ts","../src/typingStatus.ts","../src/sla.ts","../src/date.ts","../src/fileUploadRules.ts"],"sourcesContent":["/**\n * Creates a debounced version of a function that delays invoking the provided function\n * until after a specified wait time has elapsed since the last time it was invoked.\n *\n * @param {Function} func - The function to debounce. Will receive any arguments passed to the debounced function.\n * @param {number} wait - The number of milliseconds to delay execution after the last call.\n * @param {boolean} [immediate] - If true, the function will execute immediately on the first call,\n *                               then start the debounce behavior for subsequent calls.\n * @param {number} [maxWait] - The maximum time the function can be delayed before it's forcibly executed.\n *                            If specified, the function will be called after this many milliseconds\n *                            have passed since its last execution, regardless of the debounce wait time.\n *\n * @returns {Function} A debounced version of the original function that has the following behavior:\n *   - Delays execution until `wait` milliseconds have passed since the last call\n *   - If `immediate` is true, executes on the leading edge of the first call\n *   - If `maxWait` is provided, ensures the function is called at least once every `maxWait` milliseconds\n *   - Preserves the `this` context and arguments of the most recent call\n *   - Cancels pending executions when called again within the wait period\n *\n * @example\n * // Basic debounce\n * const debouncedSearch = debounce(searchAPI, 300);\n *\n * // With immediate execution\n * const debouncedSave = debounce(saveData, 1000, true);\n *\n * // With maximum wait time\n * const debouncedUpdate = debounce(updateUI, 200, false, 1000);\n */\nexport const debounce = (\n  func: (...args: any[]) => void,\n  wait: number,\n  immediate?: boolean,\n  maxWait?: number\n) => {\n  let timeout: ReturnType<typeof setTimeout> | null = null;\n  let lastInvokeTime = 0;\n\n  return function(this: any, ...args: any[]) {\n    const time = Date.now();\n    const isFirstCall = lastInvokeTime === 0;\n\n    // Check if this is the first call and immediate execution is requested\n    if (isFirstCall && immediate) {\n      lastInvokeTime = time;\n      func.apply(this, args);\n      return;\n    }\n\n    // Clear any existing timeout\n    if (timeout !== null) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n\n    // Calculate if maxWait threshold has been reached\n    const timeSinceLastInvoke = time - lastInvokeTime;\n    const shouldInvokeNow =\n      maxWait !== undefined && timeSinceLastInvoke >= maxWait;\n\n    if (shouldInvokeNow) {\n      lastInvokeTime = time;\n      func.apply(this, args);\n      return;\n    }\n\n    // Set a new timeout\n    timeout = setTimeout(() => {\n      lastInvokeTime = Date.now();\n      timeout = null;\n      func.apply(this, args);\n    }, wait);\n  };\n};\n","import isToday from 'date-fns/isToday';\nimport isYesterday from 'date-fns/isYesterday';\n/**\n * @name Get contrasting text color\n * @description Get contrasting text color from a text color\n * @param bgColor  Background color of text.\n * @returns contrasting text color\n */\nexport const getContrastingTextColor = (bgColor: string): string => {\n  const color = bgColor.replace('#', '');\n  const r = parseInt(color.slice(0, 2), 16);\n  const g = parseInt(color.slice(2, 4), 16);\n  const b = parseInt(color.slice(4, 6), 16);\n  // http://stackoverflow.com/a/3943023/112731\n  return r * 0.299 + g * 0.587 + b * 0.114 > 186 ? '#000000' : '#FFFFFF';\n};\n\n/**\n * @name Get formatted date\n * @description Get date in today, yesterday or any other date format\n * @param date  date\n * @param todayText  Today text\n * @param yesterdayText  Yesterday text\n * @returns formatted date\n */\nexport const formatDate = ({\n  date,\n  todayText,\n  yesterdayText,\n}: {\n  date: string;\n  todayText: string;\n  yesterdayText: string;\n}) => {\n  const dateValue = new Date(date);\n  if (isToday(dateValue)) return todayText;\n  if (isYesterday(dateValue)) return yesterdayText;\n  return date;\n};\n\n/**\n * @name formatTime\n * @description Format time to Hour, Minute and Second\n * @param timeInSeconds  number\n * @returns formatted time\n */\n\nexport const formatTime = (timeInSeconds: number) => {\n  let formattedTime = '';\n  if (timeInSeconds >= 60 && timeInSeconds < 3600) {\n    const minutes = Math.floor(timeInSeconds / 60);\n    formattedTime = `${minutes} Min`;\n    const seconds = minutes === 60 ? 0 : Math.floor(timeInSeconds % 60);\n    return formattedTime + `${seconds > 0 ? ' ' + seconds + ' Sec' : ''}`;\n  }\n  if (timeInSeconds >= 3600 && timeInSeconds < 86400) {\n    const hours = Math.floor(timeInSeconds / 3600);\n    formattedTime = `${hours} Hr`;\n    const minutes =\n      timeInSeconds % 3600 < 60 || hours === 24\n        ? 0\n        : Math.floor((timeInSeconds % 3600) / 60);\n    return formattedTime + `${minutes > 0 ? ' ' + minutes + ' Min' : ''}`;\n  }\n  if (timeInSeconds >= 86400) {\n    const days = Math.floor(timeInSeconds / 86400);\n    formattedTime = `${days} Day`;\n    const hours =\n      timeInSeconds % 86400 < 3600 || days >= 364\n        ? 0\n        : Math.floor((timeInSeconds % 86400) / 3600);\n    return formattedTime + `${hours > 0 ? ' ' + hours + ' Hr' : ''}`;\n  }\n  return `${Math.floor(timeInSeconds)} Sec`;\n};\n\n/**\n * @name trimContent\n * @description Trim a string to max length\n * @param content String to trim\n * @param maxLength Length of the string to trim, default 1024\n * @param ellipsis Boolean to add dots at the end of the string, default false\n * @returns trimmed string\n */\nexport const trimContent = (\n  content: string = '',\n  maxLength: number = 1024,\n  ellipsis: boolean = false\n) => {\n  let trimmedContent = content;\n  if (content.length > maxLength) {\n    trimmedContent = content.substring(0, maxLength);\n  }\n  if (ellipsis) {\n    trimmedContent = trimmedContent + '...';\n  }\n  return trimmedContent;\n};\n\n/**\n * @name convertSecondsToTimeUnit\n * @description Convert seconds to time unit\n * @param seconds  number\n * @param unitNames  object\n * @returns time and unit\n * @example\n * convertToUnit(60, { minute: 'm', hour: 'h', day: 'd' }); // { time: 1, unit: 'm' }\n * convertToUnit(60, { minute: 'Minutes', hour: 'Hours', day: 'Days' }); // { time: 1, unit: 'Minutes' }\n */\n\nexport const convertSecondsToTimeUnit = (\n  seconds: number,\n  unitNames: { minute: string; hour: string; day: string }\n) => {\n  if (seconds === null || seconds === 0) return { time: '', unit: '' };\n  if (seconds < 3600)\n    return { time: Number((seconds / 60).toFixed(1)), unit: unitNames.minute };\n  if (seconds < 86400)\n    return { time: Number((seconds / 3600).toFixed(1)), unit: unitNames.hour };\n  return { time: Number((seconds / 86400).toFixed(1)), unit: unitNames.day };\n};\n\n/**\n * @name fileNameWithEllipsis\n * @description Truncates a filename while preserving the extension\n * @param {Object} file - File object containing filename or name property\n * @param {number} [maxLength=26] - Maximum length of the filename (excluding extension)\n * @param {string} [ellipsis='…'] - Character to use for truncation\n * @returns {string} Truncated filename with extension\n * @example\n * fileNameWithEllipsis({ filename: 'very-long-filename.pdf' }, 10) // 'very-long-f….pdf'\n * fileNameWithEllipsis({ name: 'short.txt' }, 10) // 'short.txt'\n */\nexport const fileNameWithEllipsis = (\n  file: { filename?: string; name?: string },\n  maxLength: number = 26,\n  ellipsis: string = '…'\n): string => {\n  const fullName = file?.filename ?? file?.name ?? 'Untitled';\n\n  const dotIndex = fullName.lastIndexOf('.');\n  if (dotIndex === -1) return fullName;\n\n  const [name, extension] = [\n    fullName.slice(0, dotIndex),\n    fullName.slice(dotIndex),\n  ];\n\n  if (name.length <= maxLength) return fullName;\n\n  return `${name.slice(0, maxLength)}${ellipsis}${extension}`;\n};\n\n/**\n * @name splitName\n * @description Splits a full name into firstName and lastName\n * @param {string} name - Full name of the user\n * @returns {Object} Object with firstName and lastName\n * @example\n * splitName('Mary Jane Smith') // { firstName: 'Mary Jane', lastName: 'Smith' }\n * splitName('Alice') // { firstName: 'Alice', lastName: '' }\n * splitName('John Doe') // { firstName: 'John', lastName: 'Doe' }\n * splitName('') // { firstName: '', lastName: '' }\n */\nexport const splitName = (\n  fullName: string\n): { firstName: string; lastName: string } => {\n  const trimmedName = fullName.trim();\n  if (!trimmedName) {\n    return {\n      firstName: '',\n      lastName: '',\n    };\n  }\n\n  // Split the name by spaces\n  const nameParts = trimmedName.split(/\\s+/);\n\n  // If only one word, treat it as firstName\n  if (nameParts.length === 1) {\n    return {\n      firstName: nameParts[0],\n      lastName: '',\n    };\n  }\n\n  // Last element is lastName, everything else is firstName\n  const lastName = nameParts.pop() || '';\n  const firstName = nameParts.join(' ');\n\n  return { firstName, lastName };\n};\n\ninterface DownloadFileOptions {\n  url: string;\n  type: string;\n  extension?: string | null;\n}\n/**\n * Downloads a file from a URL with proper file type handling\n * @name downloadFile\n * @description Downloads file from URL with proper type handling and cleanup\n * @param {Object} options Download configuration options\n * @param {string} options.url File URL to download\n * @param {string} options.type File type identifier\n * @param {string} [options.extension] Optional file extension\n * @returns {Promise<boolean>} Returns true if download successful, false otherwise\n */\nexport const downloadFile = async ({\n  url,\n  type,\n  extension = null,\n}: DownloadFileOptions): Promise<void> => {\n  if (!url || !type) {\n    throw new Error('Invalid download parameters');\n  }\n\n  try {\n    const response = await fetch(url, { cache: 'no-store' });\n\n    if (!response.ok) {\n      throw new Error(`Download failed: ${response.status}`);\n    }\n\n    const blobData = await response.blob();\n\n    const contentType = response.headers.get('content-type');\n\n    const fileExtension =\n      extension || (contentType ? contentType.split('/')[1] : type);\n\n    const dispositionHeader = response.headers.get('content-disposition');\n    const filenameMatch = dispositionHeader?.match(/filename=\"(.*?)\"/);\n\n    const filename =\n      filenameMatch?.[1] ?? `attachment_${Date.now()}.${fileExtension}`;\n\n    const blobUrl = URL.createObjectURL(blobData);\n    const link = Object.assign(document.createElement('a'), {\n      href: blobUrl,\n      download: filename,\n      style: 'display: none',\n    });\n\n    document.body.append(link);\n    link.click();\n    link.remove();\n    URL.revokeObjectURL(blobUrl);\n  } catch (error) {\n    throw error instanceof Error ? error : new Error('Download failed');\n  }\n};\n\ninterface FileInfo {\n  name: string; // Full filename with extension\n  type: string; // File extension only\n  base: string; // Filename without extension\n}\n/**\n * Extracts file information from a URL or file path.\n *\n * @param {string} url - The URL or file path to process\n * @returns {FileInfo} Object containing file information\n *\n * @example\n * getFileInfo('https://example.com/path/Document%20Name.PDF')\n * returns {\n *   name: 'Document Name.PDF',\n *   type: 'pdf',\n *   base: 'Document Name'\n * }\n *\n * getFileInfo('invalid/url')\n * returns {\n *   name: 'Unknown File',\n *   type: '',\n *   base: 'Unknown File'\n * }\n */\nexport const getFileInfo = (url: string): FileInfo => {\n  const defaultInfo: FileInfo = {\n    name: 'Unknown File',\n    type: '',\n    base: 'Unknown File',\n  };\n\n  if (!url || typeof url !== 'string') {\n    return defaultInfo;\n  }\n\n  try {\n    // Handle both URL and file path cases\n    const cleanUrl = url\n      .split(/[?#]/)[0] // Remove query params and hash\n      .replace(/\\\\/g, '/'); // Normalize path separators\n\n    const encodedFilename = cleanUrl.split('/').pop();\n    if (!encodedFilename) {\n      return defaultInfo;\n    }\n\n    const fileName = decodeURIComponent(encodedFilename);\n\n    // Handle hidden files (starting with dot)\n    if (fileName.startsWith('.') && !fileName.includes('.', 1)) {\n      return { name: fileName, type: '', base: fileName };\n    }\n\n    // last index is where the file extension starts\n    // This will handle cases where the file name has multiple dots\n    const lastDotIndex = fileName.lastIndexOf('.');\n    if (lastDotIndex === -1 || lastDotIndex === 0) {\n      return { name: fileName, type: '', base: fileName };\n    }\n\n    const base = fileName.slice(0, lastDotIndex);\n    const type = fileName.slice(lastDotIndex + 1).toLowerCase();\n\n    return { name: fileName, type, base };\n  } catch (error) {\n    console.error('Error processing file info:', error);\n    return defaultInfo;\n  }\n};\n\n/**\n * Formats a number with K/M/B/T suffixes using Intl.NumberFormat\n * @param {number | string | null | undefined} num - The number to format\n * @returns {string} Formatted string (e.g., \"1.2K\", \"2.3M\", \"999\")\n * @example\n * formatNumber(1234)     // \"1.2K\"\n * formatNumber(1000000)  // \"1M\"\n * formatNumber(999)      // \"999\"\n * formatNumber(12344)    // \"12.3K\"\n */\nexport const formatNumber = (\n  num: number | string | null | undefined\n): string => {\n  const n = Number(num) || 0;\n  return new Intl.NumberFormat('en', {\n    notation: 'compact',\n    maximumFractionDigits: 1,\n  } as Intl.NumberFormatOptions).format(n);\n};\n","/**\n * URL related helper functions\n */\n\n/**\n * Converts various input formats to URL objects.\n * Handles URL objects, domain strings, relative paths, and full URLs.\n * @param {string|URL} input - Input to convert to URL object\n * @returns {URL|null} URL object or null if input is invalid\n */\nexport const toURL = (input: string | URL | null | undefined): URL | null => {\n  if (!input) return null;\n  if (input instanceof URL) return input;\n\n  if (\n    typeof input === 'string' &&\n    !input.includes('://') &&\n    !input.startsWith('/')\n  ) {\n    return new URL(`https://${input}`);\n  }\n\n  if (typeof input === 'string' && input.startsWith('/')) {\n    return new URL(input, window.location.origin);\n  }\n\n  return new URL(input as string);\n};\n\n/**\n * Determines if two URLs belong to the same host by comparing their normalized URL objects.\n * Handles various input formats including URL objects, domain strings, relative paths, and full URLs.\n * Returns false if either URL cannot be parsed or normalized.\n * @param {string|URL} url1 - First URL to compare\n * @param {string|URL} url2 - Second URL to compare\n * @returns {boolean} True if both URLs have the same host, false otherwise\n */\nexport const isSameHost = (\n  url1: string | URL | null | undefined,\n  url2: string | URL | null | undefined\n): boolean => {\n  try {\n    const urlObj1 = toURL(url1);\n    const urlObj2 = toURL(url2);\n\n    if (!urlObj1 || !urlObj2) return false;\n\n    return urlObj1.hostname === urlObj2.hostname;\n  } catch (error) {\n    return false;\n  }\n};\n\n/**\n * Check if a string is a valid domain name.\n * An empty string is allowed and considered valid.\n *\n * @param domain Domain to validate.\n * @returns Whether the domain matches the rules.\n */\nexport const isValidDomain = (domain: string): boolean => {\n  if (domain === '') return true;\n\n  const domainRegex = /^(?!-)(?!.*--)[\\p{L}0-9-]{1,63}(?<!-)(?:\\.(?!-)(?!.*--)[\\p{L}0-9-]{1,63}(?<!-))*\\.[\\p{L}]{2,63}$/u;\n\n  return domainRegex.test(domain) && domain.length <= 253;\n};\n","export type EmailAttributes = {\n  bcc: string[] | null;\n  cc: string[] | null;\n  content_type: string;\n  date: string;\n  from: string[] | null;\n  html_content: {\n    full: string;\n    reply: string;\n    quoted: string;\n  };\n  in_reply_to: null;\n  message_id: string;\n  multipart: boolean;\n  number_of_attachments: number;\n  subject: string;\n  text_content: {\n    full: string;\n    reply: string;\n    quoted: string;\n  };\n  to: string[] | null;\n};\n\nexport type IncomingContentAttribute = {\n  email: EmailAttributes | null;\n};\n\nexport type OutgoingContentAttribute = {\n  cc_emails: string[] | null;\n  bcc_emails: string[] | null;\n  to_emails: string[] | null;\n  external_error: string;\n};\n\nexport type MessageContentAttributes =\n  | IncomingContentAttribute\n  | OutgoingContentAttribute;\n\nexport type MessageConversation = {\n  id: number;\n  assignee_id: number;\n  custom_attributes: Record<string, any>;\n  first_reply_created_at: number;\n  waiting_since: number;\n  status: string;\n  unread_count: number;\n  last_activity_at: number;\n  contact_inbox: { source_id: string };\n};\n\nexport type MessageAttachment = {\n  id: number;\n  message_id: number;\n  file_type: string;\n  account_id: number;\n  extension: null;\n  data_url: string;\n  thumb_url: string;\n  file_size: number;\n  width: null;\n  height: null;\n};\n\nexport type MessageSender = {\n  custom_attributes: {};\n  email: null;\n  id: number;\n  identifier: null;\n  name: string;\n  phone_number: null;\n  thumbnail: string;\n  type: string;\n};\n\nexport enum MessageType {\n  INCOMING = 0,\n  OUTGOING = 1,\n  ACTIVITY = 2,\n  TEMPLATE = 3,\n}\n\nexport type BaseEmailMessage = {\n  id: number;\n  content: null;\n  account_id: number;\n  inbox_id: number;\n  conversation_id: number;\n  message_type: MessageType;\n  created_at: number;\n  updated_at: string;\n  private: boolean;\n  status: string;\n  source_id: null;\n  content_type: string;\n  content_attributes: MessageContentAttributes;\n  sender_type: string;\n  sender_id: number;\n  external_source_ids: {};\n  additional_attributes: {};\n  processed_message_content: null;\n  sentiment: {};\n  conversation: MessageConversation;\n  attachments: MessageAttachment[];\n  sender: MessageSender;\n};\n\nexport type IncomingEmailMessage = BaseEmailMessage & {\n  message_type: MessageType.INCOMING;\n  content_attributes: IncomingContentAttribute;\n};\n\nexport type OutgoingEmailMessage = BaseEmailMessage & {\n  message_type: MessageType.OUTGOING;\n  content_attributes: OutgoingContentAttribute;\n};\n\nexport type EmailMessage = IncomingEmailMessage | OutgoingEmailMessage;\n","import {\n  EmailMessage,\n  MessageType,\n  IncomingEmailMessage,\n  OutgoingEmailMessage,\n} from './types/message';\n\nexport function getRecipients(\n  lastEmail: EmailMessage,\n  conversationContact: string,\n  inboxEmail: string,\n  forwardToEmail: string\n) {\n  let to = [] as string[];\n  let cc = [] as string[];\n  let bcc = [] as string[];\n\n  // Reset emails if there's no lastEmail\n  if (!lastEmail) {\n    return { to, cc, bcc };\n  }\n\n  // Extract values from lastEmail and current conversation context\n  const { message_type: messageType } = lastEmail;\n\n  const isIncoming = messageType === MessageType.INCOMING;\n\n  let emailAttributes = {} as {\n    cc: string[] | null;\n    bcc: string[] | null;\n    from: string[] | null;\n    to: string[] | null;\n  };\n\n  if (isIncoming) {\n    const {\n      content_attributes: contentAttributes,\n    } = lastEmail as IncomingEmailMessage;\n    const email = contentAttributes.email;\n    emailAttributes = {\n      cc: email?.cc || [],\n      bcc: email?.bcc || [],\n      from: email?.from || [],\n      to: [],\n    };\n  } else {\n    const {\n      content_attributes: contentAttributes,\n    } = lastEmail as OutgoingEmailMessage;\n\n    const {\n      cc_emails: ccEmails = [],\n      bcc_emails: bccEmails = [],\n      to_emails: toEmails = [],\n    } = contentAttributes ?? {};\n\n    emailAttributes = {\n      cc: ccEmails,\n      bcc: bccEmails,\n      to: toEmails,\n      from: [],\n    };\n  }\n\n  let isLastEmailFromContact = false;\n  // this will be false anyway if the last email was outgoing\n  isLastEmailFromContact =\n    isIncoming && (emailAttributes.from ?? []).includes(conversationContact);\n\n  if (isIncoming) {\n    // Reply to sender if incoming\n    to.push(...(emailAttributes.from ?? []));\n  } else {\n    // Otherwise, reply to the last recipient (for outgoing message)\n    // If there is no to_emails, reply to the conversation contact\n    to.push(...(emailAttributes.to ?? [conversationContact]));\n  }\n\n  // Start building the cc list, including additional recipients\n  // If the email had multiple recipients, include them in the cc list\n  cc = emailAttributes.cc ? [...emailAttributes.cc] : [];\n  // Only include 'to' recipients in cc for incoming emails, not for outgoing\n  if (Array.isArray(emailAttributes.to) && isIncoming) {\n    cc.push(...emailAttributes.to);\n  }\n\n  // Add the conversation contact to cc if the last email wasn't sent by them\n  // Ensure the message is an incoming one\n  if (!isLastEmailFromContact && isIncoming) {\n    cc.push(conversationContact);\n  }\n\n  // Process BCC: Remove conversation contact from bcc as it is already in cc\n  bcc = (emailAttributes.bcc || []).filter(\n    emailAddress => emailAddress !== conversationContact\n  );\n\n  // Filter out undesired emails from cc:\n  // - Remove conversation contact from cc if they sent the last email\n  // - Remove inbox and forward-to email to prevent loops\n  // - Remove emails matching the reply UUID pattern\n  const replyUUIDPattern = /^reply\\+([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/i;\n  cc = cc.filter(email => {\n    if (email === conversationContact && isLastEmailFromContact) {\n      return false;\n    }\n    if (email === inboxEmail || email === forwardToEmail) {\n      return false;\n    }\n    if (replyUUIDPattern.test(email)) {\n      return false;\n    }\n    return true;\n  });\n\n  bcc = bcc.filter(email => {\n    if (\n      email === inboxEmail ||\n      email === forwardToEmail ||\n      replyUUIDPattern.test(email)\n    ) {\n      return false;\n    }\n\n    return true;\n  });\n\n  // Deduplicate each recipient list by converting to a Set then back to an array\n  to = Array.from(new Set(to));\n  cc = Array.from(new Set(cc));\n  bcc = Array.from(new Set(bcc));\n\n  return {\n    to,\n    cc,\n    bcc,\n  };\n}\n","/**\n * Function that parses a string boolean value and returns the corresponding boolean value\n * @param {string | number} candidate - The string boolean value to be parsed\n * @return {boolean} - The parsed boolean value\n */\nexport function parseBoolean(candidate: string | number) {\n  try {\n    // lowercase the string, so TRUE becomes true\n    const candidateString = String(candidate).toLowerCase();\n\n    // wrap in boolean to ensure that the return value\n    // is a boolean even if values like 0 or 1 are passed\n    return Boolean(JSON.parse(candidateString));\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Sanitizes text for safe HTML rendering by escaping potentially dangerous characters\n * while preserving valid HTML tags.\n *\n * This function performs the following transformations:\n * - Converts newline characters (\\n) to HTML line breaks (<br>)\n * - Escapes stray '<' characters that are not part of valid HTML tags (e.g., \"x < 5\" → \"x &lt; 5\")\n * - Escapes stray '>' characters that are not part of valid HTML tags (e.g., \"x > 5\" → \"x &gt; 5\")\n * - Preserves valid HTML tags and their attributes (e.g., <div>, <span class=\"test\">, </p>)\n *\n * LIMITATIONS: This regex-based approach has known limitations:\n * - Cannot properly handle '>' characters inside HTML attributes (e.g., <div title=\"x > 5\"> may not work correctly)\n * - Complex nested quotes or edge cases may not be handled perfectly\n * - For more complex HTML sanitization needs, consider using a proper HTML parser\n *\n * @param {string | null | undefined} text - The text to sanitize. Can be null or undefined.\n * @returns {string} The sanitized text safe for HTML rendering, or the original value if null/undefined.\n *\n * @example\n * sanitizeTextForRender('Hello\\nWorld') // 'Hello<br>World'\n * sanitizeTextForRender('if x < 5') // 'if x &lt; 5'\n * sanitizeTextForRender('<div>Hello</div>') // '<div>Hello</div>'\n * sanitizeTextForRender('Price < $100 <strong>Sale!</strong>') // 'Price &lt; $100 <strong>Sale!</strong>'\n */\nexport function sanitizeTextForRender(text: string | null | undefined) {\n  if (!text) return '';\n\n  return (\n    text\n      .replace(/\\n/g, '<br>')\n\n      // Escape < that doesn't start a valid HTML tag\n      // Regex breakdown:\n      // <          - matches '<'\n      // (?!        - negative lookahead (not followed by)\n      //   \\/?      - optional forward slash for closing tags\n      //   \\w+      - one or more word characters (tag name)\n      //   (?:      - non-capturing group for attributes\n      //     \\s+    - whitespace before attributes\n      //     [^>]*  - any characters except '>' (attribute content)\n      //   )?       - attributes are optional\n      //   \\/?>     - optional self-closing slash, then '>'\n      // )          - end lookahead\n      .replace(/<(?!\\/?\\w+(?:\\s+[^>]*)?\\/?>)/g, '&lt;')\n\n      // Escape > that isn't part of an HTML tag\n      // Regex breakdown:\n      // (?<!       - negative lookbehind (not preceded by)\n      //   <        - opening '<'\n      //   \\/?      - optional forward slash for closing tags\n      //   \\w+      - one or more word characters (tag name)\n      //   (?:      - non-capturing group for attributes\n      //     \\s+    - whitespace before attributes\n      //     [^>]*  - any characters except '>' (attribute content)\n      //   )?       - attributes are optional\n      //   \\/?      - optional self-closing slash before >\n      // )          - end lookbehind\n      // >          - matches '>'\n      .replace(/(?<!<\\/?\\w+(?:\\s+[^>]*)?\\/?)>/g, '&gt;')\n  );\n}\n","/**\n * Sorts an array of numbers in ascending order.\n * @param {number[]} arr - The array of numbers to be sorted.\n * @returns {number[]} - The sorted array.\n */\nexport function sortAsc(arr: number[]) {\n  // .slice() is used to create a copy of the array so that the original array is not mutated\n  return arr.slice().sort((a, b) => a - b);\n}\n\n/**\n * Calculates the quantile value of an array at a specified percentile.\n * @param {number[]} arr - The array of numbers to calculate the quantile value from.\n * @param {number} q - The percentile to calculate the quantile value for.\n * @returns {number} - The quantile value.\n */\nexport function quantile(arr: number[], q: number) {\n  const sorted = sortAsc(arr); // Sort the array in ascending order\n  return _quantileForSorted(sorted, q); // Calculate the quantile value\n}\n\n/**\n * Clamps a value between a minimum and maximum range.\n * @param {number} min - The minimum range.\n * @param {number} max - The maximum range.\n * @param {number} value - The value to be clamped.\n * @returns {number} - The clamped value.\n */\nexport function clamp(min: number, max: number, value: number) {\n  if (value < min) {\n    return min;\n  }\n  if (value > max) {\n    return max;\n  }\n  return value;\n}\n\n/**\n * This method assumes the the array provided is already sorted in ascending order.\n * It's a helper method for the quantile method and should not be exported as is.\n *\n * @param {number[]} arr - The array of numbers to calculate the quantile value from.\n * @param {number} q - The percentile to calculate the quantile value for.\n * @returns {number} - The quantile value.\n */\nfunction _quantileForSorted(sorted: number[], q: number) {\n  const clamped = clamp(0, 1, q); // Clamp the percentile between 0 and 1\n  const pos = (sorted.length - 1) * clamped; // Calculate the index of the element at the specified percentile\n  const base = Math.floor(pos); // Find the index of the closest element to the specified percentile\n  const rest = pos - base; // Calculate the decimal value between the closest elements\n\n  // Interpolate the quantile value between the closest elements\n  // Most libraries don't to the interpolation, but I'm just having fun here\n  // also see https://en.wikipedia.org/wiki/Quantile#Estimating_quantiles_from_a_sample\n  if (sorted[base + 1] !== undefined) {\n    // in case the position was a integer, the rest will be 0 and the interpolation will be skipped\n    return sorted[base] + rest * (sorted[base + 1] - sorted[base]);\n  }\n\n  // Return the closest element if there is no interpolation possible\n  return sorted[base];\n}\n\n/**\n * Calculates the quantile values for an array of intervals.\n * @param {number[]} data - The array of numbers to calculate the quantile values from.\n * @param {number[]} intervals - The array of intervals to calculate the quantile values for.\n * @returns {number[]} - The array of quantile values for the intervals.\n */\nexport const getQuantileIntervals = (data: number[], intervals: number[]) => {\n  // Sort the array in ascending order before looping through the intervals.\n  // depending on the size of the array and the number of intervals, this can speed up the process by at least twice\n  // for a random array of 100 numbers and 5 intervals, the speedup is 3x\n  const sorted = sortAsc(data);\n\n  return intervals.map(interval => {\n    return _quantileForSorted(sorted, interval);\n  });\n};\n\n/**\n * Calculates the relative position of a point from the center of an element\n *\n * @param {number} mouseX - The x-coordinate of the mouse pointer\n * @param {number} mouseY - The y-coordinate of the mouse pointer\n * @param {DOMRect} rect - The bounding client rectangle of the target element\n * @returns {{relativeX: number, relativeY: number}} Object containing x and y distances from center\n */\nexport const calculateCenterOffset = (\n  mouseX: number,\n  mouseY: number,\n  rect: DOMRect\n) => {\n  const centerX = rect.left + rect.width / 2;\n  const centerY = rect.top + rect.height / 2;\n\n  return {\n    relativeX: mouseX - centerX,\n    relativeY: mouseY - centerY,\n  };\n};\n\n/**\n * Applies a rotation matrix to coordinates\n * Used to adjust mouse coordinates based on the current rotation of the image\n * This function implements a standard 2D rotation matrix transformation:\n * [x']   [cos(θ) -sin(θ)] [x]\n * [y'] = [sin(θ)  cos(θ)] [y]\n *\n * @see {@link https://mathworld.wolfram.com/RotationMatrix.html} for mathematical derivation\n *\n * @param {number} relativeX - X-coordinate relative to center before rotation\n * @param {number} relativeY - Y-coordinate relative to center before rotation\n * @param {number} angle - Rotation angle in degrees\n * @returns {{rotatedX: number, rotatedY: number}} Coordinates after applying rotation matrix\n */\nexport const applyRotationTransform = (\n  relativeX: number,\n  relativeY: number,\n  angle: number\n) => {\n  const radians = (angle * Math.PI) / 180;\n  const cos = Math.cos(-radians);\n  const sin = Math.sin(-radians);\n\n  return {\n    rotatedX: relativeX * cos - relativeY * sin,\n    rotatedY: relativeX * sin + relativeY * cos,\n  };\n};\n\n/**\n * Converts absolute rotated coordinates to percentage values relative to image dimensions\n * Ensures values are clamped between 0-100% for valid CSS transform-origin properties\n *\n * @param {number} rotatedX - X-coordinate after rotation transformation\n * @param {number} rotatedY - Y-coordinate after rotation transformation\n * @param {number} width - Width of the target element\n * @param {number} height - Height of the target element\n * @returns {{x: number, y: number}} Normalized coordinates as percentages (0-100%)\n */\nexport const normalizeToPercentage = (\n  rotatedX: number,\n  rotatedY: number,\n  width: number,\n  height: number\n) => {\n  // Convert to percentages (0-100%) relative to image dimensions\n  // 50% represents the center point\n  // The division by (width/2) maps the range [-width/2, width/2] to [-50%, 50%]\n  // Adding 50% shifts this to [0%, 100%]\n  return {\n    x: Math.max(0, Math.min(100, 50 + (rotatedX / (width / 2)) * 50)),\n    y: Math.max(0, Math.min(100, 50 + (rotatedY / (height / 2)) * 50)),\n  };\n};\n","import {\n  Conversation,\n  Sender,\n  Variables,\n  CustomAttributes,\n  Contact,\n  Inbox,\n} from './types/conversation';\nconst MESSAGE_VARIABLES_REGEX = /{{(.*?)}}/g;\n\nconst skipCodeBlocks = (str: string) => str.replace(/```(?:.|\\n)+?```/g, '');\n\nexport const capitalizeName = (name: string | null): string => {\n  if (!name) return ''; // Return empty string for null or undefined input\n\n  return name\n    .split(' ') // Split the name into words based on spaces\n    .map(word => {\n      if (!word) return ''; // Handle empty strings that might result from multiple spaces\n\n      // Capitalize only the first character, leaving the rest unchanged\n      // This correctly handles accented characters like 'í' in 'Aríel'\n      return word.charAt(0).toUpperCase() + word.slice(1);\n    })\n    .join(' '); // Rejoin the words with spaces\n};\n\nexport const getFirstName = ({ user }: { user: Sender }) => {\n  const firstName = user?.name ? user.name.split(' ').shift() : '';\n  return capitalizeName(firstName as string);\n};\n\nexport const getLastName = ({ user }: { user: Sender }) => {\n  if (user && user.name) {\n    const lastName =\n      user.name.split(' ').length > 1 ? user.name.split(' ').pop() : '';\n    return capitalizeName(lastName as string);\n  }\n  return '';\n};\n\nexport const getMessageVariables = ({\n  conversation,\n  contact,\n  inbox,\n}: {\n  conversation: Conversation;\n  contact?: Contact;\n  inbox?: Inbox;\n}) => {\n  const {\n    meta: { assignee, sender },\n    id,\n    custom_attributes: conversationCustomAttributes = {},\n  } = conversation;\n  const { custom_attributes: contactCustomAttributes } = contact || {};\n\n  const standardVariables = {\n    'contact.name': capitalizeName(sender?.name || ''),\n    'contact.first_name': getFirstName({ user: sender }),\n    'contact.last_name': getLastName({ user: sender }),\n    'contact.email': sender?.email,\n    'contact.phone': sender?.phone_number,\n    'contact.id': sender?.id,\n    'conversation.id': id,\n    'inbox.id': inbox?.id,\n    'inbox.name': inbox?.name,\n    'agent.name': capitalizeName(assignee?.name || ''),\n    'agent.first_name': getFirstName({ user: assignee }),\n    'agent.last_name': getLastName({ user: assignee }),\n    'agent.email': assignee?.email ?? '',\n  };\n  const conversationCustomAttributeVariables = Object.entries(\n    conversationCustomAttributes ?? {}\n  ).reduce((acc: CustomAttributes, [key, value]) => {\n    acc[`conversation.custom_attribute.${key}`] = value;\n    return acc;\n  }, {});\n\n  const contactCustomAttributeVariables = Object.entries(\n    contactCustomAttributes ?? {}\n  ).reduce((acc: CustomAttributes, [key, value]) => {\n    acc[`contact.custom_attribute.${key}`] = value;\n    return acc;\n  }, {});\n\n  const variables = {\n    ...standardVariables,\n    ...conversationCustomAttributeVariables,\n    ...contactCustomAttributeVariables,\n  };\n\n  return variables;\n};\n\nexport const replaceVariablesInMessage = ({\n  message,\n  variables,\n}: {\n  message: string;\n  variables: Variables;\n}) => {\n  // @ts-ignore\n  return message?.replace(MESSAGE_VARIABLES_REGEX, (_, replace) => {\n    return variables[replace.trim()]\n      ? variables[replace.trim().toLowerCase()]\n      : '';\n  });\n};\n\nexport const getUndefinedVariablesInMessage = ({\n  message,\n  variables,\n}: {\n  message: string;\n  variables: Variables;\n}) => {\n  const messageWithOutCodeBlocks = skipCodeBlocks(message);\n  const matches = messageWithOutCodeBlocks.match(MESSAGE_VARIABLES_REGEX);\n  if (!matches) return [];\n\n  return matches\n    .map(match => {\n      return match\n        .replace('{{', '')\n        .replace('}}', '')\n        .trim();\n    })\n    .filter(variable => {\n      return variables[variable] === undefined;\n    });\n};\n","/**\n * Creates a typing indicator utility.\n * @param onStartTyping Callback function to be called when typing starts\n * @param onStopTyping Callback function to be called when typing stops after delay\n * @param idleTime Delay for idle time in ms before considering typing stopped\n * @returns An object with start and stop methods for typing indicator\n */\n\ntype CallbackFunction = () => void;\ntype Timeout = ReturnType<typeof setTimeout>;\n\nexport const createTypingIndicator = (\n  onStartTyping: CallbackFunction,\n  onStopTyping: CallbackFunction,\n  idleTime: number\n) => {\n  let timer: Timeout | null = null;\n\n  const start = (): void => {\n    if (!timer) {\n      onStartTyping();\n    }\n    reset();\n  };\n\n  const stop = (): void => {\n    if (timer) {\n      clearTimeout(timer as Timeout);\n      timer = null;\n      onStopTyping();\n    }\n  };\n\n  const reset = (): void => {\n    if (timer) {\n      clearTimeout(timer as Timeout);\n    }\n    timer = setTimeout(() => {\n      stop();\n    }, idleTime) as Timeout;\n  };\n\n  return { start, stop };\n};\n","import { Conversation } from './types/conversation';\nimport { AppliedSla, SLAStatus } from './types/sla';\n\n/**\n * Calculates the threshold for an SLA based on the current time and the provided threshold.\n * @param timeOffset - The time offset in seconds.\n * @param threshold - The threshold in seconds or null if not applicable.\n * @returns The calculated threshold in seconds or null if the threshold is null.\n */\nconst calculateThreshold = (\n  timeOffset: number,\n  threshold: number | null\n): number | null => {\n  // Calculate the time left for the SLA to breach or the time since the SLA has missed\n  if (threshold === null) return null;\n  const currentTime = Math.floor(Date.now() / 1000);\n  return timeOffset + threshold - currentTime;\n};\n\n/**\n * Finds the most urgent SLA status based on the threshold.\n * @param SLAStatuses - An array of SLAStatus objects.\n * @returns The most urgent SLAStatus object.\n */\nconst findMostUrgentSLAStatus = (SLAStatuses: SLAStatus[]): SLAStatus => {\n  // Sort the SLAs based on the threshold and return the most urgent SLA\n  SLAStatuses.sort(\n    (sla1, sla2) => Math.abs(sla1.threshold) - Math.abs(sla2.threshold)\n  );\n  return SLAStatuses[0];\n};\n\n/**\n * Formats the SLA time in a human-readable format.\n * @param seconds - The time in seconds.\n * @returns A formatted string representing the time.\n */\nconst formatSLATime = (seconds: number): string => {\n  const units: { [key: string]: number } = {\n    y: 31536000, // 60 * 60 * 24 * 365\n    mo: 2592000, // 60 * 60 * 24 * 30\n    d: 86400, // 60 * 60 * 24\n    h: 3600, // 60 * 60\n    m: 60,\n  };\n\n  if (seconds < 60) {\n    return '1m';\n  }\n\n  // we will only show two parts, two max granularity's, h-m, y-d, d-h, m, but no seconds\n  const parts: string[] = [];\n\n  Object.keys(units).forEach(unit => {\n    const value = Math.floor(seconds / units[unit]);\n    if (seconds < 60 && parts.length > 0) return;\n    if (parts.length === 2) return;\n    if (value > 0) {\n      parts.push(value + unit);\n      seconds -= value * units[unit];\n    }\n  });\n  return parts.join(' ');\n};\n\n/**\n * Creates an SLA object based on the type, applied SLA, and chat details.\n * @param type - The type of SLA (FRT, NRT, RT).\n * @param appliedSla - The applied SLA details.\n * @param chat - The chat details.\n * @returns An object containing the SLA status or null if conditions are not met.\n */\nconst createSLAObject = (\n  type: string,\n  appliedSla: AppliedSla,\n  chat: Conversation\n): { threshold: number | null; type: string; condition: boolean } | null => {\n  const {\n    sla_first_response_time_threshold: frtThreshold,\n    sla_next_response_time_threshold: nrtThreshold,\n    sla_resolution_time_threshold: rtThreshold,\n    created_at: createdAt,\n  } = appliedSla;\n\n  const {\n    first_reply_created_at: firstReplyCreatedAt,\n    waiting_since: waitingSince,\n    status,\n  } = chat;\n\n  const SLATypes: {\n    [key: string]: { threshold: number | null; condition: boolean };\n  } = {\n    FRT: {\n      threshold: calculateThreshold(createdAt, frtThreshold),\n      //   Check FRT only if threshold is not null and first reply hasn't been made\n      condition:\n        frtThreshold !== null &&\n        (!firstReplyCreatedAt || firstReplyCreatedAt === 0),\n    },\n    NRT: {\n      threshold: calculateThreshold(waitingSince, nrtThreshold),\n      // Check NRT only if threshold is not null, first reply has been made and we are waiting since\n      condition:\n        nrtThreshold !== null && !!firstReplyCreatedAt && !!waitingSince,\n    },\n    RT: {\n      threshold: calculateThreshold(createdAt, rtThreshold),\n      // Check RT only if the conversation is open and threshold is not null\n      condition: status === 'open' && rtThreshold !== null,\n    },\n  };\n\n  const SLAStatus = SLATypes[type];\n  return SLAStatus ? { ...SLAStatus, type } : null;\n};\n\n/**\n * Evaluates SLA conditions and returns an array of SLAStatus objects.\n * @param appliedSla - The applied SLA details.\n * @param chat - The chat details.\n * @returns An array of SLAStatus objects.\n */\nconst evaluateSLAConditions = (\n  appliedSla: AppliedSla,\n  chat: Conversation\n): {\n  threshold: number;\n  type: string;\n  icon: string;\n  isSlaMissed: boolean;\n}[] => {\n  // Filter out the SLA based on conditions and update the object with the breach status(icon, isSlaMissed)\n  const SLATypes = ['FRT', 'NRT', 'RT'];\n  return SLATypes.map(type => createSLAObject(type, appliedSla, chat))\n    .filter(\n      (\n        SLAStatus\n      ): SLAStatus is { threshold: number; type: string; condition: boolean } =>\n        !!SLAStatus && SLAStatus.condition\n    )\n    .map(SLAStatus => ({\n      ...SLAStatus,\n      icon: SLAStatus.threshold <= 0 ? 'flame' : 'alarm',\n      isSlaMissed: SLAStatus.threshold <= 0,\n    }));\n};\n\n/**\n * Evaluates the SLA status for a given chat and applied SLA.\n * @param {Object} params - The parameters object.\n * @param params.appliedSla - The applied SLA details.\n * @param params.chat - The chat details.\n * @returns An object containing the most urgent SLA status.\n */\nexport const evaluateSLAStatus = ({\n  appliedSla,\n  chat,\n}: {\n  appliedSla: AppliedSla;\n  chat: Conversation;\n}): { type: string; threshold: string; icon: string; isSlaMissed: boolean } => {\n  if (!appliedSla || !chat)\n    return { type: '', threshold: '', icon: '', isSlaMissed: false };\n\n  // Filter out the SLA and create the object for each breach\n  const SLAStatuses = evaluateSLAConditions(appliedSla, chat) as SLAStatus[];\n\n  // Return the most urgent SLA which is latest to breach or has missed\n  const mostUrgent = findMostUrgentSLAStatus(SLAStatuses);\n  return mostUrgent\n    ? {\n        type: mostUrgent?.type,\n        threshold: formatSLATime(\n          mostUrgent.threshold <= 0\n            ? -mostUrgent.threshold\n            : mostUrgent.threshold\n        ),\n        icon: mostUrgent.icon,\n        isSlaMissed: mostUrgent.isSlaMissed,\n      }\n    : { type: '', threshold: '', icon: '', isSlaMissed: false };\n};\n","/**\n * Parses various date formats into a JavaScript Date object\n *\n * This function handles different date input formats commonly found in conversation data:\n * - 10-digit timestamps (Unix seconds) - automatically converted to milliseconds\n * - 13-digit timestamps (Unix milliseconds) - used directly\n * - String representations of timestamps\n * - ISO date strings (e.g., \"2025-06-01T12:30:00Z\")\n * - Simple date strings (e.g., \"2025-06-01\") - time defaults to 00:00:00\n * - Date strings with space-separated time (e.g., \"2025-06-01 12:30:00\")\n *\n * Note: This function follows JavaScript Date constructor behavior for date parsing.\n * Some invalid dates like \"2025-02-30\" auto-correct to valid dates (becomes \"2025-03-02\"),\n * while malformed strings like \"2025-13-01\" or \"2025-06-01T25:00:00\" return null.\n *\n * @example\n * coerceToDate('2025-06-01') // Returns Date object set to 2025-06-01 00:00:00\n * coerceToDate('2025-06-01T12:30:00Z') // Returns Date object with specified time\n * coerceToDate(1748834578) // Returns Date object (10-digit timestamp in seconds)\n * coerceToDate(1748834578000) // Returns Date object (13-digit timestamp in milliseconds)\n * coerceToDate('1748834578') // Returns Date object (string timestamp converted)\n * coerceToDate(null) // Returns null\n * coerceToDate('invalid-date') // Returns null\n */\nexport const coerceToDate = (\n  dateInput: string | number | null | undefined\n): Date | null => {\n  if (dateInput == null) return null;\n\n  let timestamp = typeof dateInput === 'number' ? dateInput : null;\n\n  // Handle string inputs that represent numeric timestamps\n  if (\n    timestamp === null &&\n    typeof dateInput === 'string' &&\n    /^\\d+$/.test(dateInput)\n  ) {\n    timestamp = Number(dateInput);\n  }\n\n  // Process numeric timestamps\n  if (timestamp !== null) {\n    // Convert 10-digit timestamps (seconds) to milliseconds\n    const timestampMs =\n      timestamp.toString().length === 10 ? timestamp * 1000 : timestamp;\n    return new Date(timestampMs);\n  }\n\n  // Process string date inputs\n  if (typeof dateInput === 'string') {\n    const dateObj = new Date(dateInput);\n\n    // Return null for invalid dates\n    if (Number.isNaN(dateObj.getTime())) return null;\n\n    // If no time component is specified, set time to 00:00:00\n    // this is because by default JS will set the time to midnight UTC for that date\n    const hasTimeComponent =\n      /T\\d{2}:\\d{2}(:\\d{2})?/.test(dateInput) || /\\d{2}:\\d{2}/.test(dateInput);\n    if (!hasTimeComponent) {\n      dateObj.setHours(0, 0, 0, 0);\n    }\n\n    return dateObj;\n  }\n\n  return null;\n};\n","// ---------- Types ----------\ninterface MimeGroups {\n  image?: string[];\n  audio?: string[];\n  video?: string[];\n  text?: string[];\n  application?: string[];\n}\n\ninterface ChannelNodeConfig {\n  mimeGroups?: MimeGroups;\n  extensions?: string[];\n  max?: number;\n  maxByCategory?: {\n    image?: number;\n    video?: number;\n    audio?: number;\n    document?: number;\n  };\n}\n\ntype DefaultNodeConfig = Omit<ChannelNodeConfig, 'max'> & { max: number };\n\ninterface ChannelConfig {\n  [medium: string]: ChannelNodeConfig | undefined; // includes '*'\n}\n\ntype CategoryType = 'image' | 'video' | 'audio' | 'document' | undefined;\n\ninterface GetChannelParams {\n  channelType?: ChannelKey; // align with ChannelKey\n  medium?: string;\n}\n\ninterface GetMaxUploadParams extends GetChannelParams {\n  mime?: string;\n}\n\n// ---------- Channels ----------\nexport const INBOX_TYPES = {\n  WEB: 'Channel::WebWidget',\n  FB: 'Channel::FacebookPage',\n  TWITTER: 'Channel::TwitterProfile',\n  TWILIO: 'Channel::TwilioSms',\n  WHATSAPP: 'Channel::Whatsapp',\n  API: 'Channel::Api',\n  EMAIL: 'Channel::Email',\n  TELEGRAM: 'Channel::Telegram',\n  LINE: 'Channel::Line',\n  SMS: 'Channel::Sms',\n  INSTAGRAM: 'Channel::Instagram',\n  VOICE: 'Channel::Voice',\n} as const;\n\n// derive key type AFTER INBOX_TYPES is declared\ntype ChannelKey = typeof INBOX_TYPES[keyof typeof INBOX_TYPES];\n\n// CHANNEL_CONFIGS shape: channels are optional; default node requires max\ntype ChannelConfigs = Partial<Record<ChannelKey, ChannelConfig>> & {\n  default: DefaultNodeConfig;\n};\n\n// ---------- Docs ----------\n/**\n * LINE: https://developers.line.biz/en/reference/messaging-api/#image-message, https://developers.line.biz/en/reference/messaging-api/#video-message\n * INSTAGRAM: https://developers.facebook.com/docs/instagram-platform/instagram-api-with-instagram-login/messaging-api#requirements\n * WHATSAPP CLOUD: https://developers.facebook.com/docs/whatsapp/cloud-api/reference/media#supported-media-types\n * TWILIO WHATSAPP: https://www.twilio.com/docs/whatsapp/guidance-whatsapp-media-messages\n * TWILIO SMS: https://www.twilio.com/docs/messaging/guides/accepted-mime-types\n */\n\n// ---------- Central config ----------\n/**\n * Upload rules configuration.\n *\n * Each node can define:\n * - mimeGroups: { prefix: [exts] }\n *   Example: { image: [\"png\",\"jpeg\"] } → [\"image/png\",\"image/jpeg\"]\n *   Special: [\"*\"] → allow all (e.g. \"image/*\").\n * - extensions: Raw file extensions (e.g. [\".3gpp\"]).\n * - max: Default maximum size in MB for this channel.\n * - maxByCategory: Override per category (image, video, audio, document).\n *\n * Resolution order:\n *  1. channel + medium (e.g. TWILIO.whatsapp)\n *  2. channel + \"*\" fallback\n *  3. global default\n */\nconst CHANNEL_CONFIGS: ChannelConfigs = {\n  default: {\n    mimeGroups: {\n      image: ['*'],\n      audio: ['*'],\n      video: ['*'],\n      text: ['csv', 'plain', 'rtf', 'xml'],\n      application: [\n        'json',\n        'pdf',\n        'xml',\n        'zip',\n        'x-7z-compressed',\n        'vnd.rar',\n        'x-tar',\n        'msword',\n        'vnd.ms-excel',\n        'vnd.ms-powerpoint',\n        'vnd.oasis.opendocument.text',\n        'vnd.openxmlformats-officedocument.presentationml.presentation',\n        'vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        'vnd.openxmlformats-officedocument.wordprocessingml.document',\n      ],\n    },\n    extensions: ['.3gpp'],\n    max: 40,\n  },\n\n  [INBOX_TYPES.WHATSAPP]: {\n    '*': {\n      mimeGroups: {\n        audio: ['aac', 'amr', 'mp3', 'm4a', 'ogg'],\n        image: ['jpeg', 'png'],\n        video: ['3gp', 'mp4'],\n        text: ['plain'],\n        application: [\n          'pdf',\n          'vnd.ms-excel',\n          'vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n          'msword',\n          'vnd.openxmlformats-officedocument.wordprocessingml.document',\n          'vnd.ms-powerpoint',\n          'vnd.openxmlformats-officedocument.presentationml.presentation',\n        ],\n      },\n      maxByCategory: { image: 5, video: 16, audio: 16, document: 100 },\n    },\n  },\n\n  [INBOX_TYPES.INSTAGRAM]: {\n    '*': {\n      mimeGroups: {\n        audio: ['aac', 'm4a', 'wav', 'mp4'],\n        image: ['png', 'jpeg', 'gif'],\n        video: ['mp4', 'ogg', 'avi', 'mov', 'webm'],\n      },\n      maxByCategory: { image: 16, video: 25, audio: 25 },\n    },\n  },\n\n  [INBOX_TYPES.FB]: {\n    '*': {\n      mimeGroups: {\n        audio: ['aac', 'm4a', 'wav', 'mp4'],\n        image: ['png', 'jpeg', 'gif'],\n        video: ['mp4', 'ogg', 'avi', 'mov', 'webm'],\n        text: ['plain'],\n        application: [\n          'pdf',\n          'vnd.ms-excel',\n          'vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n          'msword',\n          'vnd.openxmlformats-officedocument.wordprocessingml.document',\n          'vnd.ms-powerpoint',\n          'vnd.openxmlformats-officedocument.presentationml.presentation',\n        ],\n      },\n      maxByCategory: { image: 8, audio: 25, video: 25, document: 25 },\n    },\n  },\n\n  [INBOX_TYPES.LINE]: {\n    '*': {\n      mimeGroups: {\n        image: ['png', 'jpeg'],\n        video: ['mp4'],\n      },\n      maxByCategory: { image: 10 },\n    },\n  },\n\n  [INBOX_TYPES.TWILIO]: {\n    sms: { max: 5 },\n    whatsapp: {\n      mimeGroups: {\n        image: ['png', 'jpeg'],\n        audio: ['mpeg', 'opus', 'ogg', 'amr'],\n        video: ['mp4'],\n        application: ['pdf'],\n      },\n      max: 5,\n    },\n  },\n};\n\n// ---------- Helpers ----------\n/**\n * @name DOC_HEADS\n * @description MIME type categories that should be considered \"document\"\n */\nconst DOC_HEADS = new Set<string>(['application', 'text']);\n\n/**\n * @name categoryFromMime\n * @description Gets a high-level category name from a MIME type.\n *\n * @param {string} mime - MIME type string (e.g. \"image/png\").\n * @returns {\"image\"|\"video\"|\"audio\"|\"document\"|undefined} Category name.\n */\nconst categoryFromMime = (mime?: string): CategoryType => {\n  const head = mime?.split('/')?.[0] ?? '';\n  return DOC_HEADS.has(head) ? 'document' : (head as CategoryType);\n};\n\n/**\n * @name getNode\n * @description Finds the matching rule node for a channel and optional medium.\n *\n * @param {ChannelKey} [channelType] - One of INBOX_TYPES.\n * @param {string}      [medium]     - Optional sub-medium (e.g. \"sms\",\"whatsapp\").\n * @returns {ChannelNodeConfig} Config node with rules.\n */\nconst getNode = (\n  channelType?: ChannelKey,\n  medium?: string\n): ChannelNodeConfig => {\n  if (!channelType) return CHANNEL_CONFIGS.default;\n\n  const channelCfg = CHANNEL_CONFIGS[channelType];\n  if (!channelCfg) return CHANNEL_CONFIGS.default;\n\n  return (\n    channelCfg[medium ?? '*'] ?? channelCfg['*'] ?? CHANNEL_CONFIGS.default\n  );\n};\n\n/**\n * @name expandMimeGroups\n * @description Expands MIME groups and extensions into a list of strings.\n *\n * Examples:\n *  { image: [\"*\"] }         → [\"image/*\"]\n *  { image: [\"png\"] }       → [\"image/png\"]\n *  { application: [\"pdf\"] } → [\"application/pdf\"]\n *  extensions: [\".3gpp\"]    → [\".3gpp\"]\n *\n * @param {Object} mimeGroups - Grouped MIME suffixes by prefix.\n * @param {string[]} extensions - Extra raw extensions.\n * @returns {string[]} Expanded list of MIME/extension strings.\n */\nconst expandMimeGroups = (\n  mimeGroups: MimeGroups = {},\n  extensions: string[] = []\n): string[] => {\n  const mimes = Object.entries(mimeGroups).flatMap(([prefix, exts]) =>\n    (exts ?? []).map((ext: string) =>\n      ext === '*' ? `${prefix}/*` : `${prefix}/${ext}`\n    )\n  );\n  return [...mimes, ...extensions];\n};\n\n// ---------- Public API ----------\n/**\n * @name getAllowedFileTypesByChannel\n * @description Builds the full \"accept\" string for <input type=\"file\">,\n * based on channel + medium rules.\n *\n * @param {Object} params\n * @param {string} [params.channelType] - Channel type (from INBOX_TYPES).\n * @param {string} [params.medium] - Medium under the channel.\n * @returns {string} Comma-separated list of allowed MIME types/extensions.\n *\n * @example\n * getAllowedFileTypesByChannel({ channelType: INBOX_TYPES.WHATSAPP });\n * → \"audio/aac, audio/amr, image/jpeg, image/png, video/3gp, ...\"\n */\nexport const getAllowedFileTypesByChannel = ({\n  channelType,\n  medium,\n}: GetChannelParams = {}): string => {\n  const node = getNode(channelType, medium);\n  const { mimeGroups, extensions } =\n    !node.mimeGroups && !node.extensions ? CHANNEL_CONFIGS.default : node;\n\n  return expandMimeGroups(mimeGroups, extensions).join(', ');\n};\n\n/**\n * @name getMaxUploadSizeByChannel\n * @description Gets the maximum allowed file size (in MB) for a channel, medium, and MIME type.\n *\n * Priority:\n * - Category-specific size (image/video/audio/document).\n * - Channel/medium-level max.\n * - Global default max.\n *\n * @param {Object} params\n * @param {string} [params.channelType] - Channel type (from INBOX_TYPES).\n * @param {string} [params.medium] - Medium under the channel.\n * @param {string} [params.mime] - MIME type string (for category lookup).\n * @returns {number} Maximum file size in MB.\n *\n * @example\n * getMaxUploadSizeByChannel({ channelType: INBOX_TYPES.WHATSAPP, mime: \"image/png\" });\n * → 5\n */\nexport const getMaxUploadSizeByChannel = ({\n  channelType,\n  medium,\n  mime,\n}: GetMaxUploadParams = {}): number => {\n  const node = getNode(channelType, medium);\n  const cat = categoryFromMime(mime);\n  const catMax = cat ? node.maxByCategory?.[cat] : undefined;\n  return catMax ?? node.max ?? CHANNEL_CONFIGS.default.max;\n};\n"],"names":["debounce","func","wait","immediate","maxWait","timeout","lastInvokeTime","args","Array","_len","_key","arguments","time","Date","now","isFirstCall","apply","clearTimeout","timeSinceLastInvoke","shouldInvokeNow","undefined","setTimeout","_this","getContrastingTextColor","bgColor","color","replace","r","parseInt","slice","g","b","formatDate","_ref","date","todayText","yesterdayText","dateValue","isToday","isYesterday","formatTime","timeInSeconds","formattedTime","minutes","Math","floor","seconds","hours","days","trimContent","content","maxLength","ellipsis","trimmedContent","length","substring","convertSecondsToTimeUnit","unitNames","unit","Number","toFixed","minute","hour","day","fileNameWithEllipsis","file","fullName","_ref2","_file$filename","filename","name","dotIndex","lastIndexOf","_ref3","extension","splitName","trimmedName","trim","firstName","lastName","nameParts","split","pop","join","downloadFile","_ref5","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref4","url","type","_ref4$extension","_filenameMatch$","response","blobData","contentType","fileExtension","dispositionHeader","filenameMatch","blobUrl","link","wrap","_callee$","_context","prev","next","Error","fetch","cache","sent","ok","status","blob","headers","get","match","URL","createObjectURL","Object","assign","document","createElement","href","download","style","body","append","click","remove","revokeObjectURL","t0","stop","_x","getFileInfo","defaultInfo","base","cleanUrl","encodedFilename","fileName","decodeURIComponent","startsWith","includes","lastDotIndex","toLowerCase","error","console","formatNumber","num","n","Intl","NumberFormat","notation","maximumFractionDigits","format","toURL","input","window","location","origin","isSameHost","url1","url2","urlObj1","urlObj2","hostname","isValidDomain","domain","domainRegex","test","MessageType","getRecipients","lastEmail","conversationContact","inboxEmail","forwardToEmail","to","cc","bcc","messageType","message_type","isIncoming","INCOMING","emailAttributes","contentAttributes","content_attributes","email","from","_ref$cc_emails","cc_emails","ccEmails","_ref$bcc_emails","bcc_emails","bccEmails","_ref$to_emails","to_emails","toEmails","isLastEmailFromContact","_emailAttributes$from","_to","_emailAttributes$from2","push","_to2","_emailAttributes$to","concat","isArray","_cc","filter","emailAddress","replyUUIDPattern","Set","parseBoolean","candidate","candidateString","String","Boolean","JSON","parse","sanitizeTextForRender","text","sortAsc","arr","sort","a","quantile","q","sorted","_quantileForSorted","clamp","min","max","value","clamped","pos","rest","getQuantileIntervals","data","intervals","map","interval","calculateCenterOffset","mouseX","mouseY","rect","centerX","left","width","centerY","top","height","relativeX","relativeY","applyRotationTransform","angle","radians","PI","cos","sin","rotatedX","rotatedY","normalizeToPercentage","x","y","MESSAGE_VARIABLES_REGEX","skipCodeBlocks","str","capitalizeName","word","charAt","toUpperCase","getFirstName","user","shift","getLastName","getMessageVariables","conversation","contact","inbox","_conversation$meta","meta","assignee","sender","id","_conversation$custom_","custom_attributes","conversationCustomAttributes","contactCustomAttributes","standardVariables","phone_number","_assignee$email","conversationCustomAttributeVariables","entries","reduce","acc","key","contactCustomAttributeVariables","_ref6","variables","_extends","replaceVariablesInMessage","_ref7","message","_","getUndefinedVariablesInMessage","_ref8","messageWithOutCodeBlocks","matches","variable","createTypingIndicator","onStartTyping","onStopTyping","idleTime","timer","start","reset","calculateThreshold","timeOffset","threshold","currentTime","findMostUrgentSLAStatus","SLAStatuses","sla1","sla2","abs","formatSLATime","units","mo","d","h","m","parts","keys","forEach","createSLAObject","appliedSla","chat","frtThreshold","sla_first_response_time_threshold","nrtThreshold","sla_next_response_time_threshold","rtThreshold","sla_resolution_time_threshold","createdAt","created_at","firstReplyCreatedAt","first_reply_created_at","waitingSince","waiting_since","SLATypes","FRT","condition","NRT","RT","SLAStatus","evaluateSLAConditions","icon","isSlaMissed","evaluateSLAStatus","mostUrgent","coerceToDate","dateInput","timestamp","timestampMs","toString","dateObj","isNaN","getTime","hasTimeComponent","setHours","INBOX_TYPES","WEB","FB","TWITTER","TWILIO","WHATSAPP","API","EMAIL","TELEGRAM","LINE","SMS","INSTAGRAM","VOICE","CHANNEL_CONFIGS","_CHANNEL_CONFIGS","mimeGroups","image","audio","video","application","extensions","maxByCategory","sms","whatsapp","DOC_HEADS","categoryFromMime","mime","head","_mime$split$","_mime$split","has","getNode","channelType","medium","channelCfg","_channelCfg","expandMimeGroups","mimes","flatMap","prefix","exts","ext","getAllowedFileTypesByChannel","_temp","node","getMaxUploadSizeByChannel","_temp2","cat","catMax","_node$maxByCategory"],"mappings":"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"}