import e from"postcss-value-parser";const t=/^(cross-fade|image|(repeating-)?(conic|linear|radial)-gradient|url|var)$/i;function getImage(n){return!(!n||!n.type)&&("string"===n.type?"url("+e.stringify(n)+")":!("function"!==n.type||!t.test(n.value.toLowerCase()))&&e.stringify(n))}const n={dpcm:2.54,dpi:1,dppx:96,x:96};function getMedia(e,t,r){if("boolean"==typeof e)return!1;const i=Math.floor(e/n.x*100)/100;return t.atRule({name:"media",params:`(-webkit-min-device-pixel-ratio: ${i}), (min-resolution: ${e}dpi)`,source:r.source})}function getMediaDPI(t){if(!t)return!1;if("word"!==t.type)return!1;if(!isNumericNode(t))return!1;const r=e.unit(t.value);return!!r&&(r.unit.toLowerCase()in n&&Number(r.number)*n[r.unit.toLowerCase()])}function isNumericNode(t){if(!t||!t.value)return!1;try{return!1!==e.unit(t.value)}catch(e){return!1}}const handleInvalidation=(e,t,n)=>{if("warn"===e.oninvalid)e.decl.warn(e.result,t,{word:String(n)});else if("throw"===e.oninvalid)throw e.decl.error(t,{word:String(n)})},processImageSet=(t,n,r)=>{const i=n.parent,o=new Map,a=n.value;for(let i=0;i<t.length;i++){const{imageSetFunction:l,imageSetOptionNodes:u}=t[i],c=new Map,p=u.length;let d=-1;for(;d<p;){const t=d<0||(s=u[d],"div"===Object(s).type&&","===Object(s).value),i=getImage(u[d+1]),p=getMediaDPI(u[d+2]),f=getMedia(p,r.postcss,n);if(!t)return void handleInvalidation(r,"expected a comma",e.stringify(u));if(!i)return void handleInvalidation(r,"unexpected image",e.stringify(u));if(!f||!p||c.has(p))return void handleInvalidation(r,"unexpected resolution",e.stringify(u));if(c.set(p,f),o.has(p)){const t=o.get(p);t.value=t.value.replace(e.stringify(l),i.trim()),o.set(p,t)}else o.set(p,{atRule:f,value:a.replace(e.stringify(l),i.trim())});d+=3}}var s;for(const{atRule:e,value:t}of o.values()){const r=i.clone().removeAll(),o=n.clone({value:t});r.append(o),e.append(r)}const l=Array.from(o.keys()).sort(((e,t)=>e-t)).map((e=>o.get(e).atRule));if(!l.length)return;const u=l[0],c=l.slice(1);c.length&&i.after(c);const p=u.nodes[0].nodes[0];n.cloneBefore({value:p.value.trim()}),r.preserve||(n.remove(),i.nodes.length||i.remove())};function hasFallback(e){const t=e.parent;if(!t)return!1;const n=e.prop.toLowerCase(),r=t.index(e);for(let e=0;e<r;e++){const r=t.nodes[e];if("decl"===r.type&&r.prop.toLowerCase()===n)return!0}return!1}const r=/(^|[^\w-])(-webkit-)?image-set\(/i,i=/^(-webkit-)?image-set$/i,creator=t=>{const n=!("preserve"in Object(t))||Boolean(t.preserve),o="onInvalid"in Object(t)?t.onInvalid:"ignore";if("oninvalid"in Object(t))throw new Error('"oninvalid" was changed to "onInvalid" to match other plugins with similar options');return{postcssPlugin:"postcss-image-set-function",Declaration(t,{result:a,postcss:s}){const l=t.value;if(!r.test(l.toLowerCase()))return;if(hasFallback(t))return;let u;try{u=e(l)}catch(e){t.warn(a,`Failed to parse value '${l}' as an image-set function. Leaving the original value intact.`)}if(void 0===u)return;const c=[];u.walk((n=>{if("function"!==n.type)return;if(!i.test(n.value.toLowerCase()))return;let r=!1;if(e.walk(n.nodes,(e=>{"function"===e.type&&i.test(e.value.toLowerCase())&&(r=!0)})),r)return handleInvalidation({decl:t,oninvalid:o,result:a},"nested image-set functions are not allowed",e.stringify(n)),!1;const s=n.nodes.filter((e=>"comment"!==e.type&&"space"!==e.type));c.push({imageSetFunction:n,imageSetOptionNodes:s})})),processImageSet(c,t,{decl:t,oninvalid:o,preserve:n,result:a,postcss:s})}}};creator.postcss=!0;export{creator as default};
