# Taskfile for managing Chatwoot operations
# This file provides convenient shortcuts for building, running, and managing
# the ChatsCommerce-branded Chatwoot instance.
# For more information, visit: https://taskfile.dev/

version: "3"

dotenv: [".env"]

vars:
  PROJECT_NAME: chatscommerce
  IMAGE_NAME: chatwoot-branded
  IMAGE_TAG: latest
  COMPOSE_FILE: docker-compose.custom.yaml
  DEV_COMPOSE_FILE: docker-compose.dev.yaml
  COMPOSE_CMD: docker compose

tasks:
  docker-build:
    desc: "Build the ChatsCommerce-branded Chatwoot Docker image"
    cmds:
      - echo "Building the {{.PROJECT_NAME}} branded Chatwoot Docker image..."
      - docker build -t {{.IMAGE_NAME}}:{{.IMAGE_TAG}} -f Dockerfile.custom .

  docker-build-dev:
    desc: "Build the development Docker image"
    cmds:
      - echo "Building the development Docker image..."
      - docker build -t {{.IMAGE_NAME}}:dev -f Dockerfile.dev .

  docker-up: 
    desc: "Start all Chatwoot services in detached mode"
    cmds:
      - "{{.COMPOSE_CMD}} -f {{.COMPOSE_FILE}} up -d"

  docker-up-dev:
    desc: "Start all Chatwoot development services in detached mode"
    cmds:
      - "{{.COMPOSE_CMD}} -f {{.DEV_COMPOSE_FILE}} up -d"

  docker-down:
    desc: "Stop all Chatwoot services"
    cmds:
      - "{{.COMPOSE_CMD}} -f {{.COMPOSE_FILE}} down"

  docker-down-dev:
    desc: "Stop all Chatwoot development services"
    cmds:
      - "{{.COMPOSE_CMD}} -f {{.DEV_COMPOSE_FILE}} down"

  docker-restart-dev:
    desc: "Restart Chatwoot development services to pick up code changes"
    cmds:
      - echo "Restarting development services..."
      - "{{.COMPOSE_CMD}} -f {{.DEV_COMPOSE_FILE}} restart"
      - echo "Development services restarted"

  docker-restart-dev-sidekiq:
    desc: "Restart only the Sidekiq container in development to pick up background job changes"
    cmds:
      - echo "Restarting Sidekiq development service..."
      - "{{.COMPOSE_CMD}} -f {{.DEV_COMPOSE_FILE}} restart sidekiq"
      - echo "Sidekiq development service restarted"

  docker-restart-dev-rails:
    desc: "Restart only the Rails container in development to pick up web app changes"
    cmds:
      - echo "Restarting Rails development service..."
      - "{{.COMPOSE_CMD}} -f {{.DEV_COMPOSE_FILE}} restart rails"
      - echo "Rails development service restarted"
  
  docker-logs:
    desc: "Show logs from all services (or specify a service after --)"
    vars:
      SERVICE: '{{.CLI_ARGS}}'
    cmds:
      - |
        if [ -n "{{.SERVICE}}" ]; then
          {{.COMPOSE_CMD}} -f {{.COMPOSE_FILE}} logs -f {{.SERVICE}}
        else
          {{.COMPOSE_CMD}} -f {{.COMPOSE_FILE}} logs -f
        fi

  docker-logs-dev:
    desc: "Show logs from all development services (or specify a service after --)"
    vars:
      SERVICE: '{{.CLI_ARGS}}'
    cmds:
      - |
        if [ -n "{{.SERVICE}}" ]; then
          {{.COMPOSE_CMD}} -f {{.DEV_COMPOSE_FILE}} logs -f {{.SERVICE}}
        else
          {{.COMPOSE_CMD}} -f {{.DEV_COMPOSE_FILE}} logs -f
        fi
        
  docker-rebuild:
    desc: "Rebuild and restart all services with local code changes"
    cmds:
      - task: docker-down
      - echo "Building image with local code (no cache)..."
      - docker build --no-cache -t {{.IMAGE_NAME}}:{{.IMAGE_TAG}} -f Dockerfile.custom .
      - task: docker-up
      - echo "Waiting for services to start..."
      - sleep 10
      - echo "Rebuild complete."
      
  docker-rebuild-dev:
    desc: "Rebuild and restart all development services with local code changes"
    cmds:
      - task: docker-down-dev
      - echo "Building development image with local code (no cache)..."
      - docker build --no-cache -t {{.IMAGE_NAME}}:dev -f Dockerfile.dev .
      - task: docker-up-dev
      - echo "Waiting for services to start..."
      - sleep 10
      - echo "Development rebuild complete."

  setup-dirs:
    desc: "Create necessary directories for data persistence"
    cmds:
      - mkdir -p data/postgres data/redis storage public/uploads

  prepare-env:
    desc: "Create .env file from template if it doesn't exist"
    cmds:
      - |
        if [ ! -f .env ]; then
          cp .env.branded .env
          echo "Created .env file from .env.branded template. Please update with your own values."
        fi

  verify-branding:
    desc: "Verify that branding assets exist"
    cmds:
      - |
        if [ ! -d public/brand-assets/chatscommerce ]; then
          mkdir -p public/brand-assets/chatscommerce
          echo "Created branding directory. Please add your logo files to public/brand-assets/chatscommerce/"
          echo "Required files: logo.png, logo_dark.png, logo_thumbnail.png"
          exit 1
        fi
      - |
        if [ ! -f public/brand-assets/chatscommerce/logo.png ] || [ ! -f public/brand-assets/chatscommerce/logo_dark.png ] || [ ! -f public/brand-assets/chatscommerce/logo_thumbnail.png ]; then
          echo "Missing required logo files in public/brand-assets/chatscommerce/"
          echo "Required files: logo.png, logo_dark.png, logo_thumbnail.png"
          exit 1
        fi

  rails-console:
    desc: "Access the Rails console inside the running container"
    cmds:
      - "{{.COMPOSE_CMD}} -f {{.COMPOSE_FILE}} exec rails bundle exec rails console"

  rails-console-dev:
    desc: "Access the Rails console inside the running development container"
    cmds:
      - "{{.COMPOSE_CMD}} -f {{.DEV_COMPOSE_FILE}} exec rails bundle exec rails console"

  sidekiq-status:
    desc: "Check Sidekiq status inside the running container"
    cmds:
      - "{{.COMPOSE_CMD}} -f {{.COMPOSE_FILE}} exec sidekiq bundle exec sidekiqmon"

  sidekiq-status-dev:
    desc: "Check Sidekiq status inside the running development container"
    cmds:
      - "{{.COMPOSE_CMD}} -f {{.DEV_COMPOSE_FILE}} exec sidekiq bundle exec sidekiqmon"

  rails-logs:
    desc: "Show Rails logs"
    cmds:
      - task: docker-logs
        vars: {CLI_ARGS: rails}

  rails-logs-dev:
    desc: "Show Rails development logs"
    cmds:
      - task: docker-logs-dev
        vars: {CLI_ARGS: rails}
        
  db-prepare:
    desc: "Run database setup and migrations"
    cmds:
      - "{{.COMPOSE_CMD}} -f {{.COMPOSE_FILE}} exec rails bundle exec rails db:create"
      - "{{.COMPOSE_CMD}} -f {{.COMPOSE_FILE}} exec rails bundle exec rails db:migrate"
      - "{{.COMPOSE_CMD}} -f {{.COMPOSE_FILE}} exec rails bundle exec rails db:seed"

  db-prepare-dev:
    desc: "Run database setup and migrations in development environment"
    cmds:
      - "{{.COMPOSE_CMD}} -f {{.DEV_COMPOSE_FILE}} exec rails bundle exec rails db:create"
      - "{{.COMPOSE_CMD}} -f {{.DEV_COMPOSE_FILE}} exec rails bundle exec rails db:migrate"
      - "{{.COMPOSE_CMD}} -f {{.DEV_COMPOSE_FILE}} exec rails bundle exec rails db:seed"

  db-init:
    desc: "Initialize database with basic setup"
    cmds:
      - task: db-prepare
      - echo "Database initialized successfully."

  db-init-dev:
    desc: "Initialize development database with basic setup"
    cmds:
      - task: db-prepare-dev
      - echo "Development database initialized successfully."

  generate-icons:
    desc: "Generate all icon variations from logo.png for branding"
    cmds:
      - |
        # Make script executable if it isn't already
        chmod +x generate_icons.sh
        # Run the script
        ./generate_icons.sh
        echo "Icons generated successfully"
        
  verify-all-branding:
    desc: "Verify all branding assets are properly set up and generate any missing ones"
    cmds:
      - |
        echo "Checking branding assets..."
        # Verify the basic requirements first
        if [ ! -d public/brand-assets/chatscommerce ]; then
          mkdir -p public/brand-assets/chatscommerce
          echo "Created branding directory."
        fi
        
        # Check if our primary assets exist
        if [ ! -f public/brand-assets/chatscommerce/logo.png ]; then
          echo "ERROR: Missing primary logo.png file in public/brand-assets/chatscommerce/"
          echo "Please add your logo.png file before continuing."
          exit 1
        fi
        
        # Create dark logo if missing (could just be a copy of the regular logo)
        if [ ! -f public/brand-assets/chatscommerce/logo_dark.png ]; then
          echo "Creating logo_dark.png from logo.png"
          cp public/brand-assets/chatscommerce/logo.png public/brand-assets/chatscommerce/logo_dark.png
        fi
        
        # Create thumbnail if missing
        if [ ! -f public/brand-assets/chatscommerce/logo_thumbnail.png ]; then
          echo "Creating logo_thumbnail.png from logo.png"
          convert public/brand-assets/chatscommerce/logo.png -resize 512x512 public/brand-assets/chatscommerce/logo_thumbnail.png
        fi
        
        # Generate all icon variations
        echo "Generating all icon variations..."
        task generate-icons
        
        echo "All branding assets verified and generated successfully!"

  build-swagger:
    desc: "Build and ensure Swagger documentation is available"
    cmds:
      - echo "Building Swagger documentation and ensuring it's accessible..."
      - "{{.COMPOSE_CMD}} -f {{.COMPOSE_FILE}} exec rails bundle exec rake swagger:build"
      - "{{.COMPOSE_CMD}} -f {{.COMPOSE_FILE}} exec rails cp -r /app/swagger /app/public/"
      - |
        echo "Creating volume mount for swagger directory if needed..."
        if ! grep -q "- ./swagger:/app/swagger" {{.COMPOSE_FILE}}; then
          echo "Swagger volume mount not found. You need to add it to your docker-compose.custom.yaml file."
          echo "Add this line under the volumes section of the rails service:"
          echo "      - ./swagger:/app/swagger"
          exit 1
        fi
      - echo "Swagger documentation should now be available at http://localhost:3000/swagger"

  run-all:
    desc: "Complete setup: create directories, prepare environment, verify branding, build image, start services, and prepare database"
    cmds:
      - task: setup-dirs
      - task: prepare-env
      # - task: verify-branding
      # - task: verify-all-branding
      - task: docker-build
      - task: docker-up
      - echo "Waiting for database to be ready..."
      - sleep 10
      - task: db-init

  run-all-dev:
    desc: "Complete development setup: create directories, prepare environment, build dev image, start dev services, and prepare database"
    cmds:
      - task: setup-dirs
      - task: prepare-env
      - task: docker-build-dev
      - task: docker-up-dev
      - echo "Waiting for database to be ready..."
      - sleep 10
      - task: db-init-dev
      - echo "Development environment is ready!"

  open-app:
    desc: "Open the Chatwoot application in the default browser"
    cmds:
      - |
        if [[ "$OSTYPE" == "darwin"* ]]; then
          open http://localhost:3000
        elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
          xdg-open http://localhost:3000
        else
          echo "Please open http://localhost:3000 in your browser"
        fi 