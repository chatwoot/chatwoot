version: 2.1

parameters:
  workflow:
    type: string
    default: "build-and-deploy"
  chatwoot_version:
    type: string
    default: "v4.0.4"
  base_image_version:
    type: string
    default: "base1"

executors:
  xlarge-executor:
    machine:
      image: ubuntu-2004:2024.11.1
      docker_layer_caching: true
    resource_class: xlarge
orbs:
  aws-cli: circleci/aws-cli@4.1.3
  aws-eks: circleci/aws-eks@2.2.0
  aws-ecr: circleci/aws-ecr@9.0.2
  kubernetes: circleci/kubernetes@1.3.0

jobs:
  deploy-sidekiq:
    circleci_ip_ranges: false
    docker:
      - image: 'cimg/python:3.10'
    resource_class: << parameters.resource_class >>
    parameters:
      resource_class: 
        description: |
          deploy to resource class
        type: string
      cluster-name:
        description: |
          Devnet cluster
        type: string
      docker-image-name:
        description: |
          api-gateway
        type: string
      version-info:
        description: |
          Latest
        type: string
      min-replicas:
        description: |
          number of min replicas to create
        type: string
      max-replicas:
        description: |
          number of max replicas to create
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: 'eu-west-1'
      env-name:
        description: |
          env name for managing cluster host file
        type: string
      total_cpu:
        description: |
          total cpu alloction
        type: string
      request_cpu:
        description: |
          reqests cpu alloction
        type: string
      limit_memory:
        description: |
          limit memory allocation
        type: string
      request_memory:
        description: |
          reqests memory alloction
        type: string
      secret-name:
        description: |
          secret name for managing cluster host file
        type: string
      deployment-name:
        description: |
          deploy name for managing cluster host file
        type: string
      app-name:
        description: |
          app name for managing cluster host file
        type: string
    steps:
      - checkout
      - run:
          name: Create deployment manifest
          command: |
            BUILD_DATE=$(date '+%Y%m%d%H%M%S')
            cat kubernetes/deployment-template-sidekiq.yml |\
                sed "s|DOCKER_IMAGE_NAME|<< parameters.docker-image-name >>|g;\
                s|ENV_NAME|<< parameters.env-name >>|g;\
                s|BUILD_DATE_VALUE|$BUILD_DATE|g;\
                s|MIN_REPLICAS|<< parameters.min-replicas >>|g;\
                s|MAX_REPLICAS|<< parameters.max-replicas >>|g;\
                s|TOTAL_CPU|<< parameters.total_cpu >>|g;\
                s|REQUEST_CPU|<< parameters.request_cpu >>|g;\
                s|REQUEST_MEMORY|<< parameters.request_memory >>|g;\
                s|LIMIT_MEMORY|<< parameters.limit_memory >>|g;\
                s|SECRET_NAME|<< parameters.secret-name >>|g; \
                s|DEPLOYMENT_NAME|<< parameters.deployment-name >>|g;\
                s|APP_NAME|<< parameters.app-name >>|g;\
                s|VERSION_INFO_VALUE|<< parameters.version-info >>|g;" > kubernetes/deployment.yml
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: << parameters.aws-region >>
      - kubernetes/create-or-update-resource:
          resource-file-path: 'kubernetes/deployment.yml'
          namespace: chatwoot
          get-rollout-status: true
          resource-name: deployment/<< parameters.deployment-name >>

  deploy-rails:
    circleci_ip_ranges: false
    docker:
      - image: 'cimg/python:3.10'
    resource_class: << parameters.resource_class >>
    parameters:
      resource_class: 
        description: |
          deploy to resource class
        type: string
      cluster-name:
        description: |
          Devnet cluster
        type: string
      docker-image-name:
        description: |
          api-gateway
        type: string
      version-info:
        description: |
          Latest
        type: string
      min-replicas:
        description: |
          number of min replicas to create
        type: string
      max-replicas:
        description: |
          number of max replicas to create
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: 'eu-west-1'
      env-name:
        description: |
          env name for managing cluster host file
        type: string
      total_cpu:
        description: |
          total cpu alloction
        type: string
      request_cpu:
        description: |
          reqests cpu alloction
        type: string
      limit_memory:
        description: |
          limit memory allocation
        type: string
      request_memory:
        description: |
          reqests memory alloction
        type: string
      secret-name:
        description: |
          secret name for managing cluster host file
        type: string
      deployment-name:
        description: |
          deploy name for managing cluster host file
        type: string
      app-name:
        description: |
          app name for managing cluster host file
        type: string
      service-account:
        description: |
          service account name for managing cluster host file
        type: string
    steps:
      - checkout
      - run:
          name: Create deployment manifest
          command: |
            BUILD_DATE=$(date '+%Y%m%d%H%M%S')
            cat kubernetes/deployment-template-rails.yml |\
                sed "s|DOCKER_IMAGE_NAME|<< parameters.docker-image-name >>|g;\
                s|ENV_NAME|<< parameters.env-name >>|g;\
                s|BUILD_DATE_VALUE|$BUILD_DATE|g;\
                s|MIN_REPLICAS|<< parameters.min-replicas >>|g;\
                s|MAX_REPLICAS|<< parameters.max-replicas >>|g;\
                s|TOTAL_CPU|<< parameters.total_cpu >>|g;\
                s|REQUEST_CPU|<< parameters.request_cpu >>|g;\
                s|REQUEST_MEMORY|<< parameters.request_memory >>|g;\
                s|LIMIT_MEMORY|<< parameters.limit_memory >>|g;\
                s|SECRET_NAME|<< parameters.secret-name >>|g; \
                s|DEPLOYMENT_NAME|<< parameters.deployment-name >>|g;\
                s|APP_NAME|<< parameters.app-name >>|g;\
                s|SERVICE_ACCOUNT|<< parameters.service-account >>|g;\
                s|VERSION_INFO_VALUE|<< parameters.version-info >>|g;" > kubernetes/deployment.yml
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: << parameters.aws-region >>
      - kubernetes/create-or-update-resource:
          resource-file-path: 'kubernetes/deployment.yml'
          namespace: chatwoot
          get-rollout-status: true
          resource-name: deployment/<< parameters.deployment-name >>

workflows:
  # Base image build workflow (manual trigger only)
  # Trigger this workflow by passing parameter: {"workflow": "build-base", "chatwoot_version": "v4.0.4", "base_image_version": "base1"}
  # This builds the system and deps base images for both staging and production
  # Run this when: Chatwoot version updates, Ruby/Node version changes, or dependency updates
  build-base-images:
    when:
      equal: [ build-base, << pipeline.parameters.workflow >> ]
    jobs:
      # Build Tier 1: System base image
      - aws-ecr/build_and_push_image:
          name: build-base-system-staging
          auth:
            - aws-cli/setup:
                role_arn: "${AWS_ROLE_ARN}"
                profile_name: deltaexchange-oidc
          context: staging
          executor: xlarge-executor
          region: "${AWS_REGION}"
          account_id: ${AWS_ACCOUNT_ID}
          create_repo: true
          dockerfile: Dockerfile.base-system
          no_output_timeout: 30m
          profile_name: deltaexchange-oidc
          repo: chatwoot-base
          tag: << pipeline.parameters.chatwoot_version >>-<< pipeline.parameters.base_image_version >>-system

      # Build Tier 2: Dependencies base image for staging
      - aws-ecr/build_and_push_image:
          name: build-base-deps-staging
          auth:
            - aws-cli/setup:
                role_arn: "${AWS_ROLE_ARN}"
                profile_name: deltaexchange-oidc
          context: staging
          executor: xlarge-executor
          region: "${AWS_REGION}"
          account_id: ${AWS_ACCOUNT_ID}
          create_repo: true
          dockerfile: Dockerfile.base-deps
          extra_build_args: '--build-arg ECR_URL=${AWS_TOKYO_ECR_URL} --build-arg BASE_IMAGE_TAG=<< pipeline.parameters.chatwoot_version >>-<< pipeline.parameters.base_image_version >>-system'
          no_output_timeout: 30m
          profile_name: deltaexchange-oidc
          repo: chatwoot-base
          tag: << pipeline.parameters.chatwoot_version >>-<< pipeline.parameters.base_image_version >>-deps
          requires:
            - build-base-system-staging

      # Build Tier 1: System base image for production India
      - aws-ecr/build_and_push_image:
          name: build-base-system-prod-india
          auth:
            - aws-cli/setup:
                role_arn: "${AWS_ROLE_ARN}"
                profile_name: deltaexchange-oidc
          context: prod-india
          executor: xlarge-executor
          region: "${AWS_REGION}"
          account_id: ${AWS_IND_ACCOUNT}
          create_repo: true
          dockerfile: Dockerfile.base-system
          no_output_timeout: 30m
          profile_name: deltaexchange-oidc
          repo: chatwoot-base
          tag: << pipeline.parameters.chatwoot_version >>-<< pipeline.parameters.base_image_version >>-system

      # Build Tier 2: Dependencies base image for production India
      - aws-ecr/build_and_push_image:
          name: build-base-deps-prod-india
          auth:
            - aws-cli/setup:
                role_arn: "${AWS_ROLE_ARN}"
                profile_name: deltaexchange-oidc
          context: prod-india
          executor: xlarge-executor
          region: "${AWS_REGION}"
          account_id: ${AWS_IND_ACCOUNT}
          create_repo: true
          dockerfile: Dockerfile.base-deps
          extra_build_args: '--build-arg ECR_URL=${AWS_INDIA_ECR_URL} --build-arg BASE_IMAGE_TAG=<< pipeline.parameters.chatwoot_version >>-<< pipeline.parameters.base_image_version >>-system'
          no_output_timeout: 30m
          profile_name: deltaexchange-oidc
          repo: chatwoot-base
          tag: << pipeline.parameters.chatwoot_version >>-<< pipeline.parameters.base_image_version >>-deps
          requires:
            - build-base-system-prod-india

  # Application build and deploy workflow (runs on every push to develop or perf/docker-build-optimise)
  # This workflow only runs when workflow parameter != "build-base"
  # Default behavior: Automatically triggered on git push
  # Manual trigger (optional): {"workflow": "build-and-deploy"} or just use default parameters
  # This builds application images (rails/sidekiq) using the pre-built base images
  build-and-deploy:
    when:
      not:
        equal: [ build-base, << pipeline.parameters.workflow >> ]
    jobs:
      # Build staging environment images with current codebase
      - aws-ecr/build_and_push_image:
          name: staging-build-rails
          auth:
            - aws-cli/setup:
                role_arn: "${AWS_ROLE_ARN}"
                profile_name: deltaexchange-oidc
          context: staging
          executor: xlarge-executor
          filters:
            branches:
              only:
                - develop
                - feat/storage-perf-test
          region: "${AWS_REGION}"
          account_id: ${AWS_ACCOUNT_ID}
          create_repo: true
          dockerfile: Dockerfile-staging-rails
          extra_build_args: '--build-arg ECR_URL=${AWS_TOKYO_ECR_URL} --build-arg BASE_IMAGE_TAG=<< pipeline.parameters.chatwoot_version >>-<< pipeline.parameters.base_image_version >>-deps --build-arg CIRCLE_SHA1=${CIRCLE_SHA1}'
          no_output_timeout: 30m
          profile_name: deltaexchange-oidc
          repo: chatwoot
          tag: rails-${CIRCLE_SHA1}

      - aws-ecr/build_and_push_image:
          name: staging-build-sidekiq
          auth:
            - aws-cli/setup:
                role_arn: "${AWS_ROLE_ARN}"
                profile_name: deltaexchange-oidc
          context: staging
          executor: xlarge-executor
          filters:
            branches:
              only:
                - develop
                - feat/storage-perf-test
          region: "${AWS_REGION}"
          account_id: ${AWS_ACCOUNT_ID}
          create_repo: true
          dockerfile: Dockerfile-staging-sidekiq
          extra_build_args: '--build-arg ECR_URL=${AWS_TOKYO_ECR_URL} --build-arg BASE_IMAGE_TAG=<< pipeline.parameters.chatwoot_version >>-<< pipeline.parameters.base_image_version >>-deps --build-arg CIRCLE_SHA1=${CIRCLE_SHA1}'
          no_output_timeout: 30m
          profile_name: deltaexchange-oidc
          repo: chatwoot
          tag: sidekiq-${CIRCLE_SHA1}
      
      # Build production environment chatwoot rails image with current codebase
      - aws-ecr/build_and_push_image:
          name: prod-ind-build-rails
          auth:
            - aws-cli/setup:
                role_arn: "${AWS_ROLE_ARN}"
                profile_name: deltaexchange-oidc
          context: prod-india
          executor: xlarge-executor
          filters:
            branches:
              only:
                - main
          region: "${AWS_REGION}"
          account_id: ${AWS_IND_ACCOUNT}
          create_repo: true
          dockerfile: Dockerfile-prod-ind-rails
          extra_build_args: '--build-arg ECR_URL=${AWS_INDIA_ECR_URL} --build-arg BASE_IMAGE_TAG=<< pipeline.parameters.chatwoot_version >>-<< pipeline.parameters.base_image_version >>-deps --build-arg CIRCLE_SHA1=${CIRCLE_SHA1}'
          no_output_timeout: 30m
          profile_name: deltaexchange-oidc
          repo: chatwoot
          tag: rails-${CIRCLE_SHA1}

      - aws-ecr/build_and_push_image:
          name: prod-ind-build-sidekiq
          auth:
            - aws-cli/setup:
                role_arn: "${AWS_ROLE_ARN}"
                profile_name: deltaexchange-oidc
          context: prod-india
          executor: xlarge-executor
          filters:
            branches:
              only:
                - main
          region: "${AWS_REGION}"
          account_id: ${AWS_IND_ACCOUNT}
          create_repo: true
          dockerfile: Dockerfile-prod-ind-sidekiq
          extra_build_args: '--build-arg ECR_URL=${AWS_INDIA_ECR_URL} --build-arg BASE_IMAGE_TAG=<< pipeline.parameters.chatwoot_version >>-<< pipeline.parameters.base_image_version >>-deps --build-arg CIRCLE_SHA1=${CIRCLE_SHA1}'
          no_output_timeout: 30m
          profile_name: deltaexchange-oidc
          repo: chatwoot
          tag: sidekiq-${CIRCLE_SHA1}

      # Devnet Sidekiq Deployment
      - deploy-sidekiq:
          name: devnet-india-sidekiq
          context: staging-v2
          resource_class: delta-exchange/deploy-devnet
          filters:
            branches:
              only:
                - develop
                - feat/storage-perf-test
          cluster-name: devnet-delta-exchange
          min-replicas: '2'
          max-replicas: '3'
          env-name: devnet
          app-name: devnet-sidekiq
          secret-name: devnet-ind-sidekiq
          aws-region: $AWS_REGION
          docker-image-name: '${AWS_TOKYO_ECR_URL}/chatwoot:sidekiq-${CIRCLE_SHA1}'
          version-info: ${CIRCLE_SHA1}
          total_cpu: '0.5'
          request_cpu: '0.2'
          limit_memory: '768M'
          request_memory: '384M'
          deployment-name: 'staging-sidekiq'
          requires:
            - staging-build-sidekiq

      - deploy-rails:
          name: devnet-india-chatwoot-rails
          context: staging-v2
          resource_class: delta-exchange/deploy-devnet
          filters:
            branches:
              only:
                - develop
                - feat/storage-perf-test
          cluster-name: devnet-delta-exchange
          min-replicas: '2'
          max-replicas: '3'
          env-name: devnet
          app-name: devnet-chatwoot
          secret-name: devnet-ind-chatwoot
          aws-region: $AWS_REGION
          docker-image-name: '${AWS_TOKYO_ECR_URL}/chatwoot:rails-${CIRCLE_SHA1}'
          version-info: ${CIRCLE_SHA1}
          total_cpu: '1'
          request_cpu: '0.5'
          limit_memory: '1.5G'
          request_memory: '768M'
          deployment-name: 'staging-chatwoot'
          service-account: 'rails-sa'
          requires:
            - staging-build-rails
      
      - deploy-approval-ind-sidekiq:
          type: approval
          filters:
            branches:
              only:
                - main
          requires:
            - prod-ind-build-sidekiq

      - deploy-approval-ind-rails:
          type: approval
          filters:
            branches:
              only:
                - main
          requires:
            - prod-ind-build-rails

      # Production sidekiq deployment
      - deploy-sidekiq:
          name: prod-ind-sidekiq
          context: prod-india-v2
          resource_class: delta-exchange/deploy-india
          filters:
            branches:
              only:
                - main
          cluster-name: prod-india-exchange
          min-replicas: '5'
          max-replicas: '12'
          env-name: production
          app-name: prod-sidekiq
          secret-name: prod-ind-sidekiq
          aws-region: $AWS_REGION
          docker-image-name: '${AWS_INDIA_ECR_URL}/chatwoot:sidekiq-${CIRCLE_SHA1}'
          version-info: ${CIRCLE_SHA1}
          total_cpu: '2'
          request_cpu: '1'
          limit_memory: '2Gi'
          request_memory: '1Gi'
          deployment-name: 'prod-sidekiq'
          requires:
            - deploy-approval-ind-sidekiq

      # Production chatwoot rails deployment
      - deploy-rails:
          name: prod-ind-chatwoot-rails
          context: prod-india-v2
          resource_class: delta-exchange/deploy-india
          filters:
            branches:
              only:
                - main
          cluster-name: prod-india-exchange
          min-replicas: '8'
          max-replicas: '18'
          env-name: production
          app-name: prod-chatwoot
          secret-name: prod-ind-chatwoot
          aws-region: $AWS_REGION
          docker-image-name: '${AWS_INDIA_ECR_URL}/chatwoot:rails-${CIRCLE_SHA1}'
          version-info: ${CIRCLE_SHA1}
          total_cpu: '4'
          request_cpu: '2'
          limit_memory: '5Gi'
          request_memory: '2.5Gi'
          deployment-name: 'prod-chatwoot'
          service-account: 'chatwoot-rails-sa'
          requires:
            - deploy-approval-ind-rails
      
