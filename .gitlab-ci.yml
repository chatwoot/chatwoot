include:
  - project: dtolk/dope/pipelines
    ref: main
    file: terraform.yml

stages:
  - pre-checks
  - test
  - build_and_publish
  - plan
  - comment
  - apply

default:
  image: 178432136258.dkr.ecr.eu-north-1.amazonaws.com/docker-builder
  services:
    - name: public.ecr.aws/docker/library/docker:26-dind
      alias: docker
  before_script:
    - eval $(ssh-agent -s)
    - chmod 400 "${CICD_PRIVATE_KEY}"
    - ssh-add "${CICD_PRIVATE_KEY}"
  
variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  BUNDLE_PATH: vendor/bundle

cache:
  key: vendor-bundle-$CI_COMMIT_REF_SLUG
  paths:
    - vendor/bundle
    - vendor/ruby

test:
  stage: test
  image: public.ecr.aws/docker/library/ruby:3.2.4-alpine3.20
  services:
    - name: postgres:15
      alias: db
    - name: redis:alpine
      alias: redis
  variables:
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: ""
    POSTGRES_DB: chatwoot_test
    POSTGRES_HOST_AUTH_METHOD: trust
    NODE_OPTIONS: --openssl-legacy-provider
    POSTGRES_PORT: 5432
    POSTGRES_HOST: db
    RAILS_ENV: test
  before_script:
    - apk update && apk add --no-cache make bash
    - make test-setup
  parallel:
    matrix:
      - JOB_NAME: test_spec_1
      - JOB_NAME: test_spec_2
      - JOB_NAME: test_frontend
  script:
    - echo "Running $JOB_NAME tests"
    - make ${JOB_NAME}
  after_script:
    # Collect logs
    - mkdir -p artifacts
    - cp -r log/* artifacts/
  artifacts:
    paths:
      - artifacts/
  only:
    - merge_request

build_and_publish:
  stage: build_and_publish
  script:
    - make build
    - make publish
  only:
    - main
    - merge_request
  needs: []

plan_infra:
  stage: plan
  script:
    - make -C infra init
    - make -C infra plan
  artifacts:
    paths:
      - infra/.terraform_${CI_ENVIRONMENT_NAME}/**
      - infra/${CI_ENVIRONMENT_NAME}.plan
    expire_in: 1 week
  environment:
    action: prepare
    name: infra
  needs:
    - build_and_publish
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      variables:
        TF_VAR_docker_image_tag: "$CI_DEFAULT_BRANCH-$CI_PIPELINE_ID"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      variables:
        TF_VAR_docker_image_tag: "mr-$CI_MERGE_REQUEST_IID-$CI_PIPELINE_ID"

comment_infra:
  extends: .comment
  dependencies:
    - plan_infra
  environment:
    name: infra

apply_infra:
  extends: .apply
  dependencies:
    - plan_infra
  environment: infra
  needs:
    - plan_infra
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  variables:
    TF_VAR_docker_image_tag: "$CI_DEFAULT_BRANCH-$CI_PIPELINE_ID"
