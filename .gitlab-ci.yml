include:
  - project: dtolk/dope/pipelines
    ref: main
    file: terraform.yml

stages:
  - pre-checks
  - build_and_publish
  - test
  - plan
  - comment
  - apply

default:
  image: 178432136258.dkr.ecr.eu-north-1.amazonaws.com/docker-builder
  services:
    - name: public.ecr.aws/docker/library/docker:26-dind
      alias: docker
  before_script:
    - eval $(ssh-agent -s)
    - chmod 400 "${CICD_PRIVATE_KEY}"
    - ssh-add "${CICD_PRIVATE_KEY}"
  
variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  BUNDLE_PATH: vendor/bundle

cache:
  key: vendor-bundle-$CI_COMMIT_REF_SLUG
  paths:
    - vendor/bundle
    - vendor/ruby

build_and_publish:
  stage: build_and_publish
  script:
    - make build
    - make publish
  only:
    - main
    - merge_request

# TODO: improve test stage to work with Docker in Docker
test:
  stage: test
  image: public.ecr.aws/ubuntu/ubuntu:20.04
  services:
    - name: postgres:15
      alias: db
    - name: redis:alpine
      alias: redis
  variables:
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: ""
    POSTGRES_DB: chatwoot_test
    POSTGRES_HOST_AUTH_METHOD: trust
    NODE_OPTIONS: --openssl-legacy-provider
    POSTGRES_PORT: 5432
    POSTGRES_HOST: db
    RAILS_ENV: test
  before_script:
    # install parquet libraries
    - apt update
    - apt install -y -V ca-certificates lsb-release wget
    - wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
    - apt install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
    - export DEBIAN_FRONTEND=noninteractive
    - ln -fs /usr/share/zoneinfo/Europe/Stockholm /etc/localtime
    - apt update
    - apt-get install -y  libarrow-dev libarrow-glib-dev libparquet-glib-dev libgirepository-1.0-1 libgirepository1.0-dev libpq-dev
    - sed -i -e 's/-std=c++11//g' /usr/lib/x86_64-linux-gnu/pkgconfig/re2.pc
    # install ruby dependencies
    - apt-get update -y
    - apt-get install -y curl git build-essential libssl-dev libreadline-dev zlib1g-dev libyaml-dev
    - git clone https://github.com/rbenv/rbenv.git ~/.rbenv
    - echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bashrc
    - echo 'eval "$(rbenv init -)"' >> ~/.bashrc
    - export PATH="$HOME/.rbenv/bin:$PATH"
    - eval "$(rbenv init -)"
    - git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
    - ~/.rbenv/plugins/ruby-build/install.sh
    # Install Ruby 3.2.4
    - rbenv install 3.2.4
    - rbenv global 3.2.4
    # Verify Ruby installation
    - ruby -v
    - gem install bundler
    - bundle install
    # install node.js and yarn
    - curl -fsSL https://deb.nodesource.com/setup_21.x | bash -
    - apt-get install -y nodejs
    - npm install --global yarn
    - yarn install --check-files
    # Prepare the application
    - rm -rf enterprise spec/enterprise
    - bundle exec rails webpacker:compile
    - bundle exec rake db:create
    - bundle exec rake db:schema:load
  script:
    # Run the tests
    - bundle exec rspec --profile=10 --format documentation
  after_script:
    # Collect logs
    - mkdir -p artifacts
    - cp -r log/* artifacts/
  artifacts:
    paths:
      - artifacts/
  only:
    - merge_request

plan_infra:
  stage: plan
  script:
    - make -C infra init
    - make -C infra plan
  artifacts:
    paths:
      - infra/.terraform_${CI_ENVIRONMENT_NAME}/**
      - infra/${CI_ENVIRONMENT_NAME}.plan
    expire_in: 1 week
  environment:
    action: prepare
    name: infra
  needs:
    - build_and_publish
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      variables:
        TF_VAR_docker_image_tag: "$CI_DEFAULT_BRANCH-$CI_PIPELINE_ID"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      variables:
        TF_VAR_docker_image_tag: "mr-$CI_MERGE_REQUEST_IID-$CI_PIPELINE_ID"

comment_infra:
  extends: .comment
  dependencies:
    - plan_infra
  environment:
    name: infra

apply_infra:
  extends: .apply
  dependencies:
    - plan_infra
  environment: infra
  needs:
    - plan_infra
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  variables:
    TF_VAR_docker_image_tag: "$CI_DEFAULT_BRANCH-$CI_PIPELINE_ID"
